<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iZdo&#39;s Blog</title>
  <subtitle>bonbolu</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://izdo.github.io/"/>
  <updated>2017-12-30T09:28:26.928Z</updated>
  <id>https://izdo.github.io/</id>
  
  <author>
    <name>iZdo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML+CSS</title>
    <link href="https://izdo.github.io/2017/12/30/HTML+CSS/"/>
    <id>https://izdo.github.io/2017/12/30/HTML+CSS/</id>
    <published>2017-12-30T09:28:41.665Z</published>
    <updated>2017-12-30T09:28:26.928Z</updated>
    
    <content type="html"><![CDATA[<p>HTML<br>一、html简介<br>    1、html是什么<br>        Html是用来描述网页的一种语言。<br>            (1)HTML 指的是超文本标记语言 (Hyper Text Markup Language)<br>            (2)HTML 不是一种编程语言，而是一种标记语言(markup language, 标记语言是一套标记标签(markup tag));<br>            (3)HTML 使用标记标签来描述网页</p>
<pre><code>    超文本 标记 语言
        语言：
            人与计算机交互的工具
        超文本：
            (1)普通文本不能实现的，超文本可以实现，能实现普通文本不能实现的功能
            (2)包括超链接的文本
        标记：
            就是标签，不同的标签能实现不同的功能

2、html能做什么
    html通过标签的形式将信息展示给用户

3、html书写规范  
    (1)html结构
        &lt;html&gt;
            &lt;head&gt;
                包括资讯信息：整个页面的属性、指导浏览器解析的标签、引入外部文件的标签
            &lt;/head&gt;
            &lt;body&gt;
                我们需要展示的信息
            &lt;/body&gt;
        &lt;/html&gt;
    (2)html标签是以尖括号包裹关键字成对出现的，有开始标签和结束标签，支持正确的嵌套
    (3)大部分标签有属性 格式：属性=“属性值”（多个属性之间用空格隔开）
    (4)空标签：功能比较单一 ，例如：&lt;br&gt;&lt;/br&gt; === &lt;br/&gt;
    (5)html不区分大小写，建议使用小写

    需求：写一段文字，将其中的部分文字变成红色，字号变大
    &lt;html&gt;
        &lt;head&gt;&lt;/head&gt;
        &lt;body&gt;
            我请大家吃狗不理&lt;font color=&quot;red&quot; size=&quot;5&quot;&gt;包子&lt;/font&gt;，
            &lt;br/&gt;
            大家很高兴！！！
        &lt;/body&gt;
    &lt;/html&gt;
</code></pre><p>二、html基本标签</p>
<pre><code>1、文件标签(结构标签)
    &lt;html&gt;&lt;html&gt;:根标签
    &lt;head&gt;
        &lt;title&gt;&lt;/title&gt;:页面的标题
    &lt;/head&gt;
    &lt;body&gt;&lt;/body&gt;：内容
        属性：
            text:文本的颜色
            bgcolor:背景色
            background:背景图片

        颜色的三种表示方式：
            (1)单词：red green black 
            (2)rgb三原色：reg(0,0,0)  0-255
            (3)#000000  #ffffff  #325687   #377405

2、排版标签
    (1)注释标签：&lt;!--注释--&gt;
    (2)换行标签：&lt;br/&gt;
    (3)段落标签：&lt;p&gt;文本文字&lt;/p&gt; 
        特点：段与段之间有空行
        属性：
            align:对齐方式（有三个属性值：left  center   right）
    (4)水平线标签：&lt;hr/&gt;
        属性：
            width:长度
            size:粗度
            color：颜色
            align:对齐方式

        尺寸的写法：
            （1）像素：10px
            （2）百分比：占据副标签的百分比，会随着副标签的大小进行变化

3、块标签
    &lt;div&gt;&lt;/div&gt;:行级块标签
    &lt;span&gt;&lt;/span&gt;:行内块标签

    作用：
        （1）&lt;div&gt;&lt;/div&gt;：div+css布局
        （2）&lt;span&gt;&lt;/span&gt;：进行友好提示

4、文字标签
    基本文字标签：&lt;font&gt;&lt;/font&gt;
        属性：
            color:颜色
            size:大小（最大值:7，最小值:1，默认值:3）
            face:字体类型，即字体，直接写文字就可以
    标题标签：&lt;h1&gt;&lt;/h1&gt;-&lt;h6&gt;&lt;/h6&gt;
        随着数字的增大逐渐变小，字体是加粗的，内置字号 默认占据一行

5、清单标签（也称为列表标签）
    无序列表：&lt;ul&gt;&lt;/ul&gt;
        &lt;li&gt;&lt;/li&gt;:列表项
        属性：
            type：有三个值，分别为disc、 square和circle

        示例：
        &lt;ul &gt;
            &lt;li&gt;列表项&lt;/li&gt;
            &lt;li&gt;列表项&lt;/li&gt;
            &lt;li&gt;列表项&lt;/li&gt;                
        &lt;/ul&gt;

    有序列表：&lt;ol&gt;&lt;/ol&gt;
        &lt;li&gt;&lt;/li&gt;:列表项
        属性：
            type：1、A、a、I、i（数字、字母、罗马数字）
            start:数字，代表首项开始位置

        示例：
        &lt;ol&gt;
            &lt;li&gt;列表项&lt;/li&gt;
            &lt;li&gt;列表项&lt;/li&gt;
            &lt;li&gt;列表项&lt;/li&gt;    
        &lt;/ol&gt;

    列表标签的作用：实现菜单项（可以实现横向或者纵向菜单）
    无序列表标签怎么去掉小圆点？HTML中不能直接去掉，没有这个属性值，需要在CSS中给li标签添加样式list-style:none;

6、图形标签：&lt;img /&gt;（自关闭标签）
    属性：
        src:图形地址
        width:宽度
        height:高度
        border:边框
        align:对齐方式，代表图片与相邻的文本的相对位置（有三个属性值：top middle bottom）
        alt:图片的文字说明

7、链接标签：&lt;a&gt;&lt;/a&gt;
    属性：
        href:跳转页面地址
        name:名称，锚点
        target:_self(自己) _blank(新页面,之前的页面还有)， 默认是_self
    作用：
        （1）页面跳转，注意：要调到外网必须要加协议
        （2）访问锚点；回到锚点（顶部、底部、中间），在访问锚点时的书写格式：#name的值；

8、表格标签
    &lt;table&gt;&lt;/table&gt;:
        属性：
            border:表格边框
            width:表格的宽度
            align:表格的对齐方式（&lt;tr align=&quot;center&quot;&gt;单元格里面的内容居中对齐&lt;tr&gt;）
            bgcolor:背景颜色
    &lt;tr&gt;&lt;/tr&gt;: 代表行
    &lt;td&gt;&lt;/td&gt;：代表单元格
        属性：
            colspan:列合并
            rowspan:行合并
    &lt;th&gt;&lt;/th&gt;：相等于&lt;td&gt;, 只是内置样式加粗居中
    &lt;caption&gt;&lt;/caption&gt;：表格的标题，即表头

    表格的作用：
        (1)简单的实现一个表格样式
        (2)进行页面布局

    示例：
    &lt;table&gt;
        &lt;tr&gt;&lt;!--行--&gt;
            &lt;th&gt;表格标头&lt;/th&gt;
            &lt;td&gt;普通单元格&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;

    &lt;thead&gt;&lt;/thead&gt;、&lt;tbody&gt;&lt;/tbody&gt;、&lt;tfoot&gt;&lt;/tfoot&gt;
    作用：分块加载，用户体验比较好
</code></pre><p>三、html表单标签(重点)</p>
<pre><code>1、form标签：&lt;form&gt;&lt;/form&gt;
    属性： 
        name:表单名称
        action:提交的路径地址
        method:提交方式（get和post）

        get和post的区别（重点）：
            (1)get提交将数据加在地址栏的后面，格式?name=value&amp;name=value；post提交将数据封装在请求体中
                ?username=zhangsan&amp;password=123&amp;sex=male&amp;hobby=football&amp;hobby=paiqiu&amp;city=bj#
            (2)get提交相对不安全；post提交相对安全
            (3)get提交有大小限制，根据浏览器不同而不同；post不限制大小

    示例：
    &lt;form&gt; 
        &lt;table&gt;
            &lt;!--form里面嵌套table--&gt;            
        &lt;/table&gt;            
    &lt;/form&gt;

2、input标签：&lt;input type=&quot; &quot;/&gt;
    type属性:根据type属性实现各种不同功能的表单项；
        text：普通的文本输入框；
            name：username value=&quot;张三&quot;&lt;!--张三是默认值--&gt;
        password：密码输入框；特点是显示的是掩码
        radio：单选按钮
            name：如果想让一组单选按钮互斥，就用指定同意name属性值，需要加value属性值；
            checked：默认被选中；              
        checkbox：复选框；
            name：组的概念，需要加value属性值。
            checked：默认被选中；
        file：上传文件的控件
        button：普通按钮，没有任何内置的功能；
        submit：内置功能，点击会按照action地址提交
        reset：重置，点击会清空之前填写的内容
        image：图片按钮，功能类似与submit
            src：加载图片
            alt:图片的提示文字
        hidden:隐藏表单，作用是在提交数据的时候，服务器需要这个数据，但是不需要用户看到。

    注意：name属性必须要写。

3、select标签(&lt;select&gt;&lt;/select&gt;)：下拉菜单
    属性：
        name:表单项的名称
    option标签：可选项（下拉菜单之间的级联）
        属性：
            value，表单项的值
            selected：默认被选中

4、textarea:文本域标签
    属性：
        cols：列数
        rows：行数
    注意：默认的文本值在标签体当中
</code></pre><p>四、html框架标签及其他</p>
<pre><code>1、框架标签
    frameset:
        属性：
            rows；按行划分
            cols：按列划分
            划分格式： rows=&quot;120,*&quot;
    frame:
        属性： 
            name：名称，方便target根据name值进行定位
            src:加载的页面地址；

2、其他标签
    &lt;meta&gt;
        &lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&gt;
        &lt;meta http-equiv=&quot;description&quot; content=&quot;this is my page&quot;&gt;
        &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
    &lt;link&gt;
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./styles.css&quot;&gt;
            href：引入css文件的地址
    &lt;script&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;&quot;&gt;&lt;/script&gt;
            src：js的文件地址

3、特殊字符
    &amp;nbsp; 空格
    &amp;gt;   大于号
    &amp;lt;   小于号
    &amp;copy; 版权符号
    &amp;reg;  注册符号
</code></pre><p>CSS</p>
<p>一、css的简介<br>    1、什么是css<br>        层叠样式表，css是对html进行样式修饰语言<br>        层叠：就是层层覆盖叠加，如果不同的css样式对同一html标签进行修饰，样式有冲突的部分应用优先级高的，不冲突的部分共同作用<br>        样式表：就是css属性样式的集合<br>    2、css的作用<br>        (1)修饰html的 使其html样式更加好看<br>        (2)提高样式代码的复用性<br>        (3)html的内容与样式相分离 便于后期维护 </p>
<pre><code>3、css的引入方式和书写规范
    (1)内嵌样式
        内嵌样式是把css的代码嵌入到html标签中
        &lt;div style=&quot;color:red;font-size: 100px;&quot;&gt;你好啊 小朋友&lt;/div&gt;
        语法：
            (1)使用style属性将样式嵌入到html标签中
            (2)属性的写法：属性：属性值
            (3)多个属性之间使用分号;隔开
        不建议使用
    (2)内部样式
        在head标签中使用style标签进行css的引入
        &lt;style type=&quot;text/css&quot;&gt;
            div{color:red;font-size: 100px;}
        &lt;/style&gt;
        语法：
            (1)使用style标签进行css的引入
                &lt;style type=&quot;text/css&quot;&gt;
                    属性：type：告知浏览器使用css解析器去解析
            (2)属性的写法：属性：属性值
            (3)多个属性之间使用分号;隔开

    (3)外部样式
        将css样式抽取成一个单独css文件 谁去使用谁就引用
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;demo1.css&quot;/&gt;
        语法：
            (1)创建css文件 将css属性写在css文件中
            (2)在head中使用link标签进行引入
                &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css文件地址&quot;/&gt;
                rel:代表要引入的文件与html的关系
                type：告知浏览器使用css解析器去解析
                href：css文件地址
            (3)属性的写法：属性：属性值
            (4)多个属性之间使用分号;隔开
    (4)@import方式
        &lt;style type=&quot;text/css&quot;&gt;
            @import url(&quot;css地址&quot;);
        &lt;/style&gt;
        link与@import方式的区别：
            (1)link所有浏览器都支持 import部分低版本IE不支持
            (2)import方式是等待html加载完毕之后在加载
            (3)import方式不支持js的动态修改
</code></pre><p>二、css选择器<br>    1、基本选择器<br>        (1)元素选择器</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML&lt;br&gt;一、html简介&lt;br&gt;    1、html是什么&lt;br&gt;        Html是用来描述网页的一种语言。&lt;br&gt;            (1)HTML 指的是超文本标记语言 (Hyper Text Markup Language)&lt;br&gt;        
    
    </summary>
    
      <category term="JavaEE" scheme="https://izdo.github.io/categories/JavaEE/"/>
    
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
      <category term="JavaEE" scheme="https://izdo.github.io/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>一像素进程保活</title>
    <link href="https://izdo.github.io/2017/12/30/%E4%B8%80%E5%83%8F%E7%B4%A0%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%B4%BB/"/>
    <id>https://izdo.github.io/2017/12/30/一像素进程保活/</id>
    <published>2017-12-30T08:43:09.729Z</published>
    <updated>2017-12-26T15:04:10.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一像素进程保活"><a href="#一像素进程保活" class="headerlink" title="一像素进程保活"></a>一像素进程保活</h1><h2 id="为什么要保活"><a href="#为什么要保活" class="headerlink" title="为什么要保活"></a>为什么要保活</h2><blockquote>
<p>从产品的角度来说，任何一个app都希望自己在用户手机中的存活率高些，即使app被用户杀死，关键的服务仍要存活，即app要有一个保活的进程来保障app一直存活于后台不被杀死。<br>针对国内第三方厂商ROM在息屏后app很快被杀死的调查发现：原生系统在内存充足的情况下，用户执行熄屏的操作不会立即杀死app，但是第三方ROM会，在系统管理工具检测到锁屏事件后一段时间(一般为5分钟以内)内会杀死后台进程，达到省电和释放内存的目的，推测是第三方厂商修改了ROM在熄屏时执行了内存清理工作，不论此时手机内存是否充足都执行清理，对于没有加入到厂商ROM清理白名单中的app，不可避免的就会被杀死，而像QQ，微信这类app已经加入到系统的白名单中，不需要用户手动添加，这是由于双方达成协议，厂商白名单中提前加入了QQ，微信。<br>目前保活的手段有很多种，这里就讲述一下一像素进程保活的思路(据说QQ用过这种保活手段)。</p>
</blockquote>
<h2 id="一像素进程概述"><a href="#一像素进程概述" class="headerlink" title="一像素进程概述"></a>一像素进程概述</h2><blockquote>
<p>一像素进程其实就是当应用进入后台时，在手机界面上开启一个一像素的Activity，由于一像素已经小到肉眼不可见的级别，所以也不用担心被用户发现，这样app的进程优先级就被提高，减少了被系统杀死的几率(并不是说不会被杀死)。</p>
</blockquote>
<h2 id="一像素进程保活案例"><a href="#一像素进程保活案例" class="headerlink" title="一像素进程保活案例"></a>一像素进程保活案例</h2><blockquote>
<p>接下来用一个案例讲述一像素进程保活。</p>
</blockquote>
<h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String TAG = <span class="string">"abc"</span>;</div><div class="line">    <span class="keyword">private</span> OnePixelReceiver onePixelReceive;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="comment">// 广播接收者</span></div><div class="line">        onePixelReceive = <span class="keyword">new</span> OnePixelReceiver();</div><div class="line"></div><div class="line">        <span class="comment">// IntentFilter 被广播接收者接收的Action</span></div><div class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">        intentFilter.addAction(Intent.ACTION_SCREEN_OFF);</div><div class="line">        intentFilter.addAction(Intent.ACTION_SCREEN_ON);</div><div class="line"></div><div class="line">        <span class="comment">// 注册广播接收者</span></div><div class="line">        registerReceiver(onePixelReceive, intentFilter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"程序进入前台"</span>);</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"程序进入后台"</span>);</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="广播接收者OnePixelReceiver"><a href="#广播接收者OnePixelReceiver" class="headerlink" title="广播接收者OnePixelReceiver"></a>广播接收者OnePixelReceiver</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnePixelReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String TAG = <span class="string">"abc"</span>;</div><div class="line">    <span class="keyword">private</span> Intent it;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (intent.getAction().equals(Intent.ACTION_SCREEN_OFF)) &#123;<span class="comment">// 屏幕关闭的状态下</span></div><div class="line">            Log.i(TAG, <span class="string">"锁屏了 "</span>);</div><div class="line">            it = <span class="keyword">new</span> Intent(context, OnePixelActivity.class);</div><div class="line">            <span class="comment">// 栈中查找 没有则new一个</span></div><div class="line">            it.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">            context.startActivity(it);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(Intent.ACTION_SCREEN_ON)) &#123;<span class="comment">// 屏幕开启的状态下</span></div><div class="line">            Log.i(TAG, <span class="string">"亮屏了 "</span>);</div><div class="line">            <span class="comment">// 发送finish的广播</span></div><div class="line">            context.sendBroadcast(<span class="keyword">new</span> Intent(<span class="string">"finish"</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="一像素OnePixelActivity"><a href="#一像素OnePixelActivity" class="headerlink" title="一像素OnePixelActivity"></a>一像素OnePixelActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnePixelActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="string">"abc"</span>;</div><div class="line">    <span class="keyword">private</span> MyThread myThread;</div><div class="line">    <span class="keyword">private</span> BroadcastReceiver broadcastReceiver;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        myThread = <span class="keyword">new</span> MyThread();</div><div class="line"></div><div class="line">        <span class="comment">// 设置一个一像素的界面</span></div><div class="line">        Window window = getWindow();</div><div class="line">        window.setGravity(Gravity.LEFT | Gravity.TOP);</div><div class="line">        WindowManager.LayoutParams attributes = window.getAttributes();</div><div class="line">        attributes.x = <span class="number">0</span>;</div><div class="line">        attributes.y = <span class="number">0</span>;</div><div class="line">        attributes.height = <span class="number">1</span>;</div><div class="line">        attributes.width = <span class="number">1</span>;</div><div class="line">        window.setAttributes(attributes);</div><div class="line"></div><div class="line">        <span class="comment">// 结束界面广播</span></div><div class="line">        broadcastReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        registerReceiver(broadcastReceiver, <span class="keyword">new</span> IntentFilter(<span class="string">"finish"</span>));</div><div class="line">        printLog();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span> </span>&#123;</div><div class="line">        myThread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        unregisterReceiver(broadcastReceiver);</div><div class="line">        Log.i(TAG, <span class="string">"onDestroy: "</span>);</div><div class="line">        myThread.stop();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            Log.i(<span class="string">"abc"</span>, <span class="string">"run: "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行程序后通过日志可以发现:</p>
</blockquote>
<ul>
<li><p>当应用打开位于前台时，打印日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I/abc: 程序进入前台</div></pre></td></tr></table></figure>
</li>
<li><p>当锁屏时，打印日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">I/abc: 程序进入后台</div><div class="line">I/abc: 锁屏了 </div><div class="line">I/abc: run: </div><div class="line">I/abc: run: </div><div class="line">I/abc: run: </div><div class="line">I/abc: run: </div><div class="line">...(不断打run:)</div></pre></td></tr></table></figure>
</li>
<li><p>当重新亮屏时，打印日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I/abc: 亮屏了 </div><div class="line">I/abc: onDestroy:</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>思路：通过监控手机锁屏解锁事件，当程序从前台进入后台(锁屏)时，通过发送广播通知广播接收者打开一个一像素的进程OnePixelActivity，并在线程MyThread中不停的打印run日志，当屏幕重新亮屏时，同样发送一个finish的广播(通知广播接收者OnePixelReceiver再发送一个finish广播)，从而销毁一像素的进程，同时将MyThread销毁，不再打印run日志。</p>
<p>总结：一像素进程保活的实质其实就是当程序进入后台时，吊起一个一像素的页面，假装app在前台，拥有最高的进程优先级，但事实上，这种一像素的进程保活手段非常流氓，而且是在用户不知情的情况下开启，对用户很不友好，所以不推荐使用，但是技术无罪，了解一下这种技术扩展一下见识也是有益的。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一像素进程保活&quot;&gt;&lt;a href=&quot;#一像素进程保活&quot; class=&quot;headerlink&quot; title=&quot;一像素进程保活&quot;&gt;&lt;/a&gt;一像素进程保活&lt;/h1&gt;&lt;h2 id=&quot;为什么要保活&quot;&gt;&lt;a href=&quot;#为什么要保活&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Notification</title>
    <link href="https://izdo.github.io/2017/12/30/Notification/"/>
    <id>https://izdo.github.io/2017/12/30/Notification/</id>
    <published>2017-12-30T08:43:09.725Z</published>
    <updated>2017-12-30T08:42:21.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Notification"><a href="#Notification" class="headerlink" title="Notification"></a>Notification</h1><h2 id="Notification-通知-概述"><a href="#Notification-通知-概述" class="headerlink" title="Notification(通知)概述"></a>Notification(通知)概述</h2><blockquote>
<p>通知是一个可以在应用程序正常的用户界面之外显示给用户的消息。<br>通知发出时，它首先出现在状态栏的通知区域中，用户打开通知抽屉可查看通知详情。<br>通知区域和通知抽屉都是用户可以随时查看的系统控制区域。</p>
<p>通知的目的是高职用户App事件，例如</p>
<ol>
<li>显示接收到的短消息，即使消息等信息，如：QQ、微信、短信等。</li>
<li>显示客户端的推送消息，如广告、应用更新、推荐新闻等，常用的第三方SDK有：JPush、个推、阿里云推送等。</li>
<li>显示正在进行的后台程序，如：音乐播放器、下载文件进度等。</li>
</ol>
</blockquote>
<h2 id="Notification的基本使用"><a href="#Notification的基本使用" class="headerlink" title="Notification的基本使用"></a>Notification的基本使用</h2><p><strong>* Android3.0(API11)之前创建Notification的方式为new Notification()</strong><br><strong>* Android3.0(API11)之后创建Notification的方式改为Notification.Builder()</strong></p>
<h3 id="通知的必备属性"><a href="#通知的必备属性" class="headerlink" title="通知的必备属性"></a>通知的必备属性</h3><blockquote>
<p>一个通知必须包含三个属性：</p>
<ol>
<li>小图标 -&gt; setSmallIcon()</li>
<li>通知标题 -&gt; setContentTitle()</li>
<li>通知内容 -&gt; setContentText()<br>除了以上属性，其他如震动、响铃、呼吸灯等都是可选属性。<br>话虽如此，但是还是建议给Notification设置一个Action，这样通过Notification就可以跳转到某个Activity、启动Service或发送Broadcast，否则，Notification就只能起到通知的效果，不能与用户进行交互。</li>
</ol>
</blockquote>
<h3 id="创建Notification"><a href="#创建Notification" class="headerlink" title="创建Notification"></a>创建Notification</h3><blockquote>
<p>Notification的创建需要设计到Notification.Builder、Notification以及NotificationManager这三个类。</p>
<ul>
<li>Notification.Builder：使用建造者模式构建Notification对象(为了解决兼容性问题，Google在Android Support v4中加入了NotificationCompat.Builder类用于构建Notification)。</li>
<li>Notification：通知对应类，保存通知的相关数据。</li>
<li>NotificationManager：通知管理类，是一个系统服务。通过调用notify()方法可以向系统发送通知。</li>
</ul>
</blockquote>
<h4 id="创建Notification的步骤"><a href="#创建Notification的步骤" class="headerlink" title="创建Notification的步骤"></a>创建Notification的步骤</h4><ol>
<li>获取NotificationManager实例</li>
<li>实例化NotificationCompat.Builder()并设置相关属性</li>
<li>通过builder.build()方法生成Notification对象，并发送通知<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取NotificationManager实例</span></div><div class="line">NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line"></div><div class="line"><span class="comment">// 实例化NotificationCompat.Builder()并设置相关属性</span></div><div class="line">NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</div><div class="line">        <span class="comment">// 设置小图标</span></div><div class="line">        .setSmallIcon(R.mipmap.ic_launcher)</div><div class="line">        <span class="comment">// 设置通知标题</span></div><div class="line">        .setContentTitle(<span class="string">"通知标题"</span>)</div><div class="line">        <span class="comment">// 设置通知内容</span></div><div class="line">        .setContentText(<span class="string">"通知内容"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 通过builder.build()方法生成Notification对象，并发送通知(1为通知的id)</span></div><div class="line">notificationManager.notify(<span class="number">1</span>, builder.build());</div></pre></td></tr></table></figure>
</li>
</ol>
<p>效果图：<br><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog32/Blog32_1.png?raw=true" alt=""></p>
<blockquote>
<p>这是一个最简单的通知，但是还不具备与用户交互的能力(点击Notification后并没有任何事件触发)，这是因为没有给Notification设置Action。</p>
</blockquote>
<h3 id="为Nofitication设置Action"><a href="#为Nofitication设置Action" class="headerlink" title="为Nofitication设置Action"></a>为Nofitication设置Action</h3><h4 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取NotificationManager实例</span></div><div class="line">NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line"></div><div class="line"><span class="comment">// 获取PendingIntent</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MainActivity.class);</div><div class="line">PendingIntent pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>,<span class="number">0</span>,intent,PendingIntent.FLAG_UPDATE_CURRENT);</div><div class="line"></div><div class="line"><span class="comment">// 实例化NotificationCompat.Builder()并设置相关属性</span></div><div class="line">NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</div><div class="line">        .setSmallIcon(R.mipmap.ic_launcher)</div><div class="line">        .setContentTitle(<span class="string">"通知标题"</span>)</div><div class="line">        .setContentText(<span class="string">"通知内容"</span>)</div><div class="line">        <span class="comment">// 设置intent</span></div><div class="line">        .setContentIntent(pendingIntent)</div><div class="line">        <span class="comment">// 设置点击通知后自动清除Notification</span></div><div class="line">        .setAutoCancel(<span class="keyword">true</span>);</div><div class="line"></div><div class="line"><span class="comment">// 通过builder.build()方法生成Notification对象，并发送通知(1为通知的id)</span></div><div class="line">notificationManager.notify(<span class="number">1</span>, builder.build());</div></pre></td></tr></table></figure>
<blockquote>
<p>在设置PendingIntent之后，点击通知就会跳转到MainActivity了，而同时由于设置了setAutoCancel(true)，在点击通知之后，Notification会被清除。</p>
</blockquote>
<h2 id="PendingIntent"><a href="#PendingIntent" class="headerlink" title="PendingIntent"></a>PendingIntent</h2><blockquote>
<p>PendingIntent是一种特殊的Intent，其意思为延迟的Intent，用于在某个事件结束后执行特定的Action，如上述案例中的Notification中的PendingIntent，当Notification弹出时并不会马上进行跳转，而是延时到当用户点击通知时才会执行跳转操作。<br>PendingIntent是Android系统管理并持有的用于描述和获取原始数据的对象的引用，也就是说，即使创建该PendingIntent对象的进程被杀死了，这个PendingIntent对象在其他进程中还是可用的，日常使用中的短信、闹钟等都用到了PendingIntent。</p>
</blockquote>
<h3 id="PendingIntnet的三种构造方法"><a href="#PendingIntnet的三种构造方法" class="headerlink" title="PendingIntnet的三种构造方法"></a>PendingIntnet的三种构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取一个用于启动Activity的PendingIntent对象</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PendingIntent <span class="title">getActivity</span><span class="params">(Content content,<span class="keyword">int</span> requestCode,Intent intent,<span class="keyword">int</span> flags)</span></span>;</div><div class="line"><span class="comment">// 获取一个用于启动Service的PendingIntent对象</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PendingIntent <span class="title">getService</span><span class="params">(Context context,<span class="keyword">int</span> requestCode,Intent intent,<span class="keyword">int</span> flags)</span></span>;</div><div class="line"><span class="comment">// 获取一个用于向BroadcastReceiver发送广播的PendingIntent对象</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PendingIntent <span class="title">getBroadcast</span><span class="params">(Context context,<span class="keyword">int</span> requestCode,Intent intent,<span class="keyword">int</span> flags)</span></span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>PendingIntent的几种flag包括：</p>
<ul>
<li>FLAG_CANCEL_CURRENT:如果当前系统中已经存在一个相同的PendingIntent对象，那么就先将已有的PendingIntent取消，然后重新生成一个PendingIntent对象。</li>
<li>FLAG_NO_CREATE:如果当前系统中不存在相同的PendingIntent对象，系统将不会创建该PendingIntent对象而是直接返回null。</li>
<li>FLAG_ONE_SHOT:该PendingIntent只作用一次。</li>
<li>FLAG_UPDATE_CURRENT:如果系统中已存在该PendingIntent对象，那么系统将保留该PendingIntent对象，但是会使用新的Intent来更新之前PendingIntent中Intent对象的数据。</li>
</ul>
</blockquote>
<h2 id="更新Notification"><a href="#更新Notification" class="headerlink" title="更新Notification"></a>更新Notification</h2><blockquote>
<p>更新通知很简单，只需再次发送相同ID的通知即可，如果之前的通知依然存在则会更新通知属性，如果之前通知不存在则重新创建。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 更新通知与创建使用方式相同</span></div><div class="line">notificationManager.notify(<span class="number">1</span>, builder.build());</div></pre></td></tr></table></figure>
<h2 id="取消通知"><a href="#取消通知" class="headerlink" title="取消通知"></a>取消通知</h2><blockquote>
<p>取消通知的方式有以下五种：</p>
<ol>
<li>点击通知栏的清除按钮，会清除所有可清除的通知</li>
<li>设置了setAutoCancel()或FLAG_AUTO_CANCEL的通知，点击该通知时会清除它</li>
<li>通过NotificationManager调用cancel(int id)方法清除指定ID的通知</li>
<li>通过NotificationManager调用cancel(String tag,int id)方法清除指定TAG和ID的通知</li>
<li>通过NotificationManager调用cancelAll()方法清除所有该应用发送的通知  </li>
</ol>
</blockquote>
<p><strong>* 如果是通过NotificationManager.notify(String tag,int id.Notification notify)方法创建的通知，那么只能通过NotificationManager.cancel(String tag,int id)方法才能清除对应的通知，而过NotificationManager.cancel(int id)是无效的</strong></p>
<h2 id="Notification的通知效果"><a href="#Notification的通知效果" class="headerlink" title="Notification的通知效果"></a>Notification的通知效果</h2><blockquote>
<p>Notification有震动、响铃、呼吸灯三种效果，可以通过setDefaults(int defaults)方法设置。<br>Default有以下四种属性：</p>
<ul>
<li>Notification.DEFAULT_VIBRATE：添加默认震动效果，需要申请震动权限：<uses-permission android:name="android.permission.VIBRATE"></uses-permission></li>
<li>Notification.DEFAULT_SOUND：添加系统默认声音效果，设置此值后，调用setSound()设置的自定义声音无效</li>
<li>Notification.DEFAULT_LIGHTS：添加默认呼吸灯效果，使用时须与Notification.FLAG_SHOW_LIGHTS结合使用，否则无效</li>
<li>Notification.DEFAULT_ALL：添加上述三种默认提醒效果  </li>
</ul>
</blockquote>
<p><strong>* 注：当设置默认的提醒效果后，自定义的提醒效果全部失效。</strong></p>
<blockquote>
<p>除了上述几种默认通知效果，Notification还提供了以下几种FLAG设置通知效果：</p>
<ul>
<li>Notification.FLAG_SHOW_LIGHTS：三色灯提醒</li>
<li>Notification.FLAG_FLAG_ONGOING_EVENT：发起正在运行事件</li>
<li>Notification.FLAG_INSISTENT：让铃声、震动无限循环，直到用户取消或者打开</li>
<li>Notification.FLAG_ONLY_ALERT_ONCE：让铃声、震动只执行一次</li>
<li>Notification.FLAG_AUTO_CANCEL：单击通知后自动消失</li>
<li>Notification.FLAG_NO_CLEAR：无法被清除的通知，只有通过调用NotificationManager.cancel()时才会被清除</li>
<li>Notification.FLAG_FOREGROUND_SERVICE：表示正在运行的服务</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(MainActivity.<span class="keyword">this</span>)</div><div class="line">        .setSmallIcon(R.mipmap.ic_launcher)</div><div class="line">        .setContentTitle(<span class="string">"通知标题"</span>)</div><div class="line">        .setContentText(<span class="string">"带有铃声+震动+呼吸灯效果的通知"</span>)</div><div class="line">        <span class="comment">//等价于setDefaults(Notification.DEFAULT_SOUND | Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE);</span></div><div class="line">        .setDefaults(Notification.DEFAULT_ALL);</div><div class="line">mManager.notify(<span class="number">1</span>, builder.build());</div></pre></td></tr></table></figure>
<h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><blockquote>
<p>通知分为普通视图通知和大视图通知，一般情况下不做特殊设置(默认情况下)的通知都是普通视图通知。<br>可以通过NotificationCompat.Builder.setStyle()设置大视图。<br><strong>* 大视图(Big Views)由Android4.1(API16)开始引入，仅支持4.1及以上的版本 </strong></p>
<h3 id="构建大视图通知案例"><a href="#构建大视图通知案例" class="headerlink" title="构建大视图通知案例"></a>构建大视图通知案例</h3></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取NotificationManager实例</span></div><div class="line">NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line"></div><div class="line"> <span class="comment">// 实例化NotificationCompat.Builder()并设置相关属性</span></div><div class="line">NotificationCompat.Builder builder =</div><div class="line">        <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</div><div class="line">                .setSmallIcon(R.mipmap.ic_launcher)</div><div class="line">                .setContentTitle(<span class="string">"通知标题"</span>)</div><div class="line">                .setContentText(<span class="string">"通知内容"</span>)</div><div class="line">                .setDefaults(Notification.DEFAULT_ALL)</div><div class="line">                <span class="comment">// 该方法在Android 4.1之前会被忽略</span></div><div class="line">                .setStyle(<span class="keyword">new</span> NotificationCompat.BigTextStyle()</div><div class="line">                        .bigText(<span class="string">"大视图Text"</span>));</div><div class="line"></div><div class="line"><span class="comment">// 通过builder.build()方法生成Notification对象，并发送通知(1为通知的id)</span></div><div class="line">notificationManager.notify(<span class="number">1</span>, builder.build());</div></pre></td></tr></table></figure>
<h2 id="进度条通知"><a href="#进度条通知" class="headerlink" title="进度条通知"></a>进度条通知</h2><h3 id="明确进度的进度条通知"><a href="#明确进度的进度条通知" class="headerlink" title="明确进度的进度条通知"></a>明确进度的进度条通知</h3><blockquote>
<p>可以使用setProgress(max,progress,false)来更新进度<br>参数说明：<br>max：最大进度值<br>progress：当前进度<br>false：是否不明确进度</p>
<h4 id="使用明确进度的进度条通知模拟下载过程"><a href="#使用明确进度的进度条通知模拟下载过程" class="headerlink" title="使用明确进度的进度条通知模拟下载过程"></a>使用明确进度的进度条通知模拟下载过程</h4></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取NotificationManager实例</span></div><div class="line"><span class="keyword">final</span> NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line"></div><div class="line"><span class="comment">// 实例化NotificationCompat.Builder()并设置相关属性</span></div><div class="line"><span class="keyword">final</span> NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</div><div class="line">        .setContentTitle(<span class="string">"下载通知"</span>)</div><div class="line">        .setContentText(<span class="string">"下载中"</span>)</div><div class="line">        .setSmallIcon(R.mipmap.ic_launcher);</div><div class="line"></div><div class="line"><span class="keyword">new</span> Thread(</div><div class="line">        <span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> cur;</div><div class="line">                <span class="keyword">for</span> (cur = <span class="number">0</span>; cur &lt;= <span class="number">100</span>; cur += <span class="number">10</span>) &#123;</div><div class="line">                    builder.setProgress(<span class="number">100</span>, cur, <span class="keyword">false</span>);</div><div class="line">                    notificationManager.notify(<span class="number">1</span>, builder.build());</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">1000</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (cur != <span class="number">100</span>)</div><div class="line">                        Log.i(<span class="string">"abc"</span>, <span class="string">"下载中: "</span> + cur + <span class="string">"%"</span>);</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        Log.i(<span class="string">"abc"</span>, <span class="string">"下载完成: "</span> + cur + <span class="string">"%"</span>);</div><div class="line">                &#125;</div><div class="line">                builder.setContentText(<span class="string">"下载完成 "</span>)</div><div class="line">                        <span class="comment">// 移除进度条</span></div><div class="line">                        .setProgress(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">false</span>);</div><div class="line">                notificationManager.notify(<span class="number">1</span>, builder.build());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">).start();</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog32/Blog32_2.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog32/Blog32_3.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="不明确进度的进度条通知"><a href="#不明确进度的进度条通知" class="headerlink" title="不明确进度的进度条通知"></a>不明确进度的进度条通知</h3><blockquote>
<p>可以使用setProgress(0, 0, true)来更新进度  </p>
<h4 id="修改代码-1"><a href="#修改代码-1" class="headerlink" title="修改代码"></a>修改代码</h4></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取NotificationManager实例</span></div><div class="line"><span class="keyword">final</span> NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line"></div><div class="line"><span class="comment">// 实例化NotificationCompat.Builder()并设置相关属性</span></div><div class="line"><span class="keyword">final</span> NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</div><div class="line">        .setContentTitle(<span class="string">"下载通知"</span>)</div><div class="line">        .setContentText(<span class="string">"下载中"</span>)</div><div class="line">        .setSmallIcon(R.mipmap.ic_launcher);</div><div class="line"></div><div class="line"><span class="keyword">new</span> Thread(</div><div class="line">        <span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> cur;</div><div class="line">                <span class="keyword">for</span> (cur = <span class="number">0</span>; cur &lt;= <span class="number">100</span>; cur += <span class="number">10</span>) &#123;</div><div class="line">                    builder.setProgress(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">true</span>);</div><div class="line">                    notificationManager.notify(<span class="number">1</span>, builder.build());</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">1000</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (cur != <span class="number">100</span>)</div><div class="line">                        Log.i(<span class="string">"abc"</span>, <span class="string">"下载中: "</span> + cur + <span class="string">"%"</span>);</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        Log.i(<span class="string">"abc"</span>, <span class="string">"下载完成: "</span> + cur + <span class="string">"%"</span>);</div><div class="line">                &#125;</div><div class="line">                builder.setContentText(<span class="string">"下载完成 "</span>)</div><div class="line">                        <span class="comment">// 移除进度条</span></div><div class="line">                        .setProgress(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">false</span>);</div><div class="line">                notificationManager.notify(<span class="number">1</span>, builder.build());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">).start();</div></pre></td></tr></table></figure>
<blockquote>
<p>将builder.setProgress(100, cur, true);修改为builder.setProgress(0, 0, true);</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog32/Blog32_4.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog32/Blog32_5.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="浮动通知"><a href="#浮动通知" class="headerlink" title="浮动通知"></a>浮动通知</h2><blockquote>
<p>Android5.0(API21)开始，当屏幕未上锁且亮屏时，通知可以以小窗口形式显示。用户可以在不离开当前应用前提下操作该通知，这种通知即为浮动通知(Heads-up Notifications)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取NotificationManager实例</span></div><div class="line"><span class="keyword">final</span> NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line"></div><div class="line"><span class="comment">// 获取PendingIntent</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class);</div><div class="line">PendingIntent pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT);</div><div class="line"></div><div class="line">NotificationCompat.Builder builder =</div><div class="line">        <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</div><div class="line">                .setContentTitle(<span class="string">"浮动通知"</span>)</div><div class="line">                .setContentText(<span class="string">"您收到一条浮动通知"</span>)</div><div class="line">                .setSmallIcon(R.mipmap.ic_launcher)</div><div class="line">                .setFullScreenIntent(pendingIntent, <span class="keyword">false</span>);</div><div class="line"></div><div class="line"><span class="comment">// 通过builder.build()方法生成Notification对象，并发送通知(1为通知的id)</span></div><div class="line">notificationManager.notify(<span class="number">1</span>, builder.build());</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog32/Blog32_6.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="锁屏通知"><a href="#锁屏通知" class="headerlink" title="锁屏通知"></a>锁屏通知</h2><blockquote>
<p>Android5.0(API21)开始，通知可以显示在锁屏上，用户可以通过设置选择是否允许敏感的通知内容显示在安全的锁屏上。  </p>
<p>应用可以通过setVisibility()控制通知的显示等级:</p>
<ul>
<li>VISIBILITY_PRIVATE：显示基本信息，如通知的图标，但隐藏通知的全部内容</li>
<li>VISIBILITY_PUBLIC：显示通知的全部内容</li>
<li>VISIBILITY_SECRET：不显示任何内容，包括图标</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取NotificationManager实例</span></div><div class="line"><span class="keyword">final</span> NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line"></div><div class="line"><span class="comment">// 获取PendingIntent</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class);</div><div class="line">PendingIntent pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT);</div><div class="line"></div><div class="line">NotificationCompat.Builder builder =</div><div class="line">        <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</div><div class="line">                .setContentTitle(<span class="string">"浮动通知"</span>)</div><div class="line">                .setContentText(<span class="string">"您收到一条浮动通知"</span>)</div><div class="line">                .setSmallIcon(R.mipmap.ic_launcher)</div><div class="line">                .setVisibility(Notification.VISIBILITY_PUBLIC)</div><div class="line">                .setDefaults(Notification.DEFAULT_ALL)</div><div class="line">                .setFullScreenIntent(pendingIntent, <span class="keyword">false</span>);</div><div class="line"></div><div class="line"><span class="comment">// 通过builder.build()方法生成Notification对象，并发送通知(1为通知的id)</span></div><div class="line">notificationManager.notify(<span class="number">1</span>, builder.build());</div></pre></td></tr></table></figure>
<p><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog32/Blog32_7.png?raw=true" alt=""></p>
<h2 id="自定义通知"><a href="#自定义通知" class="headerlink" title="自定义通知"></a>自定义通知</h2><blockquote>
<p>Android系统允许使用RemoteViews来自定义通知。<br>自定义普通视图通知高度限制为64dp，大视图通知高度限制为256dp。同时建议自定义通知尽量简单，以提高兼容性。</p>
</blockquote>
<h3 id="自定义通知步骤"><a href="#自定义通知步骤" class="headerlink" title="自定义通知步骤"></a>自定义通知步骤</h3><ol>
<li>创建自定义通知布局</li>
<li>使用RemoteViews定义通知组件，如图标、文字等</li>
<li>调用setContent()将RemoteViews对象绑定到NotificationCompat.Builder</li>
<li>发送通知  </li>
</ol>
<p><strong>* 注：避免为通知设置背景，由于兼容性原因，有些文字可能看不清</strong></p>
<h4 id="自定义通知案例"><a href="#自定义通知案例" class="headerlink" title="自定义通知案例"></a>自定义通知案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button login;</div><div class="line">    <span class="keyword">private</span> Button logout;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RemoteViews remoteViews;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> NotificationManager manager;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> NotificationCompat.Builder builder;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Notification notification;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LoginReceiver loginReceiver;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initReceiver();</div><div class="line"></div><div class="line">        login = findViewById(R.id.login);</div><div class="line">        logout = findViewById(R.id.logout);</div><div class="line"></div><div class="line">        setNotification();</div><div class="line"></div><div class="line">        login.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, LoginActivity.class));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        logout.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                sendBroadcast(<span class="keyword">new</span> Intent(<span class="string">"LOGOUT_ACTION"</span>));</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"已退出登陆"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initReceiver</span><span class="params">()</span> </span>&#123;</div><div class="line">        loginReceiver = <span class="keyword">new</span> LoginReceiver();</div><div class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">        intentFilter.addAction(<span class="string">"LOGIN_ACTION"</span>);</div><div class="line">        intentFilter.addAction(<span class="string">"LOGOUT_ACTION"</span>);</div><div class="line">        registerReceiver(loginReceiver, intentFilter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setNotification</span><span class="params">()</span> </span>&#123;</div><div class="line">        manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, MainActivity.class);</div><div class="line">        PendingIntent pendingIntent = PendingIntent.getActivity(MainActivity.<span class="keyword">this</span>, <span class="number">0</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT);</div><div class="line"></div><div class="line">        Intent intent2 = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, LoginActivity.class);</div><div class="line">        PendingIntent pendingIntent2 = PendingIntent.getActivity(MainActivity.<span class="keyword">this</span>, <span class="number">0</span>, intent2, PendingIntent.FLAG_UPDATE_CURRENT);</div><div class="line"></div><div class="line">        builder = <span class="keyword">new</span> NotificationCompat.Builder(MainActivity.<span class="keyword">this</span>);</div><div class="line">        <span class="comment">// 使用自定义布局</span></div><div class="line">        remoteViews = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.notification);</div><div class="line">        remoteViews.setOnClickPendingIntent(R.id.btn, pendingIntent2);</div><div class="line">        builder.setSmallIcon(R.mipmap.ic_launcher);</div><div class="line">        builder.setContent(remoteViews);</div><div class="line">        <span class="comment">// 设置点击跳转</span></div><div class="line">        builder.setContentIntent(pendingIntent);</div><div class="line">        notification = builder.build();</div><div class="line">        <span class="comment">// 设为常驻状态栏</span></div><div class="line">        notification.flags = Notification.FLAG_ONGOING_EVENT;</div><div class="line">        manager.notify(<span class="number">1</span>, notification);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LoginReceiver loginReceiver;</div><div class="line">    <span class="keyword">private</span> Button login;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_login);</div><div class="line"></div><div class="line">        initReceiver();</div><div class="line"></div><div class="line">        login = findViewById(R.id.login);</div><div class="line">        login.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                sendBroadcast(<span class="keyword">new</span> Intent(<span class="string">"LOGIN_ACTION"</span>));</div><div class="line">                Toast.makeText(LoginActivity.<span class="keyword">this</span>, <span class="string">"已登陆"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initReceiver</span><span class="params">()</span> </span>&#123;</div><div class="line">        loginReceiver = <span class="keyword">new</span> LoginReceiver();</div><div class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">        intentFilter.addAction(<span class="string">"LOGIN_ACTION"</span>);</div><div class="line">        intentFilter.addAction(<span class="string">"LOGOUT_ACTION"</span>);</div><div class="line">        registerReceiver(loginReceiver,intentFilter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (intent.getAction().equals(<span class="string">"LOGIN_ACTION"</span>)) &#123;</div><div class="line">            MainActivity.remoteViews.setTextViewText(R.id.tv, <span class="string">"已登录"</span>);</div><div class="line">            MainActivity.remoteViews.setViewVisibility(R.id.btn, View.GONE);</div><div class="line">            MainActivity.manager.notify(<span class="number">1</span>, MainActivity.notification);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(<span class="string">"LOGOUT_ACTION"</span>)) &#123;</div><div class="line">            MainActivity.remoteViews.setTextViewText(R.id.tv, <span class="string">"未登录"</span>);</div><div class="line">            MainActivity.remoteViews.setViewVisibility(R.id.btn, View.VISIBLE);</div><div class="line">            MainActivity.manager.notify(<span class="number">1</span>, MainActivity.notification);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>布局比较简单，此处就不贴代码了<br>主要实现了一个常驻状态栏的通知，通过点击MainActivity中的登陆按钮跳转到登陆界面，登陆界面点击登陆按钮后发送一个广播给广播接收者LoginReceiver，接收到广播之后，程序会从未登录状态变为登陆状态，通知中的登陆按钮消失，而通过点击退出登录按钮同样发送一个广播，使程序从登陆状态变为未登录状态，通知中的登陆按钮重新出现。<br>关键代码在于：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用自定义布局</span></div><div class="line">remoteViews = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.notification);</div><div class="line">remoteViews.setOnClickPendingIntent(R.id.btn, pendingIntent2);</div><div class="line">builder.setSmallIcon(R.mipmap.ic_launcher);</div><div class="line">builder.setContent(remoteViews);</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"6dp"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/iv"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"未登录"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"14sp"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"登陆"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>使用RemoteViews定义通知组件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设为常驻状态栏</span></div><div class="line">notification.flags = Notification.FLAG_ONGOING_EVENT;</div></pre></td></tr></table></figure>
<blockquote>
<p>调用notification.flags = Notification.FLAG_ONGOING_EVENT;将通知设置为常驻状态栏</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog32/Blog32_8.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog32/Blog32_9.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog32/Blog32_10.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog32/Blog32_11.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog32/Blog32_12.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog32/Blog32_13.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog32/Blog32_14.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Notification&quot;&gt;&lt;a href=&quot;#Notification&quot; class=&quot;headerlink&quot; title=&quot;Notification&quot;&gt;&lt;/a&gt;Notification&lt;/h1&gt;&lt;h2 id=&quot;Notification-通知-概述&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Android基础十</title>
    <link href="https://izdo.github.io/2017/12/04/Android%E5%9F%BA%E7%A1%80%E5%8D%81/"/>
    <id>https://izdo.github.io/2017/12/04/Android基础十/</id>
    <published>2017-12-04T13:44:36.339Z</published>
    <updated>2017-12-04T13:44:21.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android基础-十"><a href="#Android基础-十" class="headerlink" title="Android基础(十)"></a>Android基础(十)</h1><h2 id="广播接收者"><a href="#广播接收者" class="headerlink" title="广播接收者"></a>广播接收者</h2><h3 id="广播接收者简介"><a href="#广播接收者简介" class="headerlink" title="广播接收者简介"></a>广播接收者简介</h3><blockquote>
<p>广播接收者是为了便利进行系统级别的消息通知而引入的一套类似的广播消息机制<br>Android中的系统操作基本上都会发出广播，例如手机开机了，就会发送一个手机开机的广播，手机电量不足时，就会发送一个电量不足的广播，而这些广播可以被广播接收者接收到，就好像学校广播发送通知，而学生可以收听到广播一样<br>而Android中的应用程序可以对自己感兴趣的广播进行注册，这样该程序就会接受到自己所关心的广播内容，这些广播可以来自于系统，也可以来自于其他应用程序，Android提供了一套完整的API，允许应用程序自由地发送和接收广播</p>
</blockquote>
<h3 id="广播接收者类型"><a href="#广播接收者类型" class="headerlink" title="广播接收者类型"></a>广播接收者类型</h3><ul>
<li>无序广播<blockquote>
<p>无序广播会被所有接收器在同一时刻接收到，没有任何先后顺序可言，并且无序广播的效率会比较高，无法被拦截</p>
</blockquote>
</li>
<li>有序广播<blockquote>
<p>有序广播是一种同步执行的广播，广播发出后在同一时刻只能有一个接收者接收到，所以有序广播存在先后顺序，也就是优先级，优先级越高的接收者会更快地接收到广播，并且可以拦截这条广播，使之不再传递</p>
</blockquote>
</li>
</ul>
<h3 id="广播接收者案例"><a href="#广播接收者案例" class="headerlink" title="广播接收者案例"></a>广播接收者案例</h3><h4 id="新建MyBroadcastReceiver类"><a href="#新建MyBroadcastReceiver类" class="headerlink" title="新建MyBroadcastReceiver类"></a>新建MyBroadcastReceiver类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">		String action = intent.getAction();</div><div class="line">		<span class="keyword">if</span> (action.equals(Intent.ACTION_MEDIA_MOUNTED)) &#123;</div><div class="line">			Log.i(<span class="string">"abc"</span>, <span class="string">"SD卡挂载状态"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (action.equals(Intent.ACTION_MEDIA_UNMOUNTED)) &#123;</div><div class="line">			Log.i(<span class="string">"abc"</span>, <span class="string">"SD卡卸载的状态"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里做一个接收SD卡挂载和卸载的案例<br>首先新建一个类继承自BroadcastReceiver，并重写其onReceive()方法，通过Intent获取并判断Action的值来得到SD卡的状态</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"com.m520it.sdcardreceiver.SDcardReceiver"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- MEDIA_MOUNTED SD挂载的事件动作 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MEDIA_MOUNTED"</span> /&gt;</span></div><div class="line">                <span class="comment">&lt;!-- MEDIA_MOUNTED SD卸载的事件动作 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MEDIA_UNMOUNTED"</span> /&gt;</span></div><div class="line">                <span class="comment">&lt;!-- sd卡的操作就是一个文件的操作 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>广播接收者需要在AndroidManifest文件中进行注册，并且可以在此处进行优先级的设置  </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.izdo.MyBroadcastReceiver"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这样一来，当这个程序启动时，每当SD卡的状态发生变化，程序都会接收到广播并打印出日志</p>
</blockquote>
<h3 id="自定义广播"><a href="#自定义广播" class="headerlink" title="自定义广播"></a>自定义广播</h3><blockquote>
<p>自定义广播需要两个Android工程，一个是广播，一个是广播接收器</p>
</blockquote>
<h4 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">// 按钮点击事件 点击按钮后发送一个广播消息</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBroadcastClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">		<span class="comment">// 调用的组件是跨应用的 由于无法获取其他应用的组件名 所以必须用隐式意图</span></div><div class="line">		Intent intent=<span class="keyword">new</span> Intent(<span class="string">"com.izdo.action.SENDBROAD"</span>);</div><div class="line">		sendBroadcast(intent);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="广播接收者-1"><a href="#广播接收者-1" class="headerlink" title="广播接收者"></a>广播接收者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">		Log.i(<span class="string">"abc"</span>, <span class="string">"接收到广播"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="注册广播接收者"><a href="#注册广播接收者" class="headerlink" title="注册广播接收者"></a>注册广播接收者</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"com.izdo.MainActivity"</span></div><div class="line">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"com.izdo.MyBroadcastReceiver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.izdo.action.SENDBROAD"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>先部署广播接收者的应用，然后再部署广播的应用，通过点击发送广播按钮之后，广播接收者就会接收到广播消息从而打印”接收到广播”的广播消息</p>
</blockquote>
<h3 id="有序广播案例"><a href="#有序广播案例" class="headerlink" title="有序广播案例"></a>有序广播案例</h3><blockquote>
<p>发送有序同样需要广播和广播接收者两个工程</p>
</blockquote>
<h4 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBroadCastClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">		Intent intent=<span class="keyword">new</span> Intent();</div><div class="line">		intent.setAction(<span class="string">"com.izdo.action.MYBROAD"</span>);</div><div class="line">        <span class="comment">// receiverPermission String 设置查看广播的权限</span></div><div class="line">        <span class="comment">// resultReceiver 结果广播接收者 不需要在配置中注册</span></div><div class="line">        <span class="comment">// scheduler 是一个Handler 一般没用</span></div><div class="line">        <span class="comment">// initialCode 初始化编码 用于区别广播</span></div><div class="line">        <span class="comment">// initialData String 广播名</span></div><div class="line">        <span class="comment">// initialExtras Bundle 传递各种数据</span></div><div class="line">		sendOrderedBroadcast(intent,<span class="keyword">null</span>,<span class="keyword">new</span> ResultReceiver(),<span class="keyword">null</span>, </div><div class="line">				<span class="number">0</span>,<span class="string">"发送一条有序广播"</span>,<span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ResultReceiver"><a href="#ResultReceiver" class="headerlink" title="ResultReceiver"></a>ResultReceiver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</div><div class="line">	<span class="comment">//不管广播是否被拦截 ResultReceiver都能接收到最后传递的数据</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">		Log.i(<span class="string">"abc"</span>, <span class="string">"结果："</span>+getResultData());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>ResultReceiver用于接收广播的最终结果，如果在发送有序广播时为其配置一个ResultReceiver参数，那么不管广播是否被拦截，ResultReceiver都会接收到最终结果</p>
</blockquote>
<h4 id="广播接收者-2"><a href="#广播接收者-2" class="headerlink" title="广播接收者"></a>广播接收者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiverA</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">		<span class="comment">// 获取广播数据</span></div><div class="line">		Log.i(<span class="string">"abc"</span>, <span class="string">"A收到的广播:"</span>+getResultData());</div><div class="line">		<span class="comment">// 修改广播内容</span></div><div class="line">		setResultData(<span class="string">"A修改了广播内容"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiverB</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">		Log.i(<span class="string">"abc"</span>, <span class="string">"B收到的广播:"</span>+getResultData());</div><div class="line">		<span class="comment">// B拦截广播 不再传递</span></div><div class="line">		abortBroadcast();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiverC</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">		Log.i(<span class="string">"abc"</span>, <span class="string">"C收到的广播:"</span>+getResultData());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在清单文件中注册广播接收者"><a href="#在清单文件中注册广播接收者" class="headerlink" title="在清单文件中注册广播接收者"></a>在清单文件中注册广播接收者</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"com.izdo.ReceiverA"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 优先级 -1000~1000 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"1000"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.izdo.action.MYBROAD"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"com.izdo.ReceiverB"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"500"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.izdo.action.MYBROAD"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"com.izdo.ReceiverC"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.izdo.action.MYBROAD"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>通过配置三个广播接收，在发送广播之后，由优先级最高的ReceiverA先收到广播，ReceiverB和ReceiverC本应在ReceiverA接收到广播之后接收到同样的广播，但是ReceiverA中修改了广播内容，导致ReceiverB收到的广播不再是”发送一条有序广播”，而变成了”A修改了广播内容”，并且ReceiverB拦截了广播，所以广播不会继续传递ReceiverC，所以ReceiverC收不到广播消息，而ResultReceiver收到的消息也是”A修改了广播内容”</p>
<p>以下博客详细地介绍了广播接收者：<br><a href="http://www.jianshu.com/p/ca3d87a4cdf3" target="_blank" rel="external">Android四大组件：BroadcastReceiver史上最全面解析</a></p>
</blockquote>
<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><h3 id="服务案例"><a href="#服务案例" class="headerlink" title="服务案例"></a>服务案例</h3><h4 id="MyService"><a href="#MyService" class="headerlink" title="MyService"></a>MyService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(<span class="string">"abc"</span>, <span class="string">"MyService onCreate: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        Log.i(<span class="string">"abc"</span>, <span class="string">"MyService onStartCommand: "</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(<span class="string">"abc"</span>, <span class="string">"MyService onDestroy: "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>首先需要新建一个MyService服务类继承自Service</p>
</blockquote>
<h4 id="在AndroidManifest文件中注册服务"><a href="#在AndroidManifest文件中注册服务" class="headerlink" title="在AndroidManifest文件中注册服务"></a>在AndroidManifest文件中注册服务</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".MyService"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h4 id="MainActivity-1"><a href="#MainActivity-1" class="headerlink" title="MainActivity"></a>MainActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 按钮点击事件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startService</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="comment">// 启动服务</span></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);</div><div class="line">        startService(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 按钮点击事件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopService</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="comment">// 停止服务</span></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);</div><div class="line">        stopService(intent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>服务不同于Activity，服务不需要界面，可以运行在后台，通过Android系统自带的功能可以查看到当前正在运行的所有服务，并且可以手动的关闭 </p>
</blockquote>
<h3 id="线程和服务的区别"><a href="#线程和服务的区别" class="headerlink" title="线程和服务的区别"></a>线程和服务的区别</h3><blockquote>
<p>通过对比线程和服务在同一应用程序中的表现发现，当应用程序被强制关闭时，线程同样被销毁，当时服务缺会先被销毁，然后重新启动，也就是说，一旦服务开启了，就会一直在后台运行，当应用程序被关闭时，服务不会因此而失去作用，这是因为系统认为服务进程之所以会被杀死，是由于系统内存不足造成的(外界因素)，所以系统会重新启动服务</p>
</blockquote>
<h3 id="服务与Activity交互"><a href="#服务与Activity交互" class="headerlink" title="服务与Activity交互"></a>服务与Activity交互</h3><blockquote>
<p>Activity和服务是无法直接进行交互的，当开启服务之后，Activity和服务貌似就没有什么直接联系了，如果想让Activity和服务进行通信，需要用到一个类似于”中间人”的Binder类，通过Binder实现两者的通信  </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate();</div><div class="line">		Log.i(<span class="string">"abc"</span>, <span class="string">"MyService onCreate服务创建的时候调用"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">		Log.i(<span class="string">"abc"</span>, <span class="string">"MyService onStartCommand"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callShowToast</span><span class="params">()</span></span>&#123;</div><div class="line">			showToast();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">		Log.i(<span class="string">"abc"</span>, <span class="string">"MyService onBind"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyBinder();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onDestroy();</div><div class="line">		Log.i<span class="string">"abc"</span>, <span class="string">"MyService onDestroy"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">()</span></span>&#123;</div><div class="line">		Toast.makeText(<span class="keyword">this</span>, <span class="string">"服务中的方法"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">	&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> MyBinder mBinder;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openService</span><span class="params">(View v)</span></span>&#123;</div><div class="line">		Intent intent=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyService.class);</div><div class="line">		</div><div class="line">		bindService(intent, <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line"></div><div class="line">			<span class="comment">// 服务断开</span></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">				Log.i(<span class="string">"abc"</span>, <span class="string">"MyService onServiceDisconnected服务解绑"</span>);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="comment">//服务绑定 当服务的onBind()返回一个对象的时候才被调用</span></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">				Log.i(<span class="string">"abc"</span>, <span class="string">"MyService onServiceConnected服务绑定"</span>);</div><div class="line">				mBinder=(MyBinder) service;</div><div class="line">			&#125;</div><div class="line">		&#125;, BIND_AUTO_CREATE);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeService</span><span class="params">(View v)</span></span>&#123;</div><div class="line">		Intent intent=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyService.class);</div><div class="line">		stopService(intent);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//如何与 Service进行交互</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connService</span><span class="params">(View v)</span></span>&#123;</div><div class="line">        <span class="comment">// MyService service=new MyService();</span></div><div class="line">        <span class="comment">// service.showToast();</span></div><div class="line">		mBinder.callShowToast();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>通过重写onBind()并返回一个MyBinder对象,Activity就可以通过MyBinder对象调用服务中的方法从而进行交互  </p>
</blockquote>
<h3 id="服务的生命周期"><a href="#服务的生命周期" class="headerlink" title="服务的生命周期"></a>服务的生命周期</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog29/Blog29_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>服务有两种启动方式，一种是通过startService()启动，这种启动方式的缺点是无法进行数据交互，也就是Activity和服务无法进行通信，另一种是bindService()启动，这种启动方式可以进行数据交互，但是当启动的组件被销毁时，Service也被销毁</p>
<ul>
<li>服务的启动和销毁有以下几种方式：</li>
</ul>
<ol>
<li>开启服务 -&gt; 停止服务：onCreate() -&gt; startService() -&gt; onStartCommand() -&gt; onDestroy()</li>
<li>绑定服务 -&gt; 解绑服务：onCreate() -&gt; onBind() -&gt; onUnbind() -&gt; onDestroy()</li>
<li>开启服务 -&gt; 绑定服务 -&gt; 解绑服务 -&gt; 停止服务：onCreate() -&gt; onStartCommand() -&gt; onBind() -&gt; onUnbind() -&gt; onDestroy()</li>
</ol>
<p>以下博客详细地介绍了服务，包括服务的使用、绑定以及生命周期：<br><a href="http://blog.csdn.net/iispring/article/details/47689819" target="_blank" rel="external">关于Android Service真正的完全详解，你需要知道的一切</a> </p>
</blockquote>
<h2 id="远程服务"><a href="#远程服务" class="headerlink" title="远程服务"></a>远程服务</h2><blockquote>
<p>如果一个应用想要提供服务给另一个应用使用，例如淘宝购买东西支付的时候，使用支付宝支付，这时其实是调用了支付宝的远程服务，而Android系统中的进程之间是不能共享内存的，因此需要用到进程间通讯，也就是AIDL(Android Interface Definition Language 安卓接口定义语言)技术，其实质是用到了内存映射的原理，通过在某个内存区里开辟一块内存空间，将一个进程的服务共享到内存空间中，使另一个进程也能够调用这个服务。</p>
<h3 id="AIDL安卓接口定义语言"><a href="#AIDL安卓接口定义语言" class="headerlink" title="AIDL安卓接口定义语言"></a>AIDL安卓接口定义语言</h3><p>以下博客清晰地解释了AIDL用途用法，以及从源码解析AIDL的原理<br><a href="http://blog.csdn.net/luoyanglizi/article/details/51980630" target="_blank" rel="external">Android：学习AIDL，这一篇文章就够了(上)</a><br><a href="http://blog.csdn.net/luoyanglizi/article/details/52029091" target="_blank" rel="external">Android：学习AIDL，这一篇文章就够了(下)</a></p>
</blockquote>
<h4 id="总结AIDL的开发步骤"><a href="#总结AIDL的开发步骤" class="headerlink" title="总结AIDL的开发步骤"></a>总结AIDL的开发步骤</h4><ul>
<li>开发远程服务(前五个步骤不管是本地服务还是远程服务都是必须实现)</li>
</ul>
<ol>
<li>创建一个Service</li>
<li>在AndroidMenifest文件中注册服务，并且配置一个action</li>
<li>在服务中创建业务方法</li>
<li>实现代理之前，定义对外提供服务的规范(接口)</li>
<li>实现代理类，继承Binder，实现接口，在onBind()方法中返回代理的对象</li>
<li>将接口文件改为后缀为aidl的文件(AIDL的规范)，由于AIDL不允许使用public关键字，所以必须去掉</li>
<li>代理类实现接口.Stub(其内部继承了Binder并且实现了接口)</li>
</ol>
<ul>
<li>调用远程接口</li>
</ul>
<ol>
<li>bindService() -&gt; 提供ServiceConnection接口(该接口有两个方法)</li>
<li>在ServiceConnection接口中实现onServiceConnected()方法，将IBinder接口转换成代理的接口</li>
<li>获取代理的接口后，就可以调用代理去处理业务(代理的方法间接调用了服务中的方法)</li>
</ol>
<h2 id="Android进程的优先级"><a href="#Android进程的优先级" class="headerlink" title="Android进程的优先级"></a>Android进程的优先级</h2><blockquote>
<p>Android系统会尽量地长期保存每一个进程不被回收，这样第二次开启界面时的启动速度就会比第一次进入时快很多，这是因为系统已经创建了一个进程，这个进程没有被杀死，再次启动时就不用再次创建进程，但是，当内存不足的时候，系统就会杀掉一些旧的线程，这时就要考虑到结束进程的策略了  </p>
<h3 id="系统定义进程的优先级"><a href="#系统定义进程的优先级" class="headerlink" title="系统定义进程的优先级"></a>系统定义进程的优先级</h3><ol>
<li>Foreground progress 前台线程：用户正在操作的应用程序所在的进程</li>
<li>Visible progress 可见进程：用户任然可以看到界面但是无法获取焦点的进程</li>
<li>Service progress 服务进程：服务进程</li>
<li>Background progress 后台进程：应用程序处于后台运行的进程</li>
<li>Empty progress 空进程：没有任何活动的组件<br>进程优先级从1-5分别是前台进程 -&gt; 可见进程 -&gt; 服务进程 -&gt; 后台进程 -&gt; 空进程，1为优先级最高，那么当系统内存不足时，就会优先结束优先级低的进程，为其它进程腾出内存空间</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android基础-十&quot;&gt;&lt;a href=&quot;#Android基础-十&quot; class=&quot;headerlink&quot; title=&quot;Android基础(十)&quot;&gt;&lt;/a&gt;Android基础(十)&lt;/h1&gt;&lt;h2 id=&quot;广播接收者&quot;&gt;&lt;a href=&quot;#广播接收者&quot; cla
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Android基础九</title>
    <link href="https://izdo.github.io/2017/12/04/Android%E5%9F%BA%E7%A1%80%E4%B9%9D/"/>
    <id>https://izdo.github.io/2017/12/04/Android基础九/</id>
    <published>2017-12-04T13:44:34.667Z</published>
    <updated>2017-12-04T13:44:18.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android基础-九"><a href="#Android基础-九" class="headerlink" title="Android基础(九)"></a>Android基础(九)</h1><h2 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        Log.i(<span class="string">"abc"</span>, <span class="string">"onCreate: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStart();</div><div class="line">        Log.i(<span class="string">"abc"</span>, <span class="string">"onStart: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        Log.i(<span class="string">"abc"</span>, <span class="string">"onStart: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onRestart();</div><div class="line">        Log.i(<span class="string">"abc"</span>, <span class="string">"onRestart: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        Log.i(<span class="string">"abc"</span>, <span class="string">"onPause: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">        Log.i(<span class="string">"abc"</span>, <span class="string">"onStop: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        Log.i(<span class="string">"abc"</span>, <span class="string">"onDestroy: "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>通过打印log可以发现，当Activity第一次打开时，会依次调用onCreate() -&gt; onStart() -&gt; onResume()  </li>
<li>当退出应用时，会依次调用onPause() -&gt; onStop() -&gt; onDestroy()  </li>
<li>当开启一个新Activity2时，Activity2覆盖了原来的Activity1，导致Activity1不可见，Activity1会依次调用onPasue() -&gt; onStop()  </li>
<li>当Activity2关闭返回Activity1时，Activity1会依次调用onStart() -&gt; onResume()  </li>
<li>而当Acitivity2是一个透明的界面，不会阻挡住Activity1时，此时Activity1只是无法获取焦点，并不是不可见的，这时Activity1就只会调用onPause()  </li>
<li>当Activity2退出时，Activity1就会调用onResume()</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog28/Blog28_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="横竖屏切换影响生命周期"><a href="#横竖屏切换影响生命周期" class="headerlink" title="横竖屏切换影响生命周期"></a>横竖屏切换影响生命周期</h3><blockquote>
<p>当页面上有一些数据时，比如应用程序界面上有一个数字10，通过某些操作(如按钮点击)数字发生了变成了5，而此时手机进行横竖屏切换后，可以发现界面上的数字会变为原来的10<br>这是由于当Android应用进行横竖屏切换时，影响了Activity的生命周期，导致了界面发生了销毁和创建，相当于界面被重新打开了一次<br>而这时如果不想界面被重新创建，可以在清单文件中配置</p>
</blockquote>
<h4 id="AndroidMenifest-xml"><a href="#AndroidMenifest-xml" class="headerlink" title="AndroidMenifest.xml"></a>AndroidMenifest.xml</h4><ul>
<li>强制规定界面的方向</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.m520it.ac04.MainActivity"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span> &gt;</div><div class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里为activity配置了一个android:screenOrientation=”portrait”，表示此Activity只允许竖屏显示，参数包括portrait(竖屏)，landscape(横屏)</p>
</blockquote>
<ul>
<li>忽略横竖屏切换对声明周期的影响</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.m520it.ac04.MainActivity"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:configChanges</span>=<span class="string">"orientation|screenSize|keyboardHidden"</span> &gt;</div><div class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里为activity配置了一个android:configChanges=”orientation|screenSize|keyboardHidden”，configChanges表示当其配置的参数配置发生改变时不影响Activity的生命周期，orientation|screenSize|keyboardHidden分别表示横竖屏切换、屏幕大小变化、键盘被隐藏，也就是说，当这三者发生改变时均不会影响Activity的生命周期  </p>
</blockquote>
<h2 id="任务栈与启动模式"><a href="#任务栈与启动模式" class="headerlink" title="任务栈与启动模式"></a>任务栈与启动模式</h2><blockquote>
<p>Android中Activity界面的管理容器是一个栈，而栈遵循先进后出的原则，当一个Activity创建时，就会被压入栈底，而新的Activity会依次压入，慢慢往上叠加，而当前手机显示的界面则是栈顶的Activity，当退出Activity时，Activity会依次从栈顶出栈(也叫弹栈)，当栈中没有Activity可以出栈时，应用程序也就退出了  </p>
</blockquote>
<p><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog28/Blog28_2.png?raw=true" alt=""></p>
<blockquote>
<p>任务栈有四种属性：</p>
<ul>
<li>standard </li>
<li>singleTop </li>
<li>singleTask </li>
<li>singleInstance</li>
</ul>
<p>这四种属性就是Activity的四种启动模式，而standard是默认的启动模式，如果想设置一个Activity的启动模式，可以在AndroidManifest文件中进行设置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"com.izdo.MyActivity"</span></div><div class="line">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">    <span class="attr">android:launchMode</span>=<span class="string">"singleInstance"</span> &gt;</div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>下面用图示来解释四种启动模式(图中的Activity配置的启动模式是相同的)</p>
<h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog28/Blog28_3.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>standard启动模式是Activity的默认启动模式，当开启一个新的Activity时，不管栈中是否从在该Activity的实例，新的Activity都会从栈顶压入栈</p>
</blockquote>
<h3 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog28/Blog28_4.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>singleTop启动模式表示栈顶只能存在一个相同的Activity实例，如图所示，当栈顶为Activity2，创建一个新的Activity2时，由于栈顶已经存在一个Activity2的实例，所以不会再创建一次，而此时创建一个新的Activity1，虽然栈中存在Activity1的实例，但由于其不在栈顶所以会在栈顶创建一个新的Activity1</p>
</blockquote>
<h3 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog28/Blog28_5.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>singleTask启动模式表示栈中只能存在一个实例，如图所示，当栈中存在Activity1和Activity2，创建一个新的Activity3时，由于栈中不存在Activity3的实例，所以会在栈顶创建一个新的Activity3，而创建Activity1时，由于栈中已经存在Activity1的实例，所以不会再创建一次，而会去判断此Activity上方是否存在其他的Activity实例，如果有则会将上方所有的Activity实例全部销毁，保证Activity1在栈顶</p>
</blockquote>
<h3 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog28/Blog28_6.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>singleInstance启动模式如图所示，当任务栈中只有Activity1，创建一个新的Activity2时，由于Activity2的启动模式为singleInstance(Activity1也是)，系统会为其新创建一个任务栈，并将其放到其他任务栈之前，而此时创建新的Activity1，由于第一个任务栈中已经存在了Activity1的实例，所以不会去创建新的Activity1，而是将Activity1所在的任务栈提前，也就是说，singleInstance模式下的Activity会单独占用一个任务栈，具有全局唯一性，整个系统中只有一个实例</p>
</blockquote>
<p>以下博客清晰地解释了Activity的启动模式：<br><a href="http://blog.csdn.net/mynameishuangshuai/article/details/51491074" target="_blank" rel="external">彻底弄懂Activity四大启动模式
</a></p>
<h2 id="Intent补充"><a href="#Intent补充" class="headerlink" title="Intent补充"></a>Intent补充</h2><h3 id="使用Intent开启一个新的Activity的方式"><a href="#使用Intent开启一个新的Activity的方式" class="headerlink" title="使用Intent开启一个新的Activity的方式"></a>使用Intent开启一个新的Activity的方式</h3><ul>
<li><p>第一种方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyActivity.class);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
</li>
<li><p>第二种方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">intent.setComponent(<span class="keyword">new</span> ComponentName(<span class="keyword">this</span>,MyActivity.class));</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
</li>
<li><p>第三种方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">intent.setClass(<span class="keyword">this</span>,MyActivity.class);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="为系统注册一个名为com-izdo-intent-action-ABC的Action，该Action对应的行为是跳转到MyActivity"><a href="#为系统注册一个名为com-izdo-intent-action-ABC的Action，该Action对应的行为是跳转到MyActivity" class="headerlink" title="为系统注册一个名为com.izdo.intent.action.ABC的Action，该Action对应的行为是跳转到MyActivity"></a>为系统注册一个名为com.izdo.intent.action.ABC的Action，该Action对应的行为是跳转到MyActivity</h3><h4 id="AndroidMenifest-xml-1"><a href="#AndroidMenifest-xml-1" class="headerlink" title="AndroidMenifest.xml"></a>AndroidMenifest.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"com.izdo.MyActivity"</span></div><div class="line">    <span class="attr">android:label</span>=<span class="string">"@string/title"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.izdo.intent.action.ABC"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-fileter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="创建Intent，使其匹配ABC-Action"><a href="#创建Intent，使其匹配ABC-Action" class="headerlink" title="创建Intent，使其匹配ABC Action"></a>创建Intent，使其匹配ABC Action</h4><ul>
<li><p>第一种方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.izdo.intent.action.ABC"</span>);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
</li>
<li><p>第二种方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">intent.setAction(<span class="string">"com.izdo.intent.action.ABC"</span>);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android基础-九&quot;&gt;&lt;a href=&quot;#Android基础-九&quot; class=&quot;headerlink&quot; title=&quot;Android基础(九)&quot;&gt;&lt;/a&gt;Android基础(九)&lt;/h1&gt;&lt;h2 id=&quot;Activity的生命周期&quot;&gt;&lt;a href=&quot;#Ac
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Android基础八</title>
    <link href="https://izdo.github.io/2017/12/04/Android%E5%9F%BA%E7%A1%80%E5%85%AB/"/>
    <id>https://izdo.github.io/2017/12/04/Android基础八/</id>
    <published>2017-12-04T13:40:04.484Z</published>
    <updated>2017-12-04T13:42:24.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android基础-八"><a href="#Android基础-八" class="headerlink" title="Android基础(八)"></a>Android基础(八)</h1><h2 id="应用程序的国际化"><a href="#应用程序的国际化" class="headerlink" title="应用程序的国际化"></a>应用程序的国际化</h2><ul>
<li>国际化步骤</li>
</ul>
<ol>
<li>找到对应的res文件夹</li>
<li>创建对应环境下的文件夹<ol>
<li>英文环境文件夹命名 values-en</li>
<li>美国英文环境文件夹命名 values-en-rUS</li>
<li>中文环境文件夹命名 values-zh</li>
<li>大陆地区中文环境文件夹命名 values-zh-cn</li>
</ol>
</li>
<li>在对应的values文件夹下创建不同的string.xml文件<blockquote>
<p>国际化部分的知识可参考以下博客<br><a href="http://blog.csdn.net/qiuhu0793/article/details/8689685" target="_blank" rel="external">android国际化（多语言）</a></p>
</blockquote>
</li>
</ol>
<h2 id="风格与主题"><a href="#风格与主题" class="headerlink" title="风格与主题"></a>风格与主题</h2><blockquote>
<p>在很多情况下，一个布局中有许多控件都拥有相同的颜色，大小等属性，而当更换这些属性时，需要一个一个地更换，这样就会显得非常麻烦，而通过style风格，就能够统一地修改这些样式  </p>
</blockquote>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="style-xml文件"><a href="#style-xml文件" class="headerlink" title="style.xml文件"></a>style.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"text_style"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>wrap_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>wrap_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#0f0<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>20sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">    <span class="attr">style</span>=<span class="string">"@style/text_style"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span>/&gt;</div><div class="line">    </div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">    <span class="attr">style</span>=<span class="string">"@style/text_style"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span>/&gt;</div><div class="line">    </div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">    <span class="attr">style</span>=<span class="string">"@style/text_style"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span>/&gt;</div><div class="line">    </div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> </span></div><div class="line">    <span class="attr">style</span>=<span class="string">"@style/text_style"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span>/&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>这样一来，如果想要统一更改xml中四个TextView的样式，可以通过style直接修改</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"wrap_content_style"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>wrap_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>wrap_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"text_style"</span> <span class="attr">parent</span>=<span class="string">"@style/wrap_content_style"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#0f0<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>20sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>而style中也允许存在类似于Java类继承的那种关系，通过parent实现<br>同理，可以通过style为应用程序所有的界面都设置上同一种风格，相当于更换了一个主题</p>
</blockquote>
<h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><h3 id="Android基本对话框"><a href="#Android基本对话框" class="headerlink" title="Android基本对话框"></a>Android基本对话框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 普通对话框</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openDialog</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">// 建造者模式</span></div><div class="line">        Builder builder = <span class="keyword">new</span> Builder(<span class="keyword">this</span>);</div><div class="line">        builder.setMessage(<span class="string">"是否退出应用？"</span>);</div><div class="line">        builder.setPositiveButton(<span class="string">"是"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                <span class="comment">// 退出应用</span></div><div class="line">                MainActivity.<span class="keyword">this</span>.finish();</div><div class="line">                <span class="comment">// 强制关闭dialog</span></div><div class="line">                <span class="comment">// dialog.dismiss();</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 设置取消按钮</span></div><div class="line">        <span class="comment">// builder.setNegativeButton("否",null);</span></div><div class="line"></div><div class="line">        AlertDialog dialog = builder.create();</div><div class="line">        dialog.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 普通对话框</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openDialog2</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">// 链式编程</span></div><div class="line">        AlertDialog dialog = <span class="keyword">new</span> Builder(<span class="keyword">this</span>).setTitle(<span class="string">"提示"</span>)</div><div class="line">                .setMessage(<span class="string">"是否退出应用？"</span>)</div><div class="line">                .setPositiveButton(<span class="string">"是"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                        MainActivity.<span class="keyword">this</span>.finish();</div><div class="line">                    &#125;</div><div class="line">                &#125;).setNegativeButton(<span class="string">"否"</span>, <span class="keyword">null</span>).create();</div><div class="line">        dialog.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String[] items = <span class="keyword">new</span> String[]&#123;<span class="string">"苹果"</span>, <span class="string">"香蕉"</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 单选对话框</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openDialog3</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        AlertDialog dialog = <span class="keyword">new</span> Builder(<span class="keyword">this</span>).setTitle(<span class="string">"请选择你喜欢的水果"</span>)</div><div class="line">                .setSingleChoiceItems(items, <span class="number">1</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                        String text = <span class="string">"当前选中的是:"</span> + items[which];</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, text, Toast.LENGTH_LONG).show();</div><div class="line">                        dialog.dismiss();</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .setPositiveButton(<span class="string">"取消"</span>, <span class="keyword">null</span>)</div><div class="line">                .create();</div><div class="line">        dialog.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String[] multiItems = <span class="keyword">new</span> String[]&#123;<span class="string">"苹果"</span>, <span class="string">"香蕉"</span>, <span class="string">"梨子"</span>&#125;;</div><div class="line">    <span class="keyword">boolean</span>[] checkedItems = <span class="keyword">new</span> <span class="keyword">boolean</span>[]&#123;<span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 多选对话框</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openDialog4</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        AlertDialog dialog = <span class="keyword">new</span> Builder(<span class="keyword">this</span>)</div><div class="line">                .setTitle(<span class="string">"请选择你喜欢的水果"</span>)</div><div class="line">                .setMultiChoiceItems(multiItems, checkedItems, <span class="keyword">new</span> DialogInterface.OnMultiChoiceClickListener() &#123;</div><div class="line">                    <span class="comment">// which 索引</span></div><div class="line">                    <span class="comment">// isChecked 当前索引是否被选中</span></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which, <span class="keyword">boolean</span> isChecked)</span> </span>&#123;</div><div class="line">                        <span class="comment">// 根据索引修改是否选中</span></div><div class="line">                        checkedItems[which] = isChecked;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                        String toastText = <span class="string">""</span>;</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; checkedItems.length; i++) &#123;</div><div class="line">                            <span class="keyword">if</span> (checkedItems[i]) &#123;</div><div class="line">                                toastText += multiItems[i] + <span class="string">"  "</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, toastText, Toast.LENGTH_LONG).show();</div><div class="line">                    &#125;</div><div class="line">                &#125;).setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">null</span>).create();</div><div class="line">        dialog.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 进度条对话框</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openDialog5</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> ProgressDialog dialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line">        dialog.setTitle(<span class="string">"提示"</span>);</div><div class="line">        dialog.setMessage(<span class="string">"请耐心等待..."</span>);</div><div class="line">        dialog.show();</div><div class="line">        <span class="comment">// 创建一个定时器</span></div><div class="line">        Timer timer = <span class="keyword">new</span> Timer();</div><div class="line">        timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">// 返回主线程</span></div><div class="line">                runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        dialog.dismiss();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">5000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="案例效果图"><a href="#案例效果图" class="headerlink" title="案例效果图"></a>案例效果图</h3><ul>
<li>一般对话框 </li>
</ul>
<p><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog27/Blog27_1.png?raw=true" alt=""></p>
<ul>
<li>一般对话框2  </li>
</ul>
<p><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog27/Blog27_2.png?raw=true" alt=""></p>
<ul>
<li>单选对话框  </li>
</ul>
<p><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog27/Blog27_3.png?raw=true" alt=""></p>
<ul>
<li>多选对话框  </li>
</ul>
<p><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog27/Blog27_4.png?raw=true" alt=""></p>
<ul>
<li>进度条对话框  </li>
</ul>
<p><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog27/Blog27_5.png?raw=true" alt=""></p>
<h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>上方这段在AndroidManifest.xml文件中的代码表示配置了这段代码的Activity是应用程序的入口</p>
<h3 id="打开一个新的Activity"><a href="#打开一个新的Activity" class="headerlink" title="打开一个新的Activity"></a>打开一个新的Activity</h3></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyActivity.class);</div><div class="line">    startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>通过意图对象Intent能够打开一个新的Activity</p>
</blockquote>
<h3 id="通过Intent传递数据"><a href="#通过Intent传递数据" class="headerlink" title="通过Intent传递数据"></a>通过Intent传递数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyActivity.class);</div><div class="line">    <span class="comment">// 基本数据类型都可以传递</span></div><div class="line">    intent.putExtra(<span class="string">"id"</span>,<span class="number">123</span>);</div><div class="line">    startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在新的Activity中取出数据<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_my);</div><div class="line">    </div><div class="line">    <span class="comment">// 获取上一个界面传递过来的数据</span></div><div class="line">    <span class="comment">// getIntent() 获取打开该界面的意图对象</span></div><div class="line">    Intent intent = getIntent();</div><div class="line">    <span class="comment">// defaultValue 当无数据时的默认值</span></div><div class="line">    <span class="keyword">int</span> intExtra = intent.getIntExtra(<span class="string">"id"</span>,<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>Intent可以携带八大基本属性，但是如果想要传递对象，需要让传递的对象的类去实现Serializable接口或者Parcelable接口，经过一系列的处理(序列化)之后才可传递对象</p>
<p>上述打开一个新的Activity的方式称为通过显式意图打开界面，而Android中不仅可以通过显式意图打开界面，还可以通过隐式意图打开界面  </p>
<h3 id="通过隐式意图打开界面"><a href="#通过隐式意图打开界面" class="headerlink" title="通过隐式意图打开界面"></a>通过隐式意图打开界面</h3></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">    <span class="comment">// 通知系统启动一个带有浏览器Action的界面</span></div><div class="line">    intent.setAction(<span class="string">"android.intent.action.VIEW"</span>);</div><div class="line">    <span class="comment">// Uri包含URL </span></div><div class="line">    Uri data = Uri.parse(<span class="string">"http://www.baidu.com"</span>);</div><div class="line">    <span class="comment">// 通知系统展示的格式</span></div><div class="line">    intent.setDataAndType(data,<span class="string">"text/html"</span>);</div><div class="line">    startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>以下博客很清晰的说明了这两种意图以及其区别:<br><a href="http://blog.csdn.net/loongggdroid/article/details/17887975" target="_blank" rel="external">Intent中显示意图和隐式意图的用法</a><br>简单地说，显式意图明确指定了Intent应该传递给哪个组件，而隐式意图没有明确指定组件名，Android系统会根据隐式意图中设置的动作(action)、类别(category)、数据(URL和数据类型)找到最合适的组件来处理这个意图，如果能够匹配到这个隐式意图的组件有多个，则会通过展示一个列表供用户选择<br>举个简单的例子:当用户拍完一张照片，想要发送给好友，点击发送按钮后，系统会找到能够匹配这个隐式意图(发送图片)的应用，而这时手机上就会弹出一个列表供用户选择，列表中为能够发送图片的应用，比如QQ，微信，支付宝等应用</p>
</blockquote>
<h3 id="新界面返回值"><a href="#新界面返回值" class="headerlink" title="新界面返回值"></a>新界面返回值</h3><blockquote>
<p>通常情况下，通过Intent开启一个新的Activity之后做了一系列操作，经常需要将操作结果的数据返回给原来的页面，而这时就需要原来的页面接收返回的数据，也就是说Activity之间不仅可以在开启时传递数据，也能在关闭时返回数据</p>
<h4 id="Activity返回数据案例"><a href="#Activity返回数据案例" class="headerlink" title="Activity返回数据案例"></a>Activity返回数据案例</h4></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chooseIcon</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, FirstActivity.class);</div><div class="line">        <span class="comment">// startActivity(intent);</span></div><div class="line">        <span class="comment">// 要调用startActivityForResult 表示返回时携带数据</span></div><div class="line">        startActivityForResult(intent, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chooseSex</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">        startActivityForResult(intent, <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取新页面的传递过来的数据 需重写此方法</span></div><div class="line">    <span class="comment">// data 传递的数据都是通过该Intent对象来操作的</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (requestCode == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">int</span> first = data.getIntExtra(<span class="string">"first"</span>, <span class="number">0</span>);</div><div class="line">                Log.i(<span class="string">"abc"</span>, <span class="string">"onActivityResult: "</span> + first);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (requestCode == <span class="number">2</span>) &#123;</div><div class="line">                String second = data.getStringExtra(<span class="string">"second"</span>);</div><div class="line">                Log.i(<span class="string">"abc"</span>, <span class="string">"onActivityResult: "</span> + second);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_choose_icon);</div><div class="line"></div><div class="line">        findViewById(R.id.f0).setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        findViewById(R.id.f1).setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        findViewById(R.id.f2).setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        findViewById(R.id.f3).setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent=<span class="keyword">new</span> Intent();</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.f0:</div><div class="line">                <span class="comment">// int类型的数据</span></div><div class="line">                intent.putExtra(<span class="string">"first"</span>, R.drawable.f0);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.f1:</div><div class="line">                intent.putExtra(<span class="string">"first"</span>, R.drawable.f1);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.f2:</div><div class="line">                intent.putExtra(<span class="string">"first"</span>, R.drawable.f2);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.f3:</div><div class="line">                intent.putExtra(<span class="string">"first"</span>, R.drawable.f3);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 返回数据</span></div><div class="line">        setResult(<span class="number">0</span>, intent);</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_sex);</div><div class="line"></div><div class="line">        findViewById(R.id.male_btn).setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        findViewById(R.id.female_btn).setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Intent intent=<span class="keyword">new</span> Intent();</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.male_btn:</div><div class="line">                intent.putExtra(<span class="string">"sex"</span>, <span class="string">"男"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.female_btn:</div><div class="line">                intent.putExtra(<span class="string">"sex"</span>, <span class="string">"女"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        setResult(<span class="number">0</span>, intent);</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>若开启一个Activity需要返回数据，应该调用startActivityForResult()方法而不是startActivity()方法，而当新的Activity关闭返回数据时，需要重写Activity的onActivityResult()方法来获取返回的数据<br>requestCode请求码可以用来区分向不同界面发出请求时返回的数据<br>resultCode结果码可以用来区分向同一界面发出不同请求时返回不同的数据</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android基础-八&quot;&gt;&lt;a href=&quot;#Android基础-八&quot; class=&quot;headerlink&quot; title=&quot;Android基础(八)&quot;&gt;&lt;/a&gt;Android基础(八)&lt;/h1&gt;&lt;h2 id=&quot;应用程序的国际化&quot;&gt;&lt;a href=&quot;#应用程序的国际
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Android基础七</title>
    <link href="https://izdo.github.io/2017/12/04/Android%E5%9F%BA%E7%A1%80%E4%B8%83/"/>
    <id>https://izdo.github.io/2017/12/04/Android基础七/</id>
    <published>2017-12-04T12:58:31.992Z</published>
    <updated>2017-11-27T09:08:57.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android基础-七"><a href="#Android基础-七" class="headerlink" title="Android基础(七)"></a>Android基础(七)</h1><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><h3 id="使用GET方式请求向服务器提交数据案例"><a href="#使用GET方式请求向服务器提交数据案例" class="headerlink" title="使用GET方式请求向服务器提交数据案例"></a>使用GET方式请求向服务器提交数据案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">    <span class="keyword">final</span> String username = usernameEt.getText().toString();</div><div class="line">    <span class="keyword">final</span> String pwd = pwdEt.getText().toString();</div><div class="line">    <span class="keyword">new</span> Thread()&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                <span class="comment">// url地址</span></div><div class="line">                String urlPath = <span class="string">"http://localhost:8080/login/login?username="</span> + username + <span class="string">"&amp;pwd="</span> + pwd;</div><div class="line">                URL url = <span class="keyword">new</span> URL(urlPath);</div><div class="line">                <span class="comment">// 打开http链接</span></div><div class="line">                HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">                <span class="comment">// 通过GET方式提交数据</span></div><div class="line">                conn.setRequestMethod(<span class="string">"GET"</span>);</div><div class="line">                <span class="comment">// 判断响应码</span></div><div class="line">                <span class="keyword">if</span>(conn.getResponseCode()==<span class="number">200</span>)&#123;</div><div class="line">                    <span class="comment">// 读取输入流</span></div><div class="line">                    InputStream is = conn.getInputStream();</div><div class="line">                    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</div><div class="line">                    String result = reader.readLine();</div><div class="line">                    <span class="comment">// 返回主线程显示UI</span></div><div class="line">                    runOnUIThread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"登录结果："</span> + result,Toast.LENGTH_SHORT).show();</div><div class="line">                        &#125;</div><div class="line">                    );</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>案例中的UI比较简单，只有两个输入框和一个按钮，通过输入用户名和密码并点击登录按钮后，获取两个输入框的参数，并拼接到url地址上后就可以发起GET方式的网络请求了</p>
</blockquote>
<h3 id="使用POST方式请求向服务器提交数据案例"><a href="#使用POST方式请求向服务器提交数据案例" class="headerlink" title="使用POST方式请求向服务器提交数据案例"></a>使用POST方式请求向服务器提交数据案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">    <span class="keyword">final</span> String username = usernameEt.getText().toString();</div><div class="line">    <span class="keyword">final</span> String pwd = pwdEt.getText().toString();</div><div class="line">    <span class="keyword">new</span> Thread()&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                <span class="comment">// url地址</span></div><div class="line">                String urlPath = <span class="string">"http://localhost:8080/login/login"</span>;</div><div class="line">                URL url = <span class="keyword">new</span> URL(urlPath);</div><div class="line">                <span class="comment">// 打开http链接</span></div><div class="line">                HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">                <span class="comment">// 通过GET方式提交数据</span></div><div class="line">                conn.setRequestMethod(<span class="string">"POST"</span>);</div><div class="line">                </div><div class="line">                <span class="comment">// ---------------------------</span></div><div class="line">                </div><div class="line">                <span class="comment">// 两个请求头 表示参数通过表单提交</span></div><div class="line">                String params = <span class="string">"username="</span> + username + <span class="string">"&amp;pwd="</span> + pwd;</div><div class="line">                conn.setRequestProperty(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">                conn.setRequestProperty(<span class="string">"Content-Length"</span>,params.length()+<span class="string">""</span>);</div><div class="line">                </div><div class="line">                <span class="comment">// 向服务器提交数据</span></div><div class="line">                <span class="comment">// HttpURLConnection的输出流开关默认是关闭的</span></div><div class="line">                conn.setDoOutput(<span class="keyword">true</span>);</div><div class="line">                conn.getOutputStream().write(params.getBytes());</div><div class="line">                </div><div class="line">                <span class="comment">// ---------------------------</span></div><div class="line">                </div><div class="line">                <span class="comment">// 判断响应码</span></div><div class="line">                <span class="keyword">if</span>(conn.getResponseCode()==<span class="number">200</span>)&#123;</div><div class="line">                    <span class="comment">// 读取输入流</span></div><div class="line">                    InputStream is = conn.getInputStream();</div><div class="line">                    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</div><div class="line">                    String result = reader.readLine();</div><div class="line">                    <span class="comment">// 返回主线程显示UI</span></div><div class="line">                    runOnUIThread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"登录结果："</span> + result,Toast.LENGTH_SHORT).show();</div><div class="line">                        &#125;</div><div class="line">                    );</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>案例中的方法和GET方式请求的方法大体上是一致的，主要区别在于参数不再是拼接在url地址后方，而是以表单方式提交<br>中间用注释框起来的部分：首先通过POST方式提交数据需要加入两个请求头，表示参数是通过表单提交的，”Content-Length”表示的是参数的长度，这里通过一些处理将其长度计算出来即可，然后向服务器提交数据需要通过输出流输出，而HttpURLConnection的输出流开关默认是关闭的，需要调用setDoOutput()方法将其打开，然后再通过输出流将参数提交即可</p>
</blockquote>
<h3 id="网络请求概述"><a href="#网络请求概述" class="headerlink" title="网络请求概述"></a>网络请求概述</h3><blockquote>
<p>根据HTTP标准，HTTP请求可以使用多种请求方法<br>HTTP1.0定义了三种请求方法：GET,POST和HEAD方法<br>HTTP1.1新增了五种请求方法：OPTIONS，PUT,DELETE,TRACE和CONNECT方法<br>在客户机和服务器之间进行请求-响应时，GET和POST是最常用的方法</p>
</blockquote>
<h2 id="使用HttpClient进行网络请求"><a href="#使用HttpClient进行网络请求" class="headerlink" title="使用HttpClient进行网络请求"></a>使用HttpClient进行网络请求</h2><ul>
<li>注意：HttpClient在Android6.0之后就已废弃<blockquote>
<p>HttpUrlConnection请求网络的方式可以看成是一种面向过程的请求方式，而HttpClient请求网络的方式就可以看成是一种面向对象(接口)的请求方式  </p>
</blockquote>
</li>
</ul>
<h3 id="使用HttpClient的GET方式请求向服务器提交数据案例"><a href="#使用HttpClient的GET方式请求向服务器提交数据案例" class="headerlink" title="使用HttpClient的GET方式请求向服务器提交数据案例"></a>使用HttpClient的GET方式请求向服务器提交数据案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginClickByGet</span><span class="params">(View v)</span></span>&#123;</div><div class="line">    <span class="keyword">final</span> String username = usernameEt.getText().toString();</div><div class="line">    <span class="keyword">final</span> String pwd = pwdEt.getText().toString();</div><div class="line"></div><div class="line">    <span class="keyword">new</span> Thread()&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                 <span class="comment">// 创建一个HttpClient对象</span></div><div class="line">                HttpClient client = <span class="keyword">new</span> DefaultHttpClient();</div><div class="line">                <span class="comment">// 声明一个GET请求</span></div><div class="line">                <span class="comment">// url地址</span></div><div class="line">                String urlPath = <span class="string">"http://localhost:8080/login/login?username="</span> + username + <span class="string">"&amp;pwd="</span> + pwd;</div><div class="line">                HttpGet request = <span class="keyword">new</span> HttpGet();</div><div class="line">                <span class="comment">// 执行HttpGet请求 返回一个HttpResponse响应对象</span></div><div class="line">                HttpResponse response = client.execute(request);</div><div class="line">                <span class="comment">// 判断响应码</span></div><div class="line">                <span class="keyword">int</span> responseCode = response.getStatusLine().getStatusCode();</div><div class="line">                <span class="keyword">if</span>(responseCode == <span class="number">200</span>)&#123;</div><div class="line">                    <span class="comment">// 获取响应数据 HttpEntity实体对象 该对象封装了返回的数据</span></div><div class="line">                    HttpEntity entity = response.getEntity();</div><div class="line">                    InputStream is = entity.getContent();</div><div class="line">                    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</div><div class="line">                    String line = reader.readLine();</div><div class="line">                    <span class="comment">// 返回主线程显示UI</span></div><div class="line">                    runOnUIThread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                            Toast.makeText(MainActivity.<span class="keyword">this</span>,line,Toast.LENGTH_SHORT).show();</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用HttpClient的GET方式请求向服务器提交数据案例-1"><a href="#使用HttpClient的GET方式请求向服务器提交数据案例-1" class="headerlink" title="使用HttpClient的GET方式请求向服务器提交数据案例"></a>使用HttpClient的GET方式请求向服务器提交数据案例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">public void loginClickByPost(View v)&#123;</div><div class="line">    final String username = usernameEt.getText().toString();</div><div class="line">    final String pwd = pwdEt.getText().toString();</div><div class="line"></div><div class="line">    new Thread()&#123;</div><div class="line">        public void run()&#123;</div><div class="line">            try&#123;</div><div class="line">                 // 创建一个HttpClient对象</div><div class="line">                HttpClient client = new DefaultHttpClient();</div><div class="line">                // 声明一个POST请求</div><div class="line">                // url地址</div><div class="line">                String urlPath = "http://localhost:8080/login/login;</div><div class="line">                HttpPost request = new HttpPost();</div><div class="line">                // 将Post请求添加到Form表单中</div><div class="line">                // 不管是请求的数据 还是返回的数据 都封装在HtppEntity中</div><div class="line">                ArrayList&lt;BasicNameValuePair&gt; parameters = new ArrayList&lt;&gt;();</div><div class="line">                parameters.add(new BasicNameValuePair("username",username));</div><div class="line">                parameters.add(new BasicNameValuePair("pwd",pwd));</div><div class="line">                HttpEntity entity = new UrlEncodedFormEntity(parameters,"utf-8");</div><div class="line">                request.setEntity(entity);</div><div class="line">                // 执行HttpPost请求 返回一个HttpResponse响应对象</div><div class="line">                HttpResponse response = client.execute(request);</div><div class="line">                // 判断响应码</div><div class="line">                int responseCode = response.getStatusLine().getStatusCode();</div><div class="line">                if(responseCode == 200)&#123;</div><div class="line">                    // 获取响应数据 HttpEntity实体对象 该对象封装了返回的数据</div><div class="line">                    HttpEntity entity = response.getEntity();</div><div class="line">                    InputStream is = entity.getContent();</div><div class="line">                    BufferedReader reader = new BufferedReader(new InputStreamReader(is));</div><div class="line">                    String line = reader.readLine();</div><div class="line">                    // 返回主线程显示UI</div><div class="line">                    runOnUIThread(new Runnable()&#123;</div><div class="line">                        public void run()&#123;</div><div class="line">                            Toast.makeText(MainActivity.this,line,Toast.LENGTH_SHORT).show();</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="多线程下载"><a href="#多线程下载" class="headerlink" title="多线程下载"></a>多线程下载</h2><h3 id="多线程下载文件案例"><a href="#多线程下载文件案例" class="headerlink" title="多线程下载文件案例"></a>多线程下载文件案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_THREAD_COUNT = <span class="number">3</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mReadCount;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 按钮点击事件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">// 获取服务器中文件的大小 并在手机中创建一个大小一致的空文件</span></div><div class="line">                    URL url = <span class="keyword">new</span> URL(getUrlPath());</div><div class="line">                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class="line">                    <span class="keyword">if</span> (connection.getResponseCode() == <span class="number">200</span>) &#123;</div><div class="line">                        <span class="comment">// 资源文件的大小</span></div><div class="line">                        <span class="keyword">int</span> contentLength = connection.getContentLength();</div><div class="line">                        File file = <span class="keyword">new</span> File(getFilesDir(), getFileName(getUrlPath()));</div><div class="line">                        <span class="comment">// RandomAccessFile 可以创建带有空间大小的文件</span></div><div class="line">                        RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(file, <span class="string">"rw"</span>);</div><div class="line">                        randomAccessFile.setLength(contentLength);</div><div class="line"></div><div class="line">                        <span class="comment">// 创建MAX_THREAD_COUNT条线程 把文件分割成MAX_THREAD_COUNT等分 最后的线程应该把剩下的文件内容全部读取完</span></div><div class="line">                        <span class="comment">// 计算每条线程应读取的内容大小</span></div><div class="line">                        <span class="keyword">int</span> perSize = contentLength / MAX_THREAD_COUNT;</div><div class="line">                        mReadCount = <span class="number">0</span>;</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_THREAD_COUNT; i++) &#123;</div><div class="line">                            <span class="comment">// startPosition 每条线程的起始位置</span></div><div class="line">                            <span class="keyword">int</span> startPosition = i * perSize;</div><div class="line">                            <span class="keyword">int</span> endPosition = (i + <span class="number">1</span>) * perSize - <span class="number">1</span>;</div><div class="line">                            <span class="keyword">if</span> (i == MAX_THREAD_COUNT - <span class="number">1</span>) &#123;</div><div class="line">                                endPosition = contentLength - <span class="number">1</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="comment">// 创建MAX_THREAD_COUNT条子线程进行下载</span></div><div class="line">                            <span class="keyword">new</span> DownLoadThread(i, startPosition, endPosition).start();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownLoadThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mStartPosition;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mEndPosition;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mThreadIndex;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DownLoadThread</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> startPosition, <span class="keyword">int</span> endPosition)</span> </span>&#123;</div><div class="line">            mThreadIndex = i;</div><div class="line">            mStartPosition = startPosition;</div><div class="line">            mEndPosition = endPosition;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                URL url = <span class="keyword">new</span> URL(getUrlPath());</div><div class="line">                HttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class="line">                <span class="comment">// 通知服务器 只想下载文件的某一部分</span></div><div class="line">                <span class="comment">// 通过请求头通知服务器</span></div><div class="line">                <span class="comment">// Range,"bytes=100-200" 100-200 表示下载文件的100-200字节部分</span></div><div class="line">                connection.setRequestProperty(<span class="string">"Range"</span>, <span class="string">"bytes="</span> + mStartPosition + <span class="string">"-"</span> + mEndPosition);</div><div class="line">                <span class="comment">// 只下载文件一部分的响应码为206</span></div><div class="line">                <span class="keyword">if</span> (connection.getResponseCode() == <span class="number">206</span>) &#123;</div><div class="line">                    InputStream is = connection.getInputStream();</div><div class="line">                    <span class="comment">// 将内容作为文件的一部分写入 File没有这样的功能</span></div><div class="line">                    <span class="comment">// 必须通过RandomAccessFile</span></div><div class="line">                    File file = <span class="keyword">new</span> File(getFilesDir(), getFileName(getUrlPath()));</div><div class="line">                    RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(file, <span class="string">"rw"</span>);</div><div class="line">                    <span class="comment">// 跳过mStartPosition个字节</span></div><div class="line">                    randomAccessFile.skipBytes(mStartPosition);</div><div class="line">                    <span class="comment">// 开始写入文件</span></div><div class="line">                    <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">32</span>];</div><div class="line">                    <span class="keyword">int</span> readCount;</div><div class="line">                    <span class="keyword">while</span> ((readCount = is.read(buff)) &gt; <span class="number">0</span>) &#123;</div><div class="line">                        randomAccessFile.write(buff, <span class="number">0</span>, readCount);</div><div class="line">                    &#125;</div><div class="line">                    randomAccessFile.close();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                mReadCount++;</div><div class="line">                <span class="keyword">if</span> (mReadCount == MAX_THREAD_COUNT) &#123;</div><div class="line">                    Log.i(<span class="string">"aaa"</span>, <span class="string">"download finish !"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取网络地址</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getUrlPath</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"http://localhost:8080/resource.rar"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取文件名</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getFileName</span><span class="params">(String urlPath)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> urlPath.substring(urlPath.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>案例思路</li>
</ul>
<ol>
<li>通过url地址发起网络请求</li>
<li>获取资源文件的大小，创建一个具有同样大小的空文件</li>
<li>将文件分成MAX_THREAD_COUNT等分并计算每个部分需要下载的大小，计算出开始位置和结束位置</li>
<li>创建MAX_THREAD_COUNT条子线程DownLoadThread进行下载<blockquote>
<p>注意：由于File类没有提供需要的功能，所以此处用到了一个RandomAccessFile类，RandomAccessFile类可以创建带有空间大小的文件，并且可以跳过字节写入文件</p>
</blockquote>
</li>
</ol>
<h3 id="多线程断点下载案例"><a href="#多线程断点下载案例" class="headerlink" title="多线程断点下载案例"></a>多线程断点下载案例</h3><ul>
<li><p>修改案例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> LinearLayout mPbContainerLl;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mPbContainerLl = (LinearLayout) findViewById(R.id.pbcontainer_ll);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 按钮点击事件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">// 删除所有子控件</span></div><div class="line">        mPbContainerLl.removeAllViews();</div><div class="line">        <span class="comment">// 创建MAX_THREAD_COUNT个条横向的ProgressBar</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_THREAD_COUNT; i++) &#123;</div><div class="line">			View view = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.pb_layout, <span class="keyword">null</span>);</div><div class="line">			mPbContainerLl.addView(view);</div><div class="line">		&#125;</div><div class="line">    </div><div class="line">        <span class="keyword">new</span> Thread() &#123;</div><div class="line">            </div><div class="line">            ...</div><div class="line">            </div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownLoadThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        </div><div class="line">        ...</div><div class="line">        <span class="comment">// 用于记录上一次下载的位置</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mLastPosition;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DownLoadThread</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> startPosition, <span class="keyword">int</span> endPosition)</span> </span>&#123;</div><div class="line">            mThreadIndex = i;</div><div class="line">            mStartPosition = startPosition;</div><div class="line">            mEndPosition = endPosition;</div><div class="line">            mLastPosition=startPosition;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 通过PbContaierLl的getChildAt方法找到容器中的子控件</span></div><div class="line">            <span class="keyword">final</span> ProgressBar pb =(ProgressBar) view.findViewById(R.id.progressBar1);</div><div class="line">            <span class="comment">// 回到UI线程更新UI 设置进度</span></div><div class="line">            runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					pb.setMax(mEndPosition-mStartPosition);</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">            </div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// 判断是否有记录线程进度的文件 有则读取</span></div><div class="line">                File lastRecordFile = getRecordFile(mThreadIndex,getFileName(getUrlPath)));</div><div class="line">                <span class="keyword">if</span>(lastRecordFile.exists()&amp;&amp;lastRecordFile.length()&gt;<span class="number">0</span>)&#123;</div><div class="line">                    FileInputStream fis = <span class="keyword">new</span> FileInputStream(lastRecordFile);</div><div class="line">                    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(fis));</div><div class="line">                    mLastPosition = Integer.parseInt(reader.readLine());</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                ...</div><div class="line">                </div><div class="line">                <span class="comment">// 只下载文件一部分的响应码为206</span></div><div class="line">                <span class="keyword">if</span> (connection.getResponseCode() == <span class="number">206</span>) &#123;</div><div class="line">                    </div><div class="line">                    ...</div><div class="line">                    </div><div class="line">                    <span class="keyword">while</span> ((readCount = is.read(buff)) &gt; <span class="number">0</span>) &#123;</div><div class="line">                        randomAccessFile.write(buff, <span class="number">0</span>, readCount);</div><div class="line">                        </div><div class="line">                        mLastPosition += readCount;</div><div class="line">                        <span class="comment">// 保存mLastPosition</span></div><div class="line">                        File recordFile = getRecordFile(mThreadIndex,getFileName(getUrlPath)));</div><div class="line">                        <span class="comment">// RandomAccessFile 可以实时写文件到硬盘中</span></div><div class="line">                        RandomAccessFile recordRaf = <span class="keyword">new</span> RandomAccessFile(recordFile,<span class="string">"rwd"</span>);</div><div class="line">                        </div><div class="line">                        runOnUIThread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                                pb.setProgress(mLastPosition-mStartPosition);</div><div class="line">                            &#125;</div><div class="line">                        )&#125;;</div><div class="line">                    &#125;</div><div class="line">                    randomAccessFile.close();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                mReadCount++;</div><div class="line">                <span class="keyword">if</span> (mReadCount == MAX_THREAD_COUNT) &#123;</div><div class="line">                    runOnUIThread()&#123;</div><div class="line">                       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">                           Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"download finish !"</span>, <span class="number">0</span>).show();</div><div class="line">                       &#125;</div><div class="line">                    &#125;);</div><div class="line">                    <span class="comment">// 删除记录文件</span></div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_THREAD_COUNT; i++) &#123;</div><div class="line">						File recordFile = getRecordFile(i,getFileName(getUrlPath()));</div><div class="line">						recordFile.delete();</div><div class="line">					&#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取网络地址</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getUrlPath</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"http://localhost:8080/resource.rar"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取文件名</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getFileName</span><span class="params">(String urlPath)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> urlPath.substring(urlPath.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * 为每一条线程创建一个记录当前进度文件 </div><div class="line">	 * */</div><div class="line">	<span class="function"><span class="keyword">private</span> File <span class="title">getRecordFile</span><span class="params">(<span class="keyword">int</span> threadIndex,String fileName)</span></span>&#123;</div><div class="line">        <span class="comment">// 原文件名 resource.rar   </span></div><div class="line">        <span class="comment">// 记录文件名 resource#2.txt</span></div><div class="line">		fileName=fileName.substring(<span class="number">0</span>, fileName.lastIndexOf(<span class="string">"."</span>));</div><div class="line">		fileName+=(<span class="string">"#"</span>+threadIndex+<span class="string">".txt"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> File(getFilesDir(),fileName);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure>
</li>
<li><p>案例思路</p>
</li>
</ul>
<ol>
<li>在文件下载过程中实时记录当前线程下载的位置</li>
<li>将当前位置写入本地文件保存在手机中</li>
<li>当因为某些原因导致下载被终止时，下次重新下载就会读取本地的文件，并将当前进度设置为上次位置</li>
<li>下载完成后删除所有临时记录文件<blockquote>
<p>注意：File类无法进行实时写入，当程序被强制终止时，会导致写入也终止，而RandomAccessFile类恰好能够解决这个问题</p>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android基础-七&quot;&gt;&lt;a href=&quot;#Android基础-七&quot; class=&quot;headerlink&quot; title=&quot;Android基础(七)&quot;&gt;&lt;/a&gt;Android基础(七)&lt;/h1&gt;&lt;h2 id=&quot;网络请求&quot;&gt;&lt;a href=&quot;#网络请求&quot; class
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Android基础六</title>
    <link href="https://izdo.github.io/2017/12/04/Android%E5%9F%BA%E7%A1%80%E5%85%AD/"/>
    <id>https://izdo.github.io/2017/12/04/Android基础六/</id>
    <published>2017-12-04T12:58:30.084Z</published>
    <updated>2017-11-26T08:07:28.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android基础-六"><a href="#Android基础-六" class="headerlink" title="Android基础(六)"></a>Android基础(六)</h1><h2 id="使用HttpURLConnection访问网络图片案例"><a href="#使用HttpURLConnection访问网络图片案例" class="headerlink" title="使用HttpURLConnection访问网络图片案例"></a>使用HttpURLConnection访问网络图片案例</h2><h3 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>  &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/center_iv"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>  /&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">LinearLayout</span> </span></div><div class="line">	    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">	    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">	    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> &gt;</div><div class="line">	    <span class="tag">&lt;<span class="name">Button</span> </span></div><div class="line">	        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">	        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">	        <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span></div><div class="line">	        <span class="attr">android:onClick</span>=<span class="string">"preClick"</span></div><div class="line">	        <span class="attr">android:text</span>=<span class="string">"上一张"</span> /&gt;</div><div class="line">	    <span class="tag">&lt;<span class="name">Button</span> </span></div><div class="line">	        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">	        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">	        <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span></div><div class="line">	        <span class="attr">android:onClick</span>=<span class="string">"nextClick"</span></div><div class="line">	        <span class="attr">android:text</span>=<span class="string">"下一张"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> ImageView mImageView;</div><div class="line">	<span class="keyword">private</span> ArrayList&lt;String&gt; mImageUrlPaths=<span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> mCurrentIndex;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">		</div><div class="line">		mImageView =(ImageView) findViewById(R.id.center_iv);</div><div class="line">		</div><div class="line">        <span class="comment">// android.os.NetworkOnMainThreadException</span></div><div class="line">        <span class="comment">// 网络请求应在子线程中进行</span></div><div class="line">		<span class="keyword">new</span> Thread()&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="comment">// 从网络上读取photo.txt 并封装成为ArrayList&lt;String&gt;</span></div><div class="line">				loadImageUrls();</div><div class="line">				<span class="comment">// 创建一个索引变量 用来控制当前的显示的图片索引</span></div><div class="line">				<span class="comment">// 根据索引 从ArrayList取出某一个字符串(图片网址) 根据网址获取图片 显示到控件上</span></div><div class="line">				loadImageByUrl(mCurrentIndex);</div><div class="line">			&#125;</div><div class="line">		&#125;.start();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据索引显示图片</div><div class="line">	 * <span class="doctag">@param</span> currIndex</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadImageByUrl</span><span class="params">(<span class="keyword">int</span> currIndex)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 获取图片Url地址</span></div><div class="line">			String imageUrl = mImageUrlPaths.get(currIndex);</div><div class="line">			<span class="comment">// 获取图片名</span></div><div class="line">			<span class="comment">// 获取图片存储时的全路径 判断文件是否存在</span></div><div class="line">			File file=<span class="keyword">new</span> File(getFilesDir(), getImageName(imageUrl));</div><div class="line">			<span class="comment">// 如果当前的图片被缓存了 就不需要在执行网络请求</span></div><div class="line">			<span class="keyword">if</span> (file.exists()&amp;&amp;file.length()&gt;<span class="number">0</span>) &#123;</div><div class="line">				<span class="comment">// 文件存在 从文件里面读取图片</span></div><div class="line">				<span class="keyword">final</span> Bitmap bmp = BitmapFactory.decodeFile(file.getAbsolutePath());</div><div class="line">				runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">					<span class="meta">@Override</span></div><div class="line">					<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">						mImageView.setImageBitmap(bmp);</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			URL url=<span class="keyword">new</span> URL(imageUrl);</div><div class="line">			HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">			<span class="keyword">int</span> responseCode = conn.getResponseCode();</div><div class="line">			<span class="keyword">if</span> (responseCode==<span class="number">200</span>) &#123;</div><div class="line">				InputStream is = conn.getInputStream();</div><div class="line">				<span class="keyword">final</span> Bitmap bitmap = BitmapFactory.decodeStream(is);</div><div class="line">				<span class="comment">// 将bitmap写到文件中  flies目录</span></div><div class="line">				<span class="comment">// format 文件的类型</span></div><div class="line">				<span class="comment">// quality 图片从流转换成文件保存的质量 范围0~100</span></div><div class="line">				<span class="comment">// stream 流</span></div><div class="line">				FileOutputStream fos = openFileOutput(getImageName(imageUrl), MODE_PRIVATE);</div><div class="line">				bitmap.compress(CompressFormat.PNG, <span class="number">100</span>, fos);</div><div class="line">				</div><div class="line">				<span class="comment">// 回到主线程更新UI</span></div><div class="line">				runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">					<span class="meta">@Override</span></div><div class="line">					<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">						mImageView.setImageBitmap(bitmap);</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 加载图片的URL地址</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadImageUrls</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 创建一个Url对象</span></div><div class="line">			URL url=<span class="keyword">new</span> URL(getImageUrls());</div><div class="line">			<span class="comment">// 打开一个链接</span></div><div class="line">			HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">			<span class="comment">// 通过状态码判断是否能够获取资源 </span></div><div class="line">			<span class="keyword">int</span> responseCode = conn.getResponseCode();</div><div class="line">			<span class="keyword">if</span> (responseCode==<span class="number">200</span>) &#123;</div><div class="line">				<span class="comment">// 返回一个流数据 输入流</span></div><div class="line">				InputStream is = conn.getInputStream();</div><div class="line">				<span class="comment">// 读取字符串 字符流</span></div><div class="line">				BufferedReader reader=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</div><div class="line">				String line=<span class="keyword">null</span>;</div><div class="line">				<span class="keyword">while</span> ((line=reader.readLine())!=<span class="keyword">null</span>) &#123;</div><div class="line">					<span class="comment">// 读取数据</span></div><div class="line">					mImageUrlPaths.add(line);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">		mCurrentIndex--;</div><div class="line">		<span class="keyword">if</span> (mCurrentIndex&lt;<span class="number">0</span>) &#123;</div><div class="line">			mCurrentIndex=mImageUrlPaths.size()-<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">new</span> Thread()&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				loadImageByUrl(mCurrentIndex);</div><div class="line">			&#125;</div><div class="line">		&#125;.start();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">		mCurrentIndex++;</div><div class="line">		<span class="keyword">if</span> (mCurrentIndex&gt;mImageUrlPaths.size()-<span class="number">1</span>) &#123;</div><div class="line">			mCurrentIndex=<span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">new</span> Thread()&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				loadImageByUrl(mCurrentIndex);</div><div class="line">			&#125;</div><div class="line">		&#125;.start();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取网络地址</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">getImageUrls</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"http://localhost:8080/img/photo.txt"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getImageName</span><span class="params">(String urlPath)</span></span>&#123;</div><div class="line">		<span class="comment">// 获取最后/的位置</span></div><div class="line">		<span class="keyword">int</span> lastIndexOf = urlPath.lastIndexOf(<span class="string">"/"</span>);</div><div class="line">		<span class="comment">// 返回截取到/后面的文件名</span></div><div class="line">		<span class="keyword">return</span> urlPath.substring(lastIndexOf+<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Android中主线程(UI线程)是不建议进行耗时操作的(网络请求等)，当需要耗时操作时，可将其放在子线程中操作，而子线程是不能更新UI的，所以想在子线程中更新UI可以调用runOnUIThread()方法回到主线程中更新UI</li>
</ul>
<h2 id="网络请求的通用步骤"><a href="#网络请求的通用步骤" class="headerlink" title="网络请求的通用步骤"></a>网络请求的通用步骤</h2><ol>
<li><p>创建URL地址 -&gt; String urlPath  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">URL url = <span class="keyword">new</span> URL(urlPath);</div></pre></td></tr></table></figure>
</li>
<li><p>打开一个网络链接</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HttpUrlConnection conn = url.openConnection();</div></pre></td></tr></table></figure>
</li>
<li><p>判断数据返回的状态码(响应码)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> resCode = conn.getResponseCode();</div></pre></td></tr></table></figure>
</li>
<li><p>当响应码为200时 说明资源请求成功 需要将资源读取进手机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">InputStream is = conn.getInputStream();</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>注意：<ol>
<li>访问网络需要在清单文件中申请访问网络的权限</li>
<li>网络请求应放在子线程中 new Thread()</li>
<li>更新UI应返回主线程中 runOnUIThread()</li>
</ol>
</li>
</ul>
<h2 id="使用Handler在子线程更新UI"><a href="#使用Handler在子线程更新UI" class="headerlink" title="使用Handler在子线程更新UI"></a>使用Handler在子线程更新UI</h2><ol>
<li><p>在主线程中创建一个Handler对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>在子线程中发送一条消息告诉主线程需要更新UI</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Message msg = <span class="keyword">new</span> Message();</div><div class="line">mHandler.sendMessage(msg);</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>若需要传递数据，Message提供了arg1和arg2两个int类型的参数和obj一个Object类型的参数，方便传递信息<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Message msg = <span class="keyword">new</span> Message();</div><div class="line">msg.obj = bitmap;</div><div class="line">mHandler.sendMessage(msg);</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>在Handler的handleMessage()方法中处理传递过来的消息<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>&#123;</div><div class="line">        imageView.setImageBitmap((Bitmap)msg.obj);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Handler源码分析"><a href="#Handler源码分析" class="headerlink" title="Handler源码分析"></a>Handler源码分析</h2><p><a href="http://blog.csdn.net/iispring/article/details/47180325" target="_blank" rel="external">深入源码解析Android中的Handler,Message,MessageQueue,Looper</a></p>
<h2 id="Handler补充"><a href="#Handler补充" class="headerlink" title="Handler补充"></a>Handler补充</h2><blockquote>
<p>当有多个线程向Handler发送Message，而它们需要进行不同方式的处理时可以使用Message的what参数，使用这个参数进行标识，Handler在处理消息时可以根据这个what的标识对不同的线程发送的消息进行不同的处理</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android基础-六&quot;&gt;&lt;a href=&quot;#Android基础-六&quot; class=&quot;headerlink&quot; title=&quot;Android基础(六)&quot;&gt;&lt;/a&gt;Android基础(六)&lt;/h1&gt;&lt;h2 id=&quot;使用HttpURLConnection访问网络图片案例
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Android基础五</title>
    <link href="https://izdo.github.io/2017/12/04/Android%E5%9F%BA%E7%A1%80%E4%BA%94/"/>
    <id>https://izdo.github.io/2017/12/04/Android基础五/</id>
    <published>2017-12-04T12:55:55.348Z</published>
    <updated>2017-11-24T14:18:09.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android基础-五"><a href="#Android基础-五" class="headerlink" title="Android基础(五)"></a>Android基础(五)</h1><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><h3 id="在Java代码中生成TextView案例"><a href="#在Java代码中生成TextView案例" class="headerlink" title="在Java代码中生成TextView案例"></a>在Java代码中生成TextView案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">LinearLayout layout = (LinearLayout) findViewById(R.id.layout);</div><div class="line">TextView tv = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</div><div class="line"><span class="comment">// 设置宽高 </span></div><div class="line">tv.setLayoutParams(<span class="keyword">new</span> LinearLayout.LayoutParams(</div><div class="line">    LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT));</div><div class="line"><span class="comment">//设置字体大小 单位:px</span></div><div class="line">tv.setTextSize(<span class="number">30</span>);</div><div class="line">tv.setText(<span class="string">"abc"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 将TextView添加到布局中</span></div><div class="line">layout.addView(tv);</div></pre></td></tr></table></figure>
<h3 id="使用ListView"><a href="#使用ListView" class="headerlink" title="使用ListView"></a>使用ListView</h3><h4 id="在布局文件中添加ListView控件"><a href="#在布局文件中添加ListView控件" class="headerlink" title="在布局文件中添加ListView控件"></a>在布局文件中添加ListView控件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/listView"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</div></pre></td></tr></table></figure>
<h4 id="在MainActivity中获取ListView实例"><a href="#在MainActivity中获取ListView实例" class="headerlink" title="在MainActivity中获取ListView实例"></a>在MainActivity中获取ListView实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ListView mListView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">// 获取ListView</span></div><div class="line">        mListView = (ListView) findViewById(R.id.listView);</div><div class="line">        <span class="comment">// 创建模拟数据</span></div><div class="line">        ArrayList&lt;String&gt; datas = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">150</span>; i++) &#123;</div><div class="line">            datas.add(i);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 设置适配器</span></div><div class="line">        MyAdapter adapter = <span class="keyword">new</span> MyAdapter(datas);</div><div class="line">        mListView.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="适配器MyAdapter类"><a href="#适配器MyAdapter类" class="headerlink" title="适配器MyAdapter类"></a>适配器MyAdapter类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; mDatas;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(ArrayList&lt;String&gt; datas)</span> </span>&#123;</div><div class="line">        mDatas = datas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDatas.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * position 索引 convertView parent 每个 ItemView里面的容器 返回的View直接添加到容器中来</div><div class="line">     * convertView 缓存的ItemView</div><div class="line">     * <span class="doctag">@return</span> View 就是每个ItemView要显示的内容</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line"></div><div class="line">        LayoutInflater layoutInflater = LayoutInflater</div><div class="line">                .from(parent.getContext());</div><div class="line">        View view = layoutInflater.inflate(android.R.layout.simple_list_item_1, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">        TextView tv = (TextView) view.findViewById(android.R.id.text1);</div><div class="line">        tv.setText(mDatas.get(position));</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>MyAdapter类中最重要的是getView()方法，其中LayoutInflater是一个布局打气筒，他可以将一个布局转换成一个View，此处用的是android.R.layout.simple_list_item_1布局，这是android提供的一个布局，布局中只有一个TextView<br>通过打印日志和拖动ListView发现，假如当一个屏幕上最大能呈现的item数量为5个时，应用加载时会预加载多一个item，也就是6个item，而当最后一个被划过，并且最前面的item被隐藏时，新产生的item其实是复用了前面被隐藏的item<br>而说到复用，其实getView()方法的第二个参数convertView就是一个缓存对象  </p>
</blockquote>
<h4 id="View的Tag属性"><a href="#View的Tag属性" class="headerlink" title="View的Tag属性"></a>View的Tag属性</h4><blockquote>
<p>Android中所有的View都可以设置一个Tag，通过View.setTag()进行设置，而存入其中的参数类型是Object，也就是说传入任何对象都可以，这是非常人性化的地方，而取出这个Tag只需要拿到这个View的对象调用getTag()即可获取Tag  </p>
</blockquote>
<h4 id="复用缓存对象优化ListView"><a href="#复用缓存对象优化ListView" class="headerlink" title="复用缓存对象优化ListView"></a>复用缓存对象优化ListView</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">	ViewHolder holder=<span class="keyword">null</span>;</div><div class="line">	<span class="keyword">if</span> (convertView==<span class="keyword">null</span>) &#123;</div><div class="line">		LayoutInflater layoutInflater = LayoutInflater</div><div class="line">				.from(parent.getContext());</div><div class="line">		convertView = layoutInflater.inflate(android.R.layout.simple_list_item_2,</div><div class="line">				<span class="keyword">null</span>);</div><div class="line">		holder=<span class="keyword">new</span> ViewHolder();</div><div class="line">		</div><div class="line">		holder.tv1 = (TextView) convertView.findViewById(android.R.id.text1);</div><div class="line">		holder.tv2 = (TextView) convertView.findViewById(android.R.id.text2);</div><div class="line">		</div><div class="line">		convertView.setTag(holder);</div><div class="line">	&#125;<span class="keyword">else</span> &#123;</div><div class="line">		holder=(ViewHolder) convertView.getTag();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	holder.tv1.setText(mDatas.get(position));</div><div class="line">	holder.tv2.setText(mDatas.get(position));</div><div class="line"></div><div class="line">	<span class="keyword">return</span> convertView;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>&#123;</div><div class="line">	TextView tv1;</div><div class="line">	TextView tv2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>复用缓存对象的原理实际上就是用到了View的Tag，由于Tag只能传入一个，当面对具有2个以上内部控件的布局来说就束手无策了，所以这里将布局中所有需要的控件封装到一个ViewHolder中，再将这个ViewHolder作为Tag传入，当convertView为空，即应用刚进入时，做完初始化等工作之后，将holder绑定到convertView中，而当下滑到新的item时，此时convertView已经不为空，则从converView中取出holder进行复用，从而实现了缓存对象的复用，优化了性能  </p>
</blockquote>
<h3 id="使用ArrayAdapter"><a href="#使用ArrayAdapter" class="headerlink" title="使用ArrayAdapter"></a>使用ArrayAdapter</h3><blockquote>
<p>当ListView中的item只需要显示一行文本时，可以选择使用ArrayAdapter适配器  </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">		ListView mListView= (ListView) findViewById(R.id.listView);</div><div class="line">		</div><div class="line">		ArrayList&lt;String&gt; datas=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</div><div class="line">			datas.add(i);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">        <span class="comment">// resource item布局</span></div><div class="line">        <span class="comment">// textViewResourceId 文本显示的TextView的id</span></div><div class="line">        <span class="comment">// data 数据</span></div><div class="line">		ArrayAdapter&lt;String&gt; adapter=<span class="keyword">new</span> ArrayAdapter&lt;String&gt;(</div><div class="line">				<span class="keyword">this</span>,</div><div class="line">				android.R.layout.simple_list_item_1, </div><div class="line">				android.R.id.text1, </div><div class="line">				datas);</div><div class="line">		mListView.setAdapter(adapter);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当数据集发生改变时，可以通过调用adapter.notifyDataSetChanged()刷新数据</span></div><div class="line">adapter.notifyDataSetChanged();</div><div class="line"><span class="comment">// 当为ListView设置背景图片之后，滑动ListView时会出现背景图消失的问题，这时可以通过在xml中为ListView设置属性将缓存颜色设置为透明解决此问题</span></div><div class="line">android:cacheColorHint=<span class="string">"#0FFF"</span></div><div class="line"><span class="comment">// 去除上下拉至边界时出现黑色阴影</span></div><div class="line">android:fadingEdge=<span class="string">"none"</span></div><div class="line"><span class="comment">// 设置分割线</span></div><div class="line">android:divider=<span class="string">"#fff"</span></div><div class="line">android:dividerHeight=<span class="string">"2dp"</span></div><div class="line"><span class="comment">// 更换点击item时的背景颜色</span></div><div class="line">android:listSelector=<span class="string">"#fff"</span></div></pre></td></tr></table></figure>
<h3 id="ListView监听器"><a href="#ListView监听器" class="headerlink" title="ListView监听器"></a>ListView监听器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">// ListView的滚动监听器</span></div><div class="line">mListView.setOnScrollListener(<span class="keyword">new</span> OnScrollListener() &#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 滑动的状态改变的时候调用</div><div class="line">	 * scrollState 滚动的状态</div><div class="line">	 * 		SCROLL_STATE_FLING	轻扫</div><div class="line">	 * 		SCROLL_STATE_IDLE	不动</div><div class="line">	 * 		SCROLL_STATE_TOUCH_SCROLL  拖拽</div><div class="line">	 * */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;</div><div class="line">		<span class="keyword">switch</span> (scrollState) &#123;</div><div class="line">			<span class="keyword">case</span> OnScrollListener.SCROLL_STATE_FLING:</div><div class="line">				Log.v(<span class="string">"aaa"</span>, <span class="string">"SCROLL_STATE_FLING"</span>);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> OnScrollListener.SCROLL_STATE_IDLE:</div><div class="line">				Log.v(<span class="string">"aaa"</span>, <span class="string">"SCROLL_STATE_IDLE"</span>);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:</div><div class="line">				Log.v(<span class="string">"aaa"</span>, <span class="string">"SCROLL_STATE_TOUCH_SCROLL"</span>);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *	滚动的时候被调用</div><div class="line">	 *	只要列表滚动 就会回调该方法</div><div class="line">	 * */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem,</span></span></div><div class="line">			<span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount) &#123;</div><div class="line">              Log.v(<span class="string">"aaa"</span>, <span class="string">"onScroll"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// ListView的点击事件</span></div><div class="line">mListView.setOnItemClickListener(<span class="keyword">new</span> OnItemClickListener() &#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * id BaseAdapter的getItemId 返回的值</div><div class="line">	 * </div><div class="line">	 * */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view,</span></span></div><div class="line">			<span class="keyword">int</span> position, <span class="keyword">long</span> id) &#123;</div><div class="line">		String data = (String) adapter.getItem(position);</div><div class="line">		Toast.makeText(MainActivity.<span class="keyword">this</span>, data, <span class="number">0</span>).show();</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="GridView"><a href="#GridView" class="headerlink" title="GridView"></a>GridView</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android基础-五&quot;&gt;&lt;a href=&quot;#Android基础-五&quot; class=&quot;headerlink&quot; title=&quot;Android基础(五)&quot;&gt;&lt;/a&gt;Android基础(五)&lt;/h1&gt;&lt;h2 id=&quot;ListView&quot;&gt;&lt;a href=&quot;#ListVie
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Android基础四</title>
    <link href="https://izdo.github.io/2017/12/04/Android%E5%9F%BA%E7%A1%80%E5%9B%9B/"/>
    <id>https://izdo.github.io/2017/12/04/Android基础四/</id>
    <published>2017-12-04T12:55:53.696Z</published>
    <updated>2017-11-22T14:29:47.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android基础-四"><a href="#Android基础-四" class="headerlink" title="Android基础(四)"></a>Android基础(四)</h1><h2 id="Android中的数据存储的几种方式"><a href="#Android中的数据存储的几种方式" class="headerlink" title="Android中的数据存储的几种方式"></a>Android中的数据存储的几种方式</h2><ol>
<li>文件</li>
<li>SharedPerference</li>
<li>Sqlite数据库</li>
<li>ContentProvider</li>
<li>网络</li>
</ol>
<h2 id="Xml序列化生成器"><a href="#Xml序列化生成器" class="headerlink" title="Xml序列化生成器"></a>Xml序列化生成器</h2><h3 id="手动写入xml文件案例"><a href="#手动写入xml文件案例" class="headerlink" title="手动写入xml文件案例"></a>手动写入xml文件案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将&lt;map&gt;&lt;string name="username"&gt;abc&lt;/string&gt;&lt;string name="password"&gt;123&lt;/string&gt;&lt;/map&gt;写入info.xml文件并保存在应用的files文件夹中</span></div><div class="line"><span class="comment">// 拼接字符串</span></div><div class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">sb.append(<span class="string">"&lt;map&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;string name=\"username\"&gt;"</span>+username+<span class="string">"&lt;/string&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;string name=\"password\"&gt;"</span>+password+<span class="string">"&lt;/string&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;/map&gt;"</span>);</div><div class="line">String result = sb.toString();</div><div class="line"><span class="comment">// 创建文件对象</span></div><div class="line">File file = <span class="keyword">new</span> File(context.getFilesDir(),<span class="string">"info.xml"</span>);</div><div class="line"><span class="comment">// 创建输出流</span></div><div class="line">BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(file));</div><div class="line">writer.write(result);</div><div class="line">writer.close();</div></pre></td></tr></table></figure>
<blockquote>
<p>虽然这样能够成功写入xml文件，但是一旦遇到很长的xml文件在写入时就会非常麻烦，而Android提供了Xml序列化器来帮助开发者生成xml文件</p>
</blockquote>
<h3 id="Xml序列化器生成xml文件案例"><a href="#Xml序列化器生成xml文件案例" class="headerlink" title="Xml序列化器生成xml文件案例"></a>Xml序列化器生成xml文件案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将&lt;map&gt;&lt;username&gt;abc&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/map&gt;写入info.xml文件并保存在应用的files文件夹中</span></div><div class="line"><span class="comment">//XmlSerializer 是用来创建xml文档的类</span></div><div class="line">XmlSerializer xmlSerializer = Xml.newSerializer();</div><div class="line"><span class="comment">// 创建输出流</span></div><div class="line">FileOutputStream fos = context.openFileOutput(<span class="string">"info.xml"</span>,Context.MODE_PRIVATE);</div><div class="line">xmlSerializer。setOutput(fos,<span class="string">"utf-8"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 开始写文档</span></div><div class="line"><span class="comment">// startDocument中的两个参数表示xml的声明 &lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;</span></div><div class="line">xmlSerializer.startDocument(<span class="string">"utf-8"</span>,<span class="keyword">true</span>);</div><div class="line"><span class="comment">// startTag中的第一个参数是命名空间 命名空间是用来避免多个文件中的标签命名冲突的 此处填null即可</span></div><div class="line">xmlSerializer.startTag(<span class="keyword">null</span>,<span class="string">"map"</span>);</div><div class="line"><span class="comment">// 下三行表示写入&lt;username&gt;abc&lt;/username&gt;</span></div><div class="line">xmlSerializer.startTag(<span class="keyword">null</span>,<span class="string">"username"</span>);</div><div class="line">xmlSerializer.text(<span class="string">"abc"</span>);</div><div class="line">xmlSerializer.endTag(<span class="keyword">null</span>,<span class="string">"username"</span>);</div><div class="line"></div><div class="line">xmlSerializer.startTag(<span class="keyword">null</span>,<span class="string">"password"</span>);</div><div class="line">xmlSerializer.text(<span class="string">"123"</span>);</div><div class="line">xmlSerializer.endTag(<span class="keyword">null</span>,<span class="string">"password"</span>);</div><div class="line"></div><div class="line">xmlSerializer.endTag(<span class="keyword">null</span>,<span class="string">"map"</span>);</div><div class="line"><span class="comment">// 结束写文档</span></div><div class="line">xmlSerializer.endDocument();</div></pre></td></tr></table></figure>
<h2 id="解析Xml文件"><a href="#解析Xml文件" class="headerlink" title="解析Xml文件"></a>解析Xml文件</h2><h3 id="解析Xml的方式"><a href="#解析Xml的方式" class="headerlink" title="解析Xml的方式"></a>解析Xml的方式</h3><ol>
<li>DOM解析</li>
<li>SAX解析</li>
<li>Pull解析(与SAX解析类似)</li>
</ol>
<h3 id="使用Pull解析器解析Xml文件案例"><a href="#使用Pull解析器解析Xml文件案例" class="headerlink" title="使用Pull解析器解析Xml文件案例"></a>使用Pull解析器解析Xml文件案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用于显示最后解析结果的字符串</span></div><div class="line">String result = <span class="string">""</span>;</div><div class="line"><span class="comment">// 创建Pull解析器</span></div><div class="line">XmlPullParser pullParser = Xml.newPullParser();</div><div class="line"><span class="comment">// 创建输入流</span></div><div class="line">FileInputStream fid = context.openFileInput(<span class="string">"info.xml"</span>);</div><div class="line"><span class="comment">// 绑定流</span></div><div class="line">pullParser.setInput(fix,<span class="string">"utf-8"</span>);</div><div class="line"><span class="comment">// 开始解析文件</span></div><div class="line"><span class="comment">// 1.获取事件的类型(类型包括：开标签 文本 闭标签 标签属性 开始文档的类型 结束文档的类型)</span></div><div class="line"><span class="keyword">int</span> eventType = pullParser.getEventType();</div><div class="line"></div><div class="line"><span class="comment">// 用while循环 循环解析文件 直至结尾</span></div><div class="line"><span class="keyword">while</span>(eventType!=XmlPullParser.END_DOCUMENT)&#123;</div><div class="line">    <span class="keyword">if</span>(eventType==XmlPullParser.START_TAG)&#123;</div><div class="line">        <span class="keyword">if</span>(pullParser.getName().equals(<span class="string">"username"</span>))&#123;</div><div class="line">            result += <span class="string">" username="</span>+pullParser.nextText();</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pullParser.getName().equals(<span class="string">"passwrod"</span>))&#123;</div><div class="line">            result += <span class="string">" passwrod="</span>+pullParser.nextText();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 获取下一个标签</span></div><div class="line">    eventType = pullParser.next();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用Pull解析器解析Android工程下assets目录中的xml文件案例"><a href="#使用Pull解析器解析Android工程下assets目录中的xml文件案例" class="headerlink" title="使用Pull解析器解析Android工程下assets目录中的xml文件案例"></a>使用Pull解析器解析Android工程下assets目录中的xml文件案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用于显示最后解析结果的字符串</span></div><div class="line">String result = <span class="string">""</span>;</div><div class="line"><span class="comment">// 获取AssetManager资源管理器</span></div><div class="line">AssetManager assets = getAssets();</div><div class="line"><span class="comment">// 读取文件</span></div><div class="line">InputStream fis = assets.open(<span class="string">"info.xml"</span>);</div><div class="line"><span class="comment">// 创建Pull解析器</span></div><div class="line">XmlPullParser pullParser = Xml.newPullParser();</div><div class="line"><span class="comment">// 创建输入流</span></div><div class="line">FileInputStream fid = context.openFileInput(<span class="string">"info.xml"</span>);</div><div class="line"><span class="comment">// 绑定流</span></div><div class="line">pullParser.setInput(fix,<span class="string">"utf-8"</span>);</div><div class="line"><span class="comment">// 开始解析文件</span></div><div class="line"><span class="comment">// 1.获取事件的类型(类型包括：开标签 文本 闭标签 标签属性 开始文档的类型 结束文档的类型)</span></div><div class="line"><span class="keyword">int</span> eventType = pullParser.getEventType();</div><div class="line"></div><div class="line"><span class="comment">// 用while循环 循环解析文件 直至结尾</span></div><div class="line"><span class="keyword">while</span>(eventType!=XmlPullParser.END_DOCUMENT)&#123;</div><div class="line">    <span class="keyword">if</span>(eventType==XmlPullParser.START_TAG)&#123;</div><div class="line">        <span class="keyword">if</span>(pullParser.getName().equals(<span class="string">"username"</span>))&#123;</div><div class="line">            result += <span class="string">" username="</span>+pullParser.nextText();</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pullParser.getName().equals(<span class="string">"passwrod"</span>))&#123;</div><div class="line">            result += <span class="string">" passwrod="</span>+pullParser.nextText();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 获取下一个标签</span></div><div class="line">    eventType = pullParser.next();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="SQLite数据库"><a href="#SQLite数据库" class="headerlink" title="SQLite数据库"></a>SQLite数据库</h2><blockquote>
<p>SQLite是一款轻型数据库，它包含在一个相对小的C库中，它的设计目标是嵌入式的，而且目前很多嵌入式产品中都使用了它,SQLite数据库占用资源相对较低，在嵌入式设备中可能只需要几百kb的内存就够了，并且它能够支持Windows/Linux/Unix等主流操作系统，同时能够跟很多编程语言相结合</p>
</blockquote>
<h3 id="创建SQLite数据库案例"><a href="#创建SQLite数据库案例" class="headerlink" title="创建SQLite数据库案例"></a>创建SQLite数据库案例</h3><h4 id="创建工具类DbOpenHelper"><a href="#创建工具类DbOpenHelper" class="headerlink" title="创建工具类DbOpenHelper"></a>创建工具类DbOpenHelper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> <span class="keyword">implements</span> <span class="title">BaseColumns</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 数据库文件名</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_NAME = <span class="string">"contact.db"</span>;</div><div class="line">    <span class="comment">// 数据库版本</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DB_VERSION = <span class="number">1</span>;</div><div class="line">    <span class="comment">// 数据表</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_NAME = <span class="string">"contactinfo"</span>;</div><div class="line">    <span class="comment">// 数据表的字段</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String _USERNAME = <span class="string">"username"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String _PHONE = <span class="string">"phone"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// CursorFactory 游标工厂类</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DbOpenHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, DB_NAME, <span class="keyword">null</span>, DB_VERSION);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 当数据库创建时会调用onCreate() 可以在这个方法中创建数据</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        <span class="comment">// 创建数据表sql语句</span></div><div class="line">        db.execSQL(<span class="string">"create table "</span> + TABLE_NAME + <span class="string">" ("</span> + _ID + <span class="string">" integer primary key autoincrement,"</span> +</div><div class="line">                _USERNAME + <span class="string">" text,"</span> + _PHONE + <span class="string">" text);"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 升级数据库 可以在这个方法中删除/添加/修改数据库表</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>BaseColumns接口提供了自增长的主键id方便使用，因此让DbOpenHelper实现这个接口<br>onCreate()方法在创建数据库时调用，此后不再调用<br>onUpgrade()方法在数据库更新时调用</p>
</blockquote>
<h4 id="调用DbOpenHelper类创建数据库"><a href="#调用DbOpenHelper类创建数据库" class="headerlink" title="调用DbOpenHelper类创建数据库"></a>调用DbOpenHelper类创建数据库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DbOpenHelper helper = <span class="keyword">new</span> DbOpenHelper();</div><div class="line"><span class="comment">// helper.getReadableDatabase(this);</span></div><div class="line">helper.getWritableDatabase();</div></pre></td></tr></table></figure>
<h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 插入方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertContact</span><span class="params">(String username,String phone)</span></span>&#123;</div><div class="line">	SQLiteDatabase db = mHelper.getWritableDatabase();</div><div class="line">	<span class="comment">//bindArgs 占位符所对应的值</span></div><div class="line">	db.execSQL(<span class="string">"insert into "</span>+DbOpenHelper.TABLE_NAME</div><div class="line">			+<span class="string">"("</span>+DbOpenHelper._USERNAME+<span class="string">","</span>+DbOpenHelper._PHONE+<span class="string">") values(?,?);"</span>,</div><div class="line">			<span class="keyword">new</span> String[]&#123;username,phone&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 更新方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateContact</span><span class="params">(String username,String newPhone)</span></span>&#123;</div><div class="line">	SQLiteDatabase db = mHelper.getWritableDatabase();</div><div class="line">	db.execSQL(<span class="string">"update contactinfo set phone=? where username=?;"</span>, </div><div class="line">			<span class="keyword">new</span> String[]&#123;newPhone,username&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 删除方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteContact</span><span class="params">(String username)</span></span>&#123;</div><div class="line">	SQLiteDatabase db = mHelper.getWritableDatabase();</div><div class="line">	db.execSQL(<span class="string">"delete from contactinfo where username=?;"</span>, </div><div class="line">			<span class="keyword">new</span> String[]&#123;username&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 查询方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryContact</span><span class="params">(String phone)</span></span>&#123;</div><div class="line">	SQLiteDatabase db = mHelper.getReadableDatabase();</div><div class="line">	<span class="comment">// cursor 游标</span></div><div class="line">	Cursor cursor = db.rawQuery(<span class="string">"select username from contactinfo where phone=?;"</span>,</div><div class="line">			<span class="keyword">new</span> String[]&#123;phone&#125;);</div><div class="line">	<span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">		String username = cursor.getString(<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用SQLite3工具查看数据库"><a href="#使用SQLite3工具查看数据库" class="headerlink" title="使用SQLite3工具查看数据库"></a>使用SQLite3工具查看数据库</h3><ol>
<li>打开命令行</li>
<li>使用命令进入手机终端</li>
<li>进入数据库所在的应用程序的目录中</li>
<li>使用sqlite3 xxx.db命令进入数据库</li>
<li>命令行前缀变成”sqlite&gt;”表示已经成功进入数据库，此时可在命令行执行增删改查语句对数据库进行操作</li>
</ol>
<h3 id="使用SQLiteDatabase的方法进行增删改查"><a href="#使用SQLiteDatabase的方法进行增删改查" class="headerlink" title="使用SQLiteDatabase的方法进行增删改查"></a>使用SQLiteDatabase的方法进行增删改查</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">// 插入方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertContact</span><span class="params">(String username,String phone)</span></span>&#123;</div><div class="line">	SQLiteDatabase db = mHelper.getWritableDatabase();</div><div class="line">	<span class="comment">// ContentValues 内部维护了一个HashMap</span></div><div class="line">	ContentValues values=<span class="keyword">new</span> ContentValues();</div><div class="line">	<span class="comment">// key：字段名 value：值</span></div><div class="line">	values.put(DbOpenHelper._USERNAME, username);</div><div class="line">	values.put(DbOpenHelper._PHONE, phone);</div><div class="line">	</div><div class="line">	<span class="comment">// 返回值为新插入的行的id</span></div><div class="line">	db.insert(DbOpenHelper.TABLE_NAME, <span class="keyword">null</span> , values);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 更新方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateContact</span><span class="params">(String username,String newPhone)</span></span>&#123;</div><div class="line">	SQLiteDatabase db = mHelper.getWritableDatabase();</div><div class="line">	ContentValues values=<span class="keyword">new</span> ContentValues();</div><div class="line">	values.put(DbOpenHelper._PHONE, newPhone);</div><div class="line">	<span class="comment">// whereClause：where whereArgs：where语句的绑定值</span></div><div class="line">	<span class="comment">// 返回值为更新的行数</span></div><div class="line">	db.update(DbOpenHelper.TABLE_NAME,</div><div class="line">			values, DbOpenHelper._USERNAME+<span class="string">"=?"</span>, <span class="keyword">new</span> String[]&#123;username&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 删除方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteContact</span><span class="params">(String username)</span></span>&#123;</div><div class="line">	SQLiteDatabase db = mHelper.getWritableDatabase();</div><div class="line">	<span class="comment">// whereClause：where whereArgs：where语句的绑定值</span></div><div class="line">	<span class="comment">// 返回值为删除的行数</span></div><div class="line">	<span class="keyword">int</span> deleteRows = db.delete(DbOpenHelper.TABLE_NAME, <span class="string">"username=?"</span>, <span class="keyword">new</span> String[]&#123;username&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 查询方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryContact</span><span class="params">(String searchPhone)</span></span>&#123;</div><div class="line">	SQLiteDatabase db = mHelper.getReadableDatabase();</div><div class="line">       <span class="comment">// columns String[] 返回的字段</span></div><div class="line">	Cursor cursor = db.query(DbOpenHelper.TABLE_NAME, </div><div class="line">			<span class="keyword">new</span> String[]&#123;DbOpenHelper._USERNAME,DbOpenHelper._PHONE&#125;,</div><div class="line">			<span class="string">"phone=?"</span>, <span class="keyword">new</span> String[]&#123;searchPhone&#125;, </div><div class="line">			<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">	<span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">		<span class="comment">// 通过一个字段名获取该字段的索引</span></div><div class="line">		<span class="keyword">int</span> columnIndex = cursor.getColumnIndex(DbOpenHelper._USERNAME);</div><div class="line">		<span class="comment">// 通过一个字段的索引获取该字段的值</span></div><div class="line">		String username = cursor.getString(columnIndex);</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> phoneColumnIndex = cursor.getColumnIndex(DbOpenHelper._PHONE);</div><div class="line">		String phone = cursor.getString(phoneColumnIndex);</div><div class="line">		</div><div class="line">		result+=(username+<span class="string">"  "</span>+phone+<span class="string">" \n"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android基础-四&quot;&gt;&lt;a href=&quot;#Android基础-四&quot; class=&quot;headerlink&quot; title=&quot;Android基础(四)&quot;&gt;&lt;/a&gt;Android基础(四)&lt;/h1&gt;&lt;h2 id=&quot;Android中的数据存储的几种方式&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Android基础三</title>
    <link href="https://izdo.github.io/2017/12/04/Android%E5%9F%BA%E7%A1%80%E4%B8%89/"/>
    <id>https://izdo.github.io/2017/12/04/Android基础三/</id>
    <published>2017-12-04T12:45:34.885Z</published>
    <updated>2017-11-22T09:09:48.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android基础-三"><a href="#Android基础-三" class="headerlink" title="Android基础(三)"></a>Android基础(三)</h1><h2 id="尺寸单位"><a href="#尺寸单位" class="headerlink" title="尺寸单位"></a>尺寸单位</h2><h3 id="px-dp-sp的概念"><a href="#px-dp-sp的概念" class="headerlink" title="px,dp,sp的概念"></a>px,dp,sp的概念</h3><ul>
<li>px:电脑、电视上的分辨率的尺寸单位，像素是构成数码影像的基本单位，例如300x300分辨率，表示水平方向与垂直方向上每英寸长度上的像素数是300，也可表示为一平方英寸内有90000像素</li>
<li>dp:由于安卓手机的分辨率有很多种，因此不使用px作为单位，Android中采用与分辨率无关的度量单位dp来开发程序，dp和平时所说的dpi是一样的</li>
<li>sp:scaled pixels 放大像素，主要用于字体的大小<blockquote>
<p>android中由于各个手机的分辨率有所不同，因此提供了不同的drawable(ldpi、mdpi、hdpi、xhdpi等)文件夹让我们存放不同尺寸的图片由此来适配不同的手机</p>
</blockquote>
</li>
</ul>
<h2 id="LogCat的使用"><a href="#LogCat的使用" class="headerlink" title="LogCat的使用"></a>LogCat的使用</h2><ul>
<li><p>日志的原理<br><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog22/Blog22_1.png?raw=true" alt=""></p>
</li>
<li><p>等级拦截器  </p>
<ol>
<li>不同等级下显示的日志颜色不同</li>
<li>等级从低到高为 verbose -&gt; debug -&gt; info -&gt; warn -&gt; error</li>
<li>等级拦截器中，越高等级的拦截能不能拦截比它低等级的日志</li>
</ol>
</li>
<li><p>过滤器</p>
</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li>根据是否通过源代码<ol>
<li>白盒测试：通过源代码</li>
<li>黑盒测试：不通过源代码</li>
</ol>
</li>
<li>根据测试的精细程度(粒度)<ol>
<li>方法测试：只测试某个方法的功能</li>
<li>单元测试：测试一个/多个方法</li>
<li>集成测试：测试某个功能</li>
<li>系统测试：测试同一个产品下不同的软件</li>
</ol>
</li>
<li>根据测试的暴力程度<ol>
<li>压力测试：在某个时间点内做一个重复的频繁操作</li>
<li>冒烟测试：在某个时间点内做一个随机的频繁操作</li>
</ol>
</li>
</ul>
<h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><ul>
<li><p>获取控件上的值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">控件.getText();</div></pre></td></tr></table></figure>
</li>
<li><p>判断字符串是否为空</p>
<blockquote>
<p>if(TextUtils.isEmpty(xxx)) 相当于 if(xxx.equals(“”)||xxx==null)</p>
</blockquote>
</li>
</ul>
<h2 id="内部存储目录文件的访问模式"><a href="#内部存储目录文件的访问模式" class="headerlink" title="内部存储目录文件的访问模式"></a>内部存储目录文件的访问模式</h2><ul>
<li>drwxrwxrwx：<ol>
<li>1    d</li>
<li>2-4  rwx 用户权限</li>
<li>5-7  rwx 组权限</li>
<li>8-10 rwx 其他权限</li>
</ol>
</li>
</ul>
<h2 id="应用访问模式"><a href="#应用访问模式" class="headerlink" title="应用访问模式"></a>应用访问模式</h2><ul>
<li>MODE_APPEND：当文件存在时再次写入在此文件结尾追加</li>
<li>MODE_PRIVATE：对其他应用私有化，本应用可读可写</li>
<li>MODE_WORLD_READABLE：任何应用都能读取</li>
<li><p>MODE_WORLD_WRITEABLE：任何应用都能写入</p>
</li>
<li><p>手机内部存储文件夹通过Environment.getDataDirectory()获得</p>
</li>
<li>手机外部存储文件夹通过Environment.getExternalStorageDirectory()获得</li>
<li>判断SD卡是否挂载：if(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))</li>
</ul>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><blockquote>
<p>可将文件写入cache(通过getCacheDir()方法)或者files(通过getFileDir()方法)文件夹方便读取</p>
</blockquote>
<h2 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h2><ul>
<li><p>使用SharedPreferences存储数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SharedPreferences sp = getSharedPreferences(<span class="string">"(文件名)"</span>,(模式，一般使用MODE_PRIVATE));</div><div class="line"><span class="comment">// 获取Editor</span></div><div class="line">Editor editor = sp.edit();</div><div class="line"><span class="comment">// 存储数据 键值对形式</span></div><div class="line">editor.putString(<span class="string">"username"</span>,username);</div><div class="line"><span class="comment">// 提交事务</span></div><div class="line">editor.commit();</div></pre></td></tr></table></figure>
</li>
<li><p>使用SharedPreferences读取数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SharedPreferences sp = getSharedPreferences(<span class="string">"(文件名)"</span>,(模式，一般使用MODE_PRIVATE));</div><div class="line"><span class="comment">// 读取数据</span></div><div class="line">sp.getString(<span class="string">"username"</span>,<span class="string">"(默认值)"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android基础-三&quot;&gt;&lt;a href=&quot;#Android基础-三&quot; class=&quot;headerlink&quot; title=&quot;Android基础(三)&quot;&gt;&lt;/a&gt;Android基础(三)&lt;/h1&gt;&lt;h2 id=&quot;尺寸单位&quot;&gt;&lt;a href=&quot;#尺寸单位&quot; class
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Android基础二</title>
    <link href="https://izdo.github.io/2017/12/04/Android%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
    <id>https://izdo.github.io/2017/12/04/Android基础二/</id>
    <published>2017-12-04T12:45:32.885Z</published>
    <updated>2017-11-21T11:52:16.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android基础-二"><a href="#Android基础-二" class="headerlink" title="Android基础(二)"></a>Android基础(二)</h1><h2 id="View的属性"><a href="#View的属性" class="headerlink" title="View的属性"></a>View的属性</h2><ul>
<li>控件的宽高<ol>
<li>android:layout_width=”30dp”：固定值(单位dp)</li>
<li>android:layout_width=”wrap_content”：包裹内容</li>
<li>android:layout_width=”match_parent”：填充父窗体</li>
</ol>
</li>
<li>控件的可见度<ol>
<li>android:visibility=”visible”：可见 </li>
<li>android:visibility=”invisible”：不可见，控件占据位置</li>
<li>android:visibility=”gone”：不可见，控件不占据位置</li>
</ol>
</li>
<li>控件的背景<ol>
<li>android:background=”#F00”：填充颜色(可填充3/4/6/8位颜色值(8位颜色前两位表示透明度))</li>
<li>android:background=”@drawable/icon”：填充图片</li>
</ol>
</li>
<li>控件的微调<ol>
<li>android:layout_margin=”xxdp”：外边距</li>
<li>android:padding=”xxdo”：内边距</li>
</ol>
</li>
</ul>
<h2 id="ViewGroup的子类–五大布局"><a href="#ViewGroup的子类–五大布局" class="headerlink" title="ViewGroup的子类–五大布局"></a>ViewGroup的子类–五大布局</h2><ol>
<li>LinearLayout 线性布局</li>
<li>RelativeLayout 相对布局</li>
<li>FrameLayout 帧布局</li>
<li>AbsoluteLayout 绝对布局</li>
<li>TableLayout 表格布局</li>
</ol>
<h3 id="LinearLayout"><a href="#LinearLayout" class="headerlink" title="LinearLayout"></a>LinearLayout</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li>指定布局方向<ol>
<li>android:orientation=”vertical”:垂直布局</li>
<li>android:orientation=”horizontal”:水平布局</li>
</ol>
</li>
<li>权重(只能在LinearLayout的子控件中使用):android:layout_weight=”(数字)”</li>
</ul>
<h3 id="RelativeLayout"><a href="#RelativeLayout" class="headerlink" title="RelativeLayout"></a>RelativeLayout</h3><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><ul>
<li>相对于父控件<ol>
<li>android:layout_centerHorizontal=”true”：水平居中</li>
<li>android:layout_centerVertical=”true”：垂直居中</li>
<li>android:layout_centerInParent=”true”：相对于父控件居中</li>
<li>android:layout_alignParentLeft=”true”：相对于父控件左方向对齐</li>
<li>android:layout_alignParentRight=”true”：相对于父控件右方向对齐</li>
<li>android:layout_alignParentTop=”true”：相对于父控件顶部对齐</li>
<li>android:layout_alignParentBottom=”true”：相对于父控件底部对齐</li>
</ol>
</li>
<li>相对于同等级控件<ol>
<li>android:layout_above=”(某控件id)”：位于某控件顶部</li>
<li>android:layout_below=”(某控件id)”：位于某控件底部</li>
<li>android:layout_toLeftOf=”(某控件id)”：位于某控件左方</li>
<li>android:layout_toRightOf=”(某控件id)”：位于某控件右方</li>
<li>android:layout_alignLeft=”(某控件id)”：与某控件左方对齐</li>
<li>android:layout_alignRight=”(某控件id)”：与某控件右方对齐</li>
<li>android:layout_alignTop=”(某控件id)”：与某控件顶部对齐</li>
<li>android:layout_alignBottom=”(某控件id)”：与某控件底部对齐</li>
</ol>
</li>
</ul>
<h3 id="FrameLayout"><a href="#FrameLayout" class="headerlink" title="FrameLayout"></a>FrameLayout</h3><blockquote>
<p>所有控件位于左上角(坐标系原点)，并一层一层往上覆盖</p>
</blockquote>
<h3 id="TableLayout"><a href="#TableLayout" class="headerlink" title="TableLayout"></a>TableLayout</h3><h4 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h4><ul>
<li><tablerow>标签：添加一行</tablerow></li>
</ul>
<h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><h3 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h3><ul>
<li>android:text=””：文本文字</li>
<li>android:textSize=”xxsp”：文字大小(单位sp)</li>
<li>android:textColor=“(颜色值)”：文字颜色</li>
<li>android:textStyle=”normal/bold/italic”：文字样式(normal：正常/bold：粗体/italic：斜体)，默认为normal</li>
<li>android:lines=”(数字)”：控制行数</li>
<li>android:ellipsize=”end”：尾部若为显示完全则添加省略号</li>
<li>android:singleLine=”true”：单行并且尾部若为显示完全则添加省略号</li>
<li>android:typeface=”normal/sans/serif/monospace”：字体风格</li>
<li>android:clickable=”true”：设置TextView可点击(TextView也可设置点击事件)</li>
</ul>
<h2 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h2><h3 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h3><ul>
<li>android:hint=”(提示信息)”：提示文本</li>
<li>android:editable=”false”：设置不可编辑</li>
<li>android:maxLength=”10”：最大输入字数</li>
<li>android:inputType=”textPassword/numberPassword/number等”：输入风格</li>
</ul>
<h2 id="ToggleButton"><a href="#ToggleButton" class="headerlink" title="ToggleButton"></a>ToggleButton</h2><h3 id="属性-5"><a href="#属性-5" class="headerlink" title="属性"></a>属性</h3><ul>
<li>android:textOn=””：按钮打开时的文本信息</li>
<li>android:textOff=””：按钮关闭时的文本信息</li>
</ul>
<h2 id="RadioButton"><a href="#RadioButton" class="headerlink" title="RadioButton"></a>RadioButton</h2><h3 id="属性-6"><a href="#属性-6" class="headerlink" title="属性"></a>属性</h3><ul>
<li>android:cchecked=”true”：默认选中<blockquote>
<p>使用多个RadioButton需要用RadioGroup将其包起来<br>通过RadioGroup设置CheckedChangeListener获取用户选择的RadioButton</p>
</blockquote>
</li>
</ul>
<h2 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h2><h3 id="属性-7"><a href="#属性-7" class="headerlink" title="属性"></a>属性</h3><ul>
<li>android:button=””：选择框样式<blockquote>
<p>通过CheckBox设置CheckedChangeListener获取用户勾选的CheckBox</p>
</blockquote>
</li>
</ul>
<h2 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h2><blockquote>
<p>ProgressBar分为圆型和直线型，直线型可直观的看出当前进度，原型不能。</p>
<h3 id="属性-8"><a href="#属性-8" class="headerlink" title="属性"></a>属性</h3><ul>
<li>style=””：进度条的样式</li>
<li>android:max=”(数字)”：总进度</li>
<li>android:progress=”(数字)”：当前进度</li>
</ul>
</blockquote>
<h2 id="SeekBar"><a href="#SeekBar" class="headerlink" title="SeekBar"></a>SeekBar</h2><blockquote>
<p>可拖动的进度条</p>
</blockquote>
<h2 id="RatingBar"><a href="#RatingBar" class="headerlink" title="RatingBar"></a>RatingBar</h2><blockquote>
<p>星星进度条</p>
<h3 id="属性-9"><a href="#属性-9" class="headerlink" title="属性"></a>属性</h3><ul>
<li>android:numStars=”(数字)”：星星个数</li>
<li>android:raing=”(数字)”：默认选中星星个数</li>
<li>stepSize=”(数字)”：步长</li>
</ul>
</blockquote>
<h2 id="Imageview"><a href="#Imageview" class="headerlink" title="Imageview"></a>Imageview</h2><h3 id="属性-10"><a href="#属性-10" class="headerlink" title="属性"></a>属性</h3><ul>
<li>android:src=””：设置图片资源</li>
<li>android:scaleType=””：设置缩放模式<br><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog21/Blog21_1.png?raw=true" alt=""><blockquote>
<p>在Java代码中可通过ImageView.setImageResource()设置图片资源<br>中可通过ImageView.setImageBitmap()设置位图，位图可通过文件获取，也可通过网络获取</p>
</blockquote>
</li>
</ul>
<h2 id="ScrollView和HorizontalScrollView"><a href="#ScrollView和HorizontalScrollView" class="headerlink" title="ScrollView和HorizontalScrollView"></a>ScrollView和HorizontalScrollView</h2><blockquote>
<p>上下滑动和左右滑动的控件，将需要滑动的控件包含到ScrollView中即可实现滑动，但是不能直接包含2个子控件</p>
</blockquote>
<h2 id="DatePicker"><a href="#DatePicker" class="headerlink" title="DatePicker"></a>DatePicker</h2><blockquote>
<p>日期选择器，不同Android版本的DatePicker有不同的风格<br>DatePicker在init时，注意Month的取值是从0~11</p>
</blockquote>
<h2 id="TimePicker"><a href="#TimePicker" class="headerlink" title="TimePicker"></a>TimePicker</h2><blockquote>
<p>TimePicker的setIs24HourView()方法可将其改为24小时制</p>
</blockquote>
<h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><ul>
<li>在使用WebView之前需先添加上网的权限，在清单文件中添加：<uses-permission android:name="android.permission.INTERNET"><h3 id="WebView的方法"><a href="#WebView的方法" class="headerlink" title="WebView的方法"></a>WebView的方法</h3></uses-permission></li>
<li>loadUrl(String url)：接收一个网址并加载此网页</li>
<li>处理跳转时打开新的浏览器的问题</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">webView.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view,String url)</span></span>&#123;</div><div class="line">        view.loadUrl(url);</div><div class="line">        <span class="comment">// 通知系统不需要打开新的浏览器 返回true</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>让WebView支持JavaScript<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Shape属性"><a href="#Shape属性" class="headerlink" title="Shape属性"></a>Shape属性</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">...</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- stroke 边框 color 边框的颜色 width 边框的粗细 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">stoke</span> <span class="attr">android:color</span>=<span class="string">"#fff"</span> <span class="attr">android:width</span>=<span class="string">"1dp"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- solid 填充颜色 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#fff"</span> /&gt;</span></div><div class="line">     <span class="comment">&lt;!-- corners 设置圆角 radius 圆角半径 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"2dp"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Selector属性"><a href="#Selector属性" class="headerlink" title="Selector属性"></a>Selector属性</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">...</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 当点击时 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">andoid:state_pressed</span>=<span class="string">"true"</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/xxx"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>selector可在item中嵌套shape</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">...</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 当点击时 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></div><div class="line">            ...</div><div class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="layer-list属性"><a href="#layer-list属性" class="headerlink" title="layer-list属性"></a>layer-list属性</h2><blockquote>
<p>一般用于progressBar</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">...</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 进度条 背景图 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/xxx"</span> <span class="attr">android:id</span>=<span class="string">"@android:id/background"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 进度条 进度图 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/xxx"</span> <span class="attr">android:id</span>=<span class="string">"@android:id/progress"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="9patch-9图片"><a href="#9patch-9图片" class="headerlink" title="9patch .9图片"></a>9patch .9图片</h2><blockquote>
<p>为了避免图片和控件的尺寸不匹配而导致被拉伸的问题，Android提供了draw9patch.bat工具，此工具可将普通图片改造成.9图片，由我们自己指定一个拉伸的区域(矩形)，当图片被拉伸时，系统会拉伸我们指定的区域而不是将整张图片拉伸</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android基础-二&quot;&gt;&lt;a href=&quot;#Android基础-二&quot; class=&quot;headerlink&quot; title=&quot;Android基础(二)&quot;&gt;&lt;/a&gt;Android基础(二)&lt;/h1&gt;&lt;h2 id=&quot;View的属性&quot;&gt;&lt;a href=&quot;#View的属性&quot;
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Android基础一</title>
    <link href="https://izdo.github.io/2017/12/04/Android%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
    <id>https://izdo.github.io/2017/12/04/Android基础一/</id>
    <published>2017-12-04T12:45:25.006Z</published>
    <updated>2017-11-21T11:44:39.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android基础-一"><a href="#Android基础-一" class="headerlink" title="Android基础(一)"></a>Android基础(一)</h1><h2 id="移动通讯技术"><a href="#移动通讯技术" class="headerlink" title="移动通讯技术"></a>移动通讯技术</h2><h3 id="第一代通讯技术"><a href="#第一代通讯技术" class="headerlink" title="第一代通讯技术"></a>第一代通讯技术</h3><blockquote>
<p>大哥大<br>模拟信号 工作频段<br>缺点：保密性差</p>
</blockquote>
<h3 id="第二代通讯技术"><a href="#第二代通讯技术" class="headerlink" title="第二代通讯技术"></a>第二代通讯技术</h3><blockquote>
<p>从模拟信号转变为数字信号<br>拥有发送短信、彩信的功能(某些2G系统中也支持资料传输与传真)。</p>
</blockquote>
<h3 id="第三代通讯技术"><a href="#第三代通讯技术" class="headerlink" title="第三代通讯技术"></a>第三代通讯技术</h3><blockquote>
<p>采用数字通讯的方式<br>可处理图像、音乐、视频等多种媒体形式</p>
</blockquote>
<h3 id="第四代通讯技术"><a href="#第四代通讯技术" class="headerlink" title="第四代通讯技术"></a>第四代通讯技术</h3><blockquote>
<p>集3G和无线局域网络于一体  </p>
</blockquote>
<h2 id="Android发展史"><a href="#Android发展史" class="headerlink" title="Android发展史"></a>Android发展史</h2><blockquote>
<p>安迪-鲁宾(Andy Rubin)：Android创始人</p>
<h3 id="Android版本"><a href="#Android版本" class="headerlink" title="Android版本"></a>Android版本</h3><p>1.5 Cupcake：纸杯蛋糕<br>1.6 Donut：甜甜圈<br>2.1 Éclair：闪电泡芙、法式奶油夹心甜点、松饼<br>2.2 Froyo：冻酸奶<br>2.3 Gingerbread：姜饼<br>3.0 Honeycomb：蜂巢<br>4.0 Ice Cream Sandwich：冰激凌三明治<br>4.1、4.2 Jelly Bean：果冻豆<br>4.4 KitKat：奇巧巧克力棒<br>5.0 Lolipop：棒棒糖<br>6.0 Marshmallow：棉花糖<br>7.0 Nougat：牛轧糖<br>8.0 Oreo：奥利奥</p>
</blockquote>
<h2 id="Android系统体系结"><a href="#Android系统体系结" class="headerlink" title="Android系统体系结"></a>Android系统体系结</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog20/Blog20_1.jpg?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>  
<p><a href="https://www.cnblogs.com/xiaoluo501395377/p/3389411.html" target="_blank" rel="external">Android的系统体系架构</a></p>
<h2 id="Android虚拟机"><a href="#Android虚拟机" class="headerlink" title="Android虚拟机"></a>Android虚拟机</h2><blockquote>
<p>Dalvik Virtual Machine(DVM)</p>
<h3 id="JVM与DVM的区别"><a href="#JVM与DVM的区别" class="headerlink" title="JVM与DVM的区别"></a>JVM与DVM的区别</h3><ul>
<li>编译方式<br>jvm: .java -&gt; .class -&gt; .jar<br>dvm: .java -&gt; .class -&gt; .dex(相比.jar文件更小) </li>
<li>架构<br>jvm: 基于栈的结构<br>dvm：基于寄存器的结构(离CPU更接近)</li>
</ul>
</blockquote>
<h2 id="Android开发工具介绍"><a href="#Android开发工具介绍" class="headerlink" title="Android开发工具介绍"></a>Android开发工具介绍</h2><ul>
<li>Android SDK:Android standard develop kits 安卓开发工具集  </li>
<li>build-tools:编译工具</li>
<li>extras:兼容低版本开发</li>
<li>platforms:主要储存不同的安卓版本</li>
<li>platform-tools:Android开发所需工具</li>
<li>sources:Android(Java层)应用层的源代码</li>
<li>DDMS:Dalvik Debug Monitor Service,是Android开发环境中的Dalvik虚拟机调试监控服务。</li>
</ul>
<h2 id="Android工程目录解析"><a href="#Android工程目录解析" class="headerlink" title="Android工程目录解析"></a>Android工程目录解析</h2><ul>
<li>src：放置Java源代码的目录</li>
<li>gen：放置自动生成的Java文件的目录</li>
<li>assets：放置资源文件的目录</li>
<li>res：<ol>
<li>drawable–图片资源文件</li>
<li>layout–布局文件</li>
<li>menu–菜单文件</li>
<li>values<ol>
<li>colors–颜色文件  </li>
<li>dimens–尺寸文件</li>
<li>strings–文字(字符串)文件</li>
<li>styles–样式文件</li>
</ol>
</li>
</ol>
</li>
<li>AndroidManifest：清单文件</li>
</ul>
<h2 id="应用程序编译安装过程"><a href="#应用程序编译安装过程" class="headerlink" title="应用程序编译安装过程"></a>应用程序编译安装过程</h2><ol>
<li>把所有的.java文件编译成.class文件(通过jdk的javac.exe)</li>
<li>把所有的.class字节码文件打包合成一个文件classes.dex(通过dx.bat)</li>
<li>根据资源id，生成一个resources.ap_文件，保存所有的资源信息</li>
<li>res目录下的资源文件，resources.ap_文件，asset目录下的文件合成一起打包成一个apk文件(通过appt.exe)</li>
<li>adb.exe负责把生成好的apk文件上传安装到手机里面(通过Adb(Android debug bridge：安卓调试桥)负责上传安装apk)</li>
</ol>
<h2 id="adb命令"><a href="#adb命令" class="headerlink" title="adb命令"></a>adb命令</h2><ul>
<li>安装一个应用程序：adb install xxx.apk</li>
<li>卸载一个应用程序：adb uninstall com.xxx.xxx</li>
<li>进入手机终端(由于安卓系统基于Linux系统，所以可执行Linux终端命令)：adb shell</li>
<li>杀死adb调试桥(当调试桥不稳定的时候)：adb kill-server</li>
<li>启动adb调试桥：adb start-server</li>
<li>查看连接到电脑上的设备：adb devices</li>
<li>指定设备执行的adb指令：adb -s xxx install xxx.apk</li>
</ul>
<h2 id="按钮的四种点击事件"><a href="#按钮的四种点击事件" class="headerlink" title="按钮的四种点击事件"></a>按钮的四种点击事件</h2><ol>
<li>在xml布局对应的按钮中添加onclick属性，属性值为xxx，在Java代码中实现onclick方法(public void xxx(View v))</li>
<li>button.setOnclickListener(this)，并实现OnclickListener接口，实现onClick方法</li>
<li>button.setOnclickListener(new OnclickListener)，使用匿名方式实现onClick方法</li>
<li>自定义MyOnclickListener类并实现OnclickListener接口，需要时继承此类即可</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android基础-一&quot;&gt;&lt;a href=&quot;#Android基础-一&quot; class=&quot;headerlink&quot; title=&quot;Android基础(一)&quot;&gt;&lt;/a&gt;Android基础(一)&lt;/h1&gt;&lt;h2 id=&quot;移动通讯技术&quot;&gt;&lt;a href=&quot;#移动通讯技术&quot; c
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>内存优化(下)</title>
    <link href="https://izdo.github.io/2017/09/03/%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96(%E4%B8%8B)/"/>
    <id>https://izdo.github.io/2017/09/03/内存优化(下)/</id>
    <published>2017-09-03T07:24:49.475Z</published>
    <updated>2017-09-03T07:23:51.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存优化-下"><a href="#内存优化-下" class="headerlink" title="内存优化(下)"></a>内存优化(下)</h1><h2 id="内存优化—减少内存使用（Reduce）"><a href="#内存优化—减少内存使用（Reduce）" class="headerlink" title="内存优化—减少内存使用（Reduce）"></a>内存优化—减少内存使用（Reduce）</h2><p>如果减少某些不必要内存的使用，也可以达到内存优化的目的。</p>
<p>比如说Bitmap。它在使用时会花掉较多的内存。那我们就可以考虑在应用bitmap时减少某些不必要内存的使用。</p>
<ul>
<li><p>边界压缩：一张拍出来的图片分辨率可能会很大，如果不做压缩去展示的话，会消耗大量内存，可能造成OOM，通过BitmapFactory.Options去设置inSampleSize，可以对图片进行边界的压缩，减少内存开销。（做法：先设置BitmapFactory.inJustDecodeBounds为true，然后decodeFile，这样将会只去解析图片大小等信息，避免了将原图加载进内存。拿到原图尺寸信息后，根据业务逻辑换算比例，设置inSampleSize，接着设置BitmapFactory.inJustDecodeBounds为false，最后再去decodeFile，从而实现对图片边界大小进行了压缩再展示。）</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_1.jpg?raw=true" alt=""></p>
</li>
<li><p>色彩压缩：除此之外，还可以通过设置Bitmap图片的Config配置来减少内存使用。配置有以下四种：</p>
<blockquote>
<p>ALPHA_8（Alpha由8位组成，代表8位Alpha位图）</p>
<p>ARGB_4444（由4个4位组成即16位，代表16位ARGB位图）</p>
<p>ARGB_8888（由4个8位组成即32位，代表32位ARGB位图，图片质量最佳）</p>
<p>RGB_565（R为5位，G为6位，B为5位，共16位，它是没有透明度的）</p>
</blockquote>
<p>如果配置不一样，需要的内存也不同。比如ARGB4444、ARGB8888、RGB565。配置的位数越高，图片质量越佳，当然需要的内存就越多。如果图片不需要透明度，就采用RGB565的配置。通过Bitmap.Config配置，也可以起到压缩图片大小作用。</p>
<p>在实际中，可以通过以下代码来进行图片转bitmap解码时的Config。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">options.inPreferredConfig = Bitmap.Config.RGB_565;</div><div class="line">Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.ic_menu_add, options);</div></pre></td></tr></table></figure>
</li>
<li><p>如果通过在列表中展示缩略图的形式来加载图片，如果需要查看高清图片，另启动一个页面（对话框）来加载高清图片，这样可以避免在列表中加载太多高清图片，减少内存开销。</p>
</li>
</ul>
<h2 id="内存优化—回收（Recycle）"><a href="#内存优化—回收（Recycle）" class="headerlink" title="内存优化—回收（Recycle）"></a>内存优化—回收（Recycle）</h2><p>一些资源时使用时记得回收，比如说<strong>BraodcastReceiver，ContentObserver，File，Cursor，Stream，Bitmap</strong>、<strong>TypeArray</strong>等资源的代码，应该在使用之后或者Activity销毁时及时关闭或者注销，否则这些资源可能将不会被回收，造成内存泄漏。</p>
<h2 id="内存优化—重用（Reuse）"><a href="#内存优化—重用（Reuse）" class="headerlink" title="内存优化—重用（Reuse）"></a>内存优化—重用（Reuse）</h2><h3 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h3><p>在程序里面经常会遇到的一个问题是短时间内创建大量的对象，导致内存紧张，从而触发GC导致性能问题。对于这个问题，我们可以使用对象池技术来解决它。通常对象池中的对象可能是bitmaps，views，messages等等。</p>
<p>比如说Message.obtain()方法。通过handler去发消息Message时，通过Message.obtain()来获得一个消息，就比直接通过new一个Message要更好。因为Message中内部就维护了一个对象池用来存放消息，通过obtain方法来取消息的话，会先从内部的对象池中去取，如果取不到，再去新创建一个消息进行使用。</p>
<p>关于对象池的操作原理，请看下面的图示：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_2.png?raw=true" alt=""></p>
<p>使用对象池技术有很多好处，它可以避免内存抖动，提升性能，但是在使用的时候有一些内容是需要特别注意的。通常情况下，初始化的对象池里面都是空白的，当使用某个对象的时候先去对象池查询是否存在，如果不存在则创建这个对象然后加入对象池。</p>
<p>但是我们也可以在程序刚启动的时候就事先为对象池填充一些即将要使用到的数据，这样可以在需要使用到这些对象的时候提供更快的首次加载速度，这种行为就叫做<strong>预分配</strong>。</p>
<p>使用对象池也有不好的一面，我们需要手动管理这些对象的分配与释放，所以我们需要慎重地使用这项技术，避免发生对象的内存泄漏。为了确保所有的对象能够正确被释放，我们需要保证加入对象池的对象和其他外部对象没有互相引用的关系。</p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>无论是为了提高CPU的计算速度还是提高数据的访问速度，在绝大多数的场景下，我们都会使用到缓存。</p>
<p>例如缓存到内存里面的图片资源，网络请求返回数据的缓存等等。凡是可能需要反复读取的数据，都建议使用合适的缓存策略。比如图片三级缓存、ListView中的Adapter使用contentView进行复用、使用holder避免重复的findViewById。再比如以下的代码，都是缓存的体现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原代码</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(i&lt;getCount())&#123;</div><div class="line">        Log.d(<span class="string">"TAG"</span>, <span class="string">"some log"</span> + i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//有缓存体现的代码，避免重复调用1024次getCount方法</span></div><div class="line"><span class="keyword">int</span> count = getCount();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(i&lt;count)&#123;</div><div class="line">        Log.d(<span class="string">"TAG"</span>, <span class="string">"some log"</span> + i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="缓存中的lru算法"><a href="#缓存中的lru算法" class="headerlink" title="缓存中的lru算法"></a>缓存中的lru算法</h4><p>lru算法（Least Recently Use），即最近最少使用算法，在Android中比较常用。当内存超过限定大小时，凡是近时间内最少使用的那一个对象，就会从缓存容器中被移除掉。</p>
<p>LRU Cache的基础构建用法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//往缓存中添加图片，PicUrl是图片的地址，将其作为key，bitmap位图则作为value</span></div><div class="line">bitmapLRUCache.put(picUrl,bitmap);</div><div class="line"><span class="comment">//通过picUrl图片地址，从缓存中取bitmap</span></div><div class="line">bitmapLRUCache.get(picUrl);</div></pre></td></tr></table></figure>
<p>为了给LRU Cache设置一个比较合理的缓存大小值，我们通常是用下面的方法来做界定的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当前应用最大可用内存</span></div><div class="line"><span class="keyword">long</span> maxMemory = Runtime.getRuntime().maxMemory();</div><div class="line"><span class="comment">//创建一个LRUCache，设置缓存大小界限为最大可用内存的八分之一</span></div><div class="line">BitmapLRUCache bitmapLRUCache = <span class="keyword">new</span> BitmapLRUCache((<span class="keyword">int</span>)maxMemory / <span class="number">8</span>);</div></pre></td></tr></table></figure>
<p>使用LRU Cache时为了能够让Cache知道每个加入的Item的具体大小，我们需要Override下面的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitmapLRUCache</span> <span class="keyword">extends</span> <span class="title">LruCache</span>&lt;<span class="title">String</span>,<span class="title">Bitmap</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitmapLRUCache</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(maxSize);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> byteCount = value.getByteCount();<span class="comment">//该bitmap位图所占用的内存字节数</span></div><div class="line">        <span class="keyword">return</span> byteCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="内存优化—检查（Review）"><a href="#内存优化—检查（Review）" class="headerlink" title="内存优化—检查（Review）"></a>内存优化—检查（Review）</h2><p>代码写完了只是个开始。比较规范的编码，都需要Review的。代码检查时的注意点可参考上述内容。</p>
<p>接下来要提到的是UI检查。</p>
<h3 id="查看UI布局是否过度绘制（overdraw）"><a href="#查看UI布局是否过度绘制（overdraw）" class="headerlink" title="查看UI布局是否过度绘制（overdraw）"></a>查看UI布局是否过度绘制（overdraw）</h3><p>查看的前提是：移动设备已经开启了<strong>开发者选项</strong>。</p>
<p>在开发者选项中，点击“调试GPU过度绘制”，将弹出对话框，然后选择“显示过度绘制区域”，如下图所示：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_3.jpg?raw=true" alt=""></p>
<p>屏幕这时候会变得花花绿绿的. 这些颜色是用来帮助你诊断应用程序的显示行为的。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_4.jpg?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这些颜色用于表示每个像素被重绘的次数, 含义如下：</p>
<blockquote>
<p>真实颜色: 没有被重绘</p>
<p>蓝色: 重绘一次</p>
<p>绿色: 重绘两次</p>
<p>粉色: 重绘三次</p>
<p>红色: 重绘四次或更多次 </p>
</blockquote>
<p><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_5.png?raw=true" alt=""></p>
<p>通过这个工具，可以实现这些事情：</p>
<ul>
<li>展示一个APP在何处做了不必要的渲染绘制。</li>
</ul>
<ul>
<li>帮助你查看在哪里可以减少渲染绘制。</li>
</ul>
<p>有些重绘是不可避免的. 尽量调整APP的用户界面, 目标是让大部分的屏幕都是真实的颜色以及重绘一次的蓝色。</p>
<h3 id="查看UI布局的渲染速度"><a href="#查看UI布局的渲染速度" class="headerlink" title="查看UI布局的渲染速度"></a>查看UI布局的渲染速度</h3><p>查看的前提是：移动设备已经开启了<strong>开发者选项</strong>。</p>
<p>在开发者选项中，点击“GPU呈现模式分析”，将弹出对话框，然后选择“在屏幕上显示为条形图”，如下图所示：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_6.jpg?raw=tru" alt=""></p>
<p>这时，将会在屏幕下方出现条形图，如下图所示：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_7.jpg?raw=tru" alt=""></p>
<p>该工具会为每个可见的APP显示一个图表，水平轴即时间流逝, 垂直轴表示每帧经过的时间,单位是毫秒。</p>
<p>在与APP的交互中, 垂直栏会显示在屏幕上, 从左到右移动, 随着时间推移，绘制帧的性能将会迅速体现出来。</p>
<p>绿色的线是用于标记16毫秒的分隔线（PS：人眼的原因, 1秒24帧的动画才能感到顺畅. 所以每帧的时间大概有41ms多一点点(1000ms/24). 但是但是, 注意了, 这41ms不是全都留给你<a href="http://www.07net01.com/tags-Java-0.html" target="_blank" rel="external">Java</a>代码, 而是所有java native 屏幕等等的, <strong>最后留给我们用java级别代码发挥的时间, 只有16~17ms</strong>），只要有一帧超过了绿线, 你的APP就会丢失一帧。</p>
<h3 id="查看UI布局的层级和实现方式"><a href="#查看UI布局的层级和实现方式" class="headerlink" title="查看UI布局的层级和实现方式"></a>查看UI布局的层级和实现方式</h3><p>有的UI界面写的效率比较低，我们可以通过一些工具来进行UI方面的视图检查。Hierarchy Viewer工具可以展示当前手机界面的View层级。</p>
<p>使用该工具的前提是：只能在模拟器或开发版手机上才能用，普通的商业手机是无法连上的。主要是出于安全考虑，普通商业手机中view server这个服务是没有开启的. Hierarchy Viewer就无法连接到机器获取view层级信息。（PS：如果愿意花功夫捣鼓，也可以在真机上强行开启View Server，详情见[网上资料][<a href="http://blog.csdn.net/autumn_xl/article/details/40741835]）" target="_blank" rel="external">http://blog.csdn.net/autumn_xl/article/details/40741835]）</a></p>
<p>先打开模拟器运行要查看的页面，然后打开Hierarchy Viewer工具，它位于android的sdk所在目录中，具体位置为…\sdk\tools\hierarchyviewer.bat。打开后如图所示：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_8.jpg?raw=tru" alt=""></p>
<p>列表展示手机中已打开的页面（包括状态栏等）。这里以电话应用中的DialtactsActivity为例，双击DialtactsActivity，将会打开关于该页面的树状图。如下图所示：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_9.jpg?raw=tru" alt=""></p>
<p>图中标出了3个部分：</p>
<ul>
<li><p>① Tree View：</p>
<p>树状图的形式展示该Activity中的View层级结构。可以放大缩小，每个节点代表一个View，点击可以弹出其属性的当前值，并且在LayoutView中会显示其在界面中相应位置。</p>
</li>
<li><p>② Tree Overview</p>
<p>它是Tree View的概览图。有一个选择框， 可以拖动选择查看。选中的部分会在Tree View中显示</p>
</li>
<li><p>③ Layout View</p>
<p>匹配手机屏幕的视图，如果在Tree View中点击了某个节点，呢么这个节点在手机中的真是位置将会在Layout View中以红框的形式被标出。</p>
</li>
</ul>
<p>接下来介绍点击Tree View中某个节点时，它所展示的信息类似于下图：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_10.jpg?raw=tru" alt=""></p>
<p>下面的三个圆点，依次表示Measure、Layout、Draw，可以理解为对应View的onMeasure，onLayout，onDraw三个方法的执行速度。</p>
<ul>
<li>绿色：表示该View的此项性能比该View Tree中超过50%的View都要快。</li>
<li>黄色：表示该View的此项性能比该View Tree中超过50%的View都要慢。</li>
<li>红色：表示该View的此项性能是View Tree中最慢的。</li>
</ul>
<p>如果界面中的Tree View中红点较多，那就需要注意了。一般的布局可能有以下几点：</p>
<ol>
<li>Measure红点，可能是布局中多次嵌套RelativeLayout，或是嵌套的LinearLayout都使用了weight属性。</li>
<li>Layout红点，可能是布局层级太深。</li>
<li>Draw红点，可能是自定义View的绘制有问题，复杂计算等。</li>
</ol>
<h2 id="UI布局优化"><a href="#UI布局优化" class="headerlink" title="UI布局优化"></a>UI布局优化</h2><h3 id="避免过度绘制-Overdraw"><a href="#避免过度绘制-Overdraw" class="headerlink" title="避免过度绘制(Overdraw)"></a>避免过度绘制(Overdraw)</h3><h3 id="减少布局层级"><a href="#减少布局层级" class="headerlink" title="减少布局层级"></a>减少布局层级</h3><h3 id="复用（id、style）"><a href="#复用（id、style）" class="headerlink" title="复用（id、style）"></a>复用（id、style）</h3><h3 id="使用include、merge、viewStub标签"><a href="#使用include、merge、viewStub标签" class="headerlink" title="使用include、merge、viewStub标签"></a>使用include、merge、viewStub标签</h3><h4 id="include标签"><a href="#include标签" class="headerlink" title="include标签"></a>include标签</h4><p>include标签常用于将布局中的公共部分提取出来供其他layout共用，以实现布局模块化，这在布局编写上提供了大大的便利。</p>
<p>下面以在一个布局main.xml中用include引入另一个布局foot.xml为例。main.mxl代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/simple_list_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"@dimen/dp_80"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/foot.xml"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 其中include引入的foot.xml为公用的页面底部，foot.xml代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/dp_40"</span></div><div class="line">        <span class="attr">android:layout_above</span>=<span class="string">"@+id/text"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/dp_40"</span></div><div class="line">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/app_name"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;include&gt;</code>标签唯一需要的属性是layout属性，指定需要包含的布局文件。在该标签中，还可以定义android:id和android:layout_*属性来覆盖被引入布局根节点的对应属性值。注意重新定义android:id后，子布局的顶结点i就变化了。</p>
<h4 id="merge标签"><a href="#merge标签" class="headerlink" title="merge标签"></a>merge标签</h4><p>在使用了include后可能导致布局嵌套过多，多余不必要的layout节点，从而导致解析变慢，不必要的节点和嵌套可通过上文中提到的hierarchy viewer来查看。而<code>merge</code>标签可以消除那些include时不必要的layout节点。</p>
<p><code>merge</code>标签可用于两种典型情况：</p>
<ol>
<li>布局顶结点是FrameLayout且不需要设置background或padding等属性，可以用merge代替，因为Activity内容试图的parent view就是个FrameLayout，所以可以用merge消除只剩一个。</li>
<li>某布局作为子布局被其他布局include时，使用merge当作该布局的顶节点，这样在被引入时顶结点会自动被忽略，而将其子节点全部合并到主布局中</li>
</ol>
<p>以上一节中的<code>&lt;include&gt;</code>标签的示例为例，用hierarchy viewer查看main.xml布局如下图：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_11.jpg?raw=tru" alt=""></p>
<p>可以发现多了一层没必要的RelativeLayout，将foot.xml中RelativeLayout改为merge，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/dp_40"</span></div><div class="line">        <span class="attr">android:layout_above</span>=<span class="string">"@+id/text"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/dp_40"</span></div><div class="line">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/app_name"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行后再次用hierarchy viewer查看main.xml布局如下图：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_12.jpg?raw=tru" alt=""></p>
<p>这样就不会有多余的RelativeLayout节点了。</p>
<h4 id="viewStub标签"><a href="#viewStub标签" class="headerlink" title="viewStub标签"></a>viewStub标签</h4><p>viewstub标签同include标签一样可以用来引入一个外部布局，不同的是，viewstub引入的布局默认不会扩张，即既不会占用显示也不会占用位置，从而在解析layout时节省cpu和内存。</p>
<p>viewstub常用来引入那些默认不会显示，只在特殊情况下显示的布局，如进度布局、网络失败显示的刷新布局、信息出错出现的提示布局等。</p>
<p>下面以在一个布局main.xml中加入网络错误时的提示页面network_error.xml为例。main.mxl代码如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line">	……</div><div class="line">    <span class="tag">&lt;<span class="name">ViewStub</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/network_error_layout"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout</span>=<span class="string">"@layout/network_error"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中network_error.xml为只有在网络错误时才需要显示的布局，默认不会被解析，示例代码如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/network_setting"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"@dimen/dp_160"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/network_setting"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/network_refresh"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"@dimen/dp_160"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_below</span>=<span class="string">"@+id/network_setting"</span></div><div class="line">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"@dimen/dp_10"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/network_refresh"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在java中通过(ViewStub)findViewById(id)找到ViewStub，通过stub.inflate()展开ViewStub，然后得到子View，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> View networkErrorView;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showNetError</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// not repeated infalte</span></div><div class="line">	<span class="keyword">if</span> (networkErrorView != <span class="keyword">null</span>) &#123;</div><div class="line">		networkErrorView.setVisibility(View.VISIBLE);</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	ViewStub stub = (ViewStub)findViewById(R.id.network_error_layout);</div><div class="line">	networkErrorView = stub.inflate();</div><div class="line">	Button networkSetting = (Button)networkErrorView.findViewById(R.id.network_setting);</div><div class="line">	Button refresh = (Button)findViewById(R.id.network_refresh);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showNormal</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (networkErrorView != <span class="keyword">null</span>) &#123;</div><div class="line">		networkErrorView.setVisibility(View.GONE);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 在上面showNetError()中展开了ViewStub，同时我们对networkErrorView进行了保存，这样下次不用继续inflate。</p>
<p>上面展开ViewStub部分代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ViewStub stub = (ViewStub)findViewById(R.id.network_error_layout);</div><div class="line">networkErrorView = stub.inflate();</div></pre></td></tr></table></figure>
<p>也可以写成下面的形式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">View viewStub = findViewById(R.id.network_error_layout);</div><div class="line">viewStub.setVisibility(View.VISIBLE);   <span class="comment">// ViewStub被展开后的布局所替换</span></div><div class="line">networkErrorView =  findViewById(R.id.network_error_layout); <span class="comment">// 获取展开后的布局</span></div></pre></td></tr></table></figure>
<p>两者效果一致，只是不用显示的转换为ViewStub。通过viewstub的原理我们可以知道将一个view设置为GONE不会被解析，从而提高layout解析速度，而VISIBLE和INVISIBLE这两个可见性属性会被正常解析。</p>
<h2 id="AsncTask简介"><a href="#AsncTask简介" class="headerlink" title="AsncTask简介"></a>AsncTask简介</h2><p>系统提供的轻量级后台加载的异步任务类<br>Thread池+Handler<br>3.0之前 线程池是并行的(内部有好几个线程在同时工作)<br>3.0之后 串行(默认线程池中只有一个线程在工作) 原因：先前的并行，一旦工作任务量很大，导致线程不够用而崩溃/卡顿。<br>可以手动改回并行</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;内存优化-下&quot;&gt;&lt;a href=&quot;#内存优化-下&quot; class=&quot;headerlink&quot; title=&quot;内存优化(下)&quot;&gt;&lt;/a&gt;内存优化(下)&lt;/h1&gt;&lt;h2 id=&quot;内存优化—减少内存使用（Reduce）&quot;&gt;&lt;a href=&quot;#内存优化—减少内存使用（Redu
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>内存优化(上)</title>
    <link href="https://izdo.github.io/2017/09/03/%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96(%E4%B8%8A)/"/>
    <id>https://izdo.github.io/2017/09/03/内存优化(上)/</id>
    <published>2017-09-03T07:24:49.472Z</published>
    <updated>2017-09-03T06:29:25.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存优化-上"><a href="#内存优化-上" class="headerlink" title="内存优化(上)"></a>内存优化(上)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么内存优化？</p>
<p>在一个商业项目中，很有可能因为工程师的疏忽，导致代码质量不佳，影响到程序的运行效率，从而让用户感知到应用的卡顿、崩溃。而Android开发中，每个Android应用在手机上申请的内存空间都是有限的。虽然手机发展越来越快，可申请到的内存越来越大，但是也不能大手大脚，随便浪费应用可使用的内存空间。内存一旦不够时，你这个应用就会因为OOM（out of memory）而崩溃。因此，内存优化这一块内容，在开发应用时是非常重要的。</p>
<h2 id="内存优化的关键点—避免内存泄露"><a href="#内存优化的关键点—避免内存泄露" class="headerlink" title="内存优化的关键点—避免内存泄露"></a>内存优化的关键点—避免内存泄露</h2><p>内存优化中非常关键的一点，就是避免内存泄露。因为内存泄露会严重的导致内存浪费，所以避免内存泄露，是内存优化中必不可少的。</p>
<h2 id="java中的四种引用类型"><a href="#java中的四种引用类型" class="headerlink" title="java中的四种引用类型"></a>java中的四种引用类型</h2><p>java引用类型不是指像int、char等这些基本的数据类型。java中的引用类型有四种：强引用、软引用、弱引用、虚引用。这四种引用类型，它们关于对象的可及性是由强到弱的。</p>
<h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>最常见的强引用方式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//强引用  对象类型 对象名 = new 对象构造方法();</span></div><div class="line"><span class="comment">//比如下列代码</span></div><div class="line">String str = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div></pre></td></tr></table></figure>
<p>在上述代码中，这个str对象就是强可及对象。<strong>强可及对象永远不会被GC回收。</strong>它宁愿被抛出OOM异常，也不会回收掉强可及对象。</p>
<p>清除强引用对象中的引用链如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div><div class="line"><span class="comment">//置空</span></div><div class="line">str = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<h3 id="软应用"><a href="#软应用" class="headerlink" title="软应用"></a>软应用</h3><p>软引用方式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//软引用SoftReference</span></div><div class="line">SoftReference&lt;String&gt; softReference = <span class="keyword">new</span> SoftReference&lt;String&gt;(str);</div></pre></td></tr></table></figure>
<p>在上述代码中，这个str对象就是软可及对象。<strong>当系统内存不足时，软可及对象会被GC回收。</strong></p>
<p>清除软引用对象中的引用链可以通过模拟系统内存不足来清除，也可以手动清除，手动清除如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SoftReference&lt;String&gt; softReference = <span class="keyword">new</span> SoftReference&lt;String&gt;(str);</div><div class="line">softReference.clear();</div></pre></td></tr></table></figure>
<h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>弱引用方式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//弱引用WeakReference</span></div><div class="line">WeakReference&lt;String&gt; weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(str);</div></pre></td></tr></table></figure>
<p>在上述代码中，这个str对象就是弱可及对象。<strong>当每次GC时，弱可及对象就会被回收。</strong></p>
<p>清除弱引用对象中的引用链可以通过手动调用gc代码来清除，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WeakReference&lt;String&gt; weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(str);</div><div class="line">System.gc();</div></pre></td></tr></table></figure>
<p>当然，也可以通过类似软引用，调用clear()方法也可以。</p>
<h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>虚引用方式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//虚引用PhantomReference</span></div><div class="line">PhantomReference phantomReference = <span class="keyword">new</span> PhantomReference&lt;&gt;(arg0, arg1);</div></pre></td></tr></table></figure>
<p>虚引用一般在代码中出现的频率极低，主要目的是为了检测对象是否已经被系统回收。它在一些用来检测内存是否泄漏的开源项目中使用到过，如LeakCanary。</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul>
<li>一个对象的可及性由最强的那个来决定。 </li>
</ul>
<ul>
<li>System.gc()方法只会回收堆内存中存放的对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"abc"</span>;</div><div class="line"><span class="comment">//弱引用WeakReference</span></div><div class="line">WeakReference&lt;String&gt; weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(str);</div><div class="line">System.gc();</div></pre></td></tr></table></figure>
<p>​    像这样的代码，即使gc后，str对象仍然可以通过弱引用拿到。因为像”abc”这种，并没有存放在堆内    存中，它被存放在常量池里，所以gc不会去回收。</p>
<h2 id="内存泄露的原因"><a href="#内存泄露的原因" class="headerlink" title="内存泄露的原因"></a>内存泄露的原因</h2><p><strong>对无用对象的引用一直未被释放，就会导致内存泄露。</strong>如果对象已经用不到了，但是因为疏忽，导致代码中对该无用对象的引用一直没有被清除掉，就会造成内存泄露。</p>
<p>比如你按back键关掉了一个Activity，那么这个Activity页面就暂时没用了。但是某个后台任务如果一直持有着对该Activity对象的引用，这个时候就会导致内存泄露。</p>
<h2 id="检测内存泄露—LeakCanary"><a href="#检测内存泄露—LeakCanary" class="headerlink" title="检测内存泄露—LeakCanary"></a>检测内存泄露—LeakCanary</h2><p>在全球最大的同性交友网站<a href="http://www.github.com" target="_blank" rel="external">github</a>中，有一个非常流行的开源项目<a href="https://github.com/square/leakcanary" target="_blank" rel="external">LeakCanary</a>，它能很方便的检测到当前开发的java项目中是否存在内存泄露。</p>
<h2 id="LeakCanary的使用"><a href="#LeakCanary的使用" class="headerlink" title="LeakCanary的使用"></a>LeakCanary的使用</h2><h3 id="官方使用文档描述"><a href="#官方使用文档描述" class="headerlink" title="官方使用文档描述"></a>官方使用文档描述</h3><p>从LeakCanary的文档描述中，可以得知使用方式，简单翻译为如下步骤：</p>
<ol>
<li><p>在你的项目中，找到moudle级别的build.gradle文件，并在dependencies标签里加上以下代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">//... 你项目中以前声明的一些依赖</div><div class="line">  debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'</div><div class="line">  releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'</div><div class="line">  testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在你Android项目中，找到先前写的Application类（PS：如果没有，那么请自行新建并在AndroidManifest中声明），并添加如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    <span class="keyword">if</span> (LeakCanary.isInAnalyzerProcess(<span class="keyword">this</span>)) &#123;</div><div class="line">      <span class="comment">// This process is dedicated to LeakCanary for heap analysis.</span></div><div class="line">      <span class="comment">// You should not init your app in this process.</span></div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    LeakCanary.install(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">// Normal app init code...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>导入完毕！当你的应用出现内存泄露时，LeakCanary会在通知栏上进行通知，注意查看。下图是一个LeakCanary检测到内存泄露时的实示例。<br><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog18/Blog18_1.png?raw=true" alt=""></p>
</li>
</ol>
<h3 id="检测Fragment"><a href="#检测Fragment" class="headerlink" title="检测Fragment"></a>检测Fragment</h3><p>上述步骤默认会检测Activity，但是不会去检测Fragment，如果需要对某个Fragment检测的话，需要利用到LeakCanary的其他写法。</p>
<p>首先，在先前的Application类中，改写为以下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RefWatcher mRefWatcher;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        <span class="comment">//...</span></div><div class="line">        mRefWatcher = LeakCanary.install(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">// Normal app init code...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在Fragment中的onDestroy方法中，去使用这个静态的RefWatcher进行观察，如果onDestroy了当前这个Fragment还没被回收，说明该Fragment产生了内存泄露。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    MyApplication.mRefWatcher.watch(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="检测某个特定对象"><a href="#检测某个特定对象" class="headerlink" title="检测某个特定对象"></a>检测某个特定对象</h3><p>有时候如果需要检测某个特定的可疑对象在某个时机下是否内存泄露，那么只需要执行如下代码</p>
<p>（假如对象名为someObjNeedGced）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> 	<span class="comment">//...</span></div><div class="line">    RefWatcher refWatcher = MyApplication.refWatcher;</div><div class="line">    refWatcher.watch(someObjNeedGced);</div><div class="line"><span class="comment">//...</span></div></pre></td></tr></table></figure>
<p>当执行了refWatcher.watch方法时，如果这个对象还在内存中被其他对象引用，就会在 logcat 里看到内存泄漏的提示。</p>
<h2 id="LeakCanary的原理简介"><a href="#LeakCanary的原理简介" class="headerlink" title="LeakCanary的原理简介"></a>LeakCanary的原理简介</h2><p>LeakCanary的代码执行流程图如下：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog18/Blog18_2.png?raw=true" alt=""></p>
<p>LeakCanary 的机制如下：</p>
<ol>
<li><code>RefWatcher.watch()</code> 会以监控对象来创建一个<code>KeyedWeakReference</code> 弱引用对象</li>
<li>在<code>AndroidWatchExecutor</code>的后台线程里，来检查弱引用已经被清除了，如果没被清除，则执行一次 GC</li>
<li>如果弱引用对象仍然没有被清除，说明内存泄漏了，系统就导出 hprof 文件，保存在 app 的文件系统目录下</li>
<li><code>HeapAnalyzerService</code>启动一个单独的进程，使用<code>HeapAnalyzer</code>来分析 hprof 文件。它使用另外一个开源库 <a href="https://github.com/square/haha" target="_blank" rel="external">HAHA</a>。</li>
<li><code>HeapAnalyzer</code> 通过查找<code>KeyedWeakReference</code> 弱引用对象来查找内在泄漏</li>
<li><code>HeapAnalyzer</code>计算<code>KeyedWeakReference</code>所引用对象的最短强引用路径，来分析内存泄漏，并且构建出对象引用链出来。</li>
<li>内存泄漏信息送回给<code>DisplayLeakService</code>，它是运行在 app 进程里的一个服务。然后在设备通知栏显示内存泄漏信息。</li>
</ol>
<h2 id="常见的内存泄露"><a href="#常见的内存泄露" class="headerlink" title="常见的内存泄露"></a>常见的内存泄露</h2><h3 id="内部类导致内存泄露"><a href="#内部类导致内存泄露" class="headerlink" title="内部类导致内存泄露"></a>内部类导致内存泄露</h3><p>内部类实例会隐式的持有外部类的引用。</p>
<p>比如说在Activity中去创建一个内部类实例，然后在内部类实例中去执行一些需要耗时间的任务。任务在执行过程中，将Activity关掉，这个时候Activity对象是不会被释放的，因为那个内部类还持有着对Activity的引用。但是Activity此时已经是个没用的Activity了，所有这时，内存泄露就出现了。</p>
<p>隐式持有外部类的说明：内部类可以直接去调用外部类的方法，如果没有持有外部类的引用，内部类是没办法去调用外部类的属性和方法的，但是内部类又没有明显的去指定和声明引用，所以称之为隐式引用。</p>
<h4 id="Thread线程"><a href="#Thread线程" class="headerlink" title="Thread线程"></a>Thread线程</h4><p>在Activity中创建一个内部类去继承Thread，然后让该Thread执行一些后台任务，未执行完时，关闭Activity，此时会内存泄露。核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                startThread();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread thread = <span class="keyword">new</span> Thread() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</div><div class="line">                    SystemClock.sleep(<span class="number">1000</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        thread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当点击页面按钮执行startThread()后，再按下back键关闭Activity，几秒后LeakCanary就会提示内存泄露了。</p>
<p>为了避免此种Thread相关内存泄露，只需要避免这个内部类去隐式引用外部类Activity即可。</p>
<p>解决方案：让这个内部类声明为静态类。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ...与先前相比未做变化，不再描述</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread thread = <span class="keyword">new</span> MyStaticThread();</div><div class="line">        thread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStaticThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</div><div class="line">                SystemClock.sleep(<span class="number">1000</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样声明为静态类后，该内部类将不会再去隐式持有外部类的应用。</p>
<p>如果像这样的循环操作，为了效率和优化，建议通过申明一个boolean类型的标志位来控制后台任务。比如在外部类Activity的onDestory退出方法中，将boolean值进行修改，使后台任务退出循环。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">	<span class="comment">//Activity页面是否已经destroy</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isDestroy = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStaticThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(!isDestroy)&#123;</div><div class="line">                    SystemClock.sleep(<span class="number">1000</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        isDestroy = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为申明为了静态内部类，该内部类不再持有外部类Activity的引用，所以此时不能再去使用外部类中的方法、变量。<u>除非外部类的那些方法、变量是静态的</u>。</p>
<p>Q：在防止内存泄露的前提下，如果一定要去使用那些外部类中非静态的方法、变量，该怎么做？</p>
<p>A：通过使用弱引用或者软引用的方式，来引用外部类Activity。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread thread = <span class="keyword">new</span> MyStaticThread(MainActivity.<span class="keyword">this</span>);</div><div class="line">        thread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span>  <span class="keyword">boolean</span> isDestroy = <span class="keyword">false</span>;<span class="comment">//Activity页面是否已经destroy</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStaticThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> WeakReference&lt;MainActivity&gt; softReference = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        MyStaticThread(MainActivity mainActivity)&#123;</div><div class="line">            <span class="keyword">this</span>.softReference = <span class="keyword">new</span> WeakReference&lt;MainActivity&gt;(mainActivity);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">//能够isDestroy变量是非静态的，它属于MainActivity，我们只要拿到了MainActivity对象，就能拿到isDestroy</span></div><div class="line">            MainActivity mainActivity = softReference.get();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</div><div class="line">                <span class="comment">//使用前最好对MainActivity对象做非空判断，如果它已经被回收，就不再执行后台任务</span></div><div class="line">                <span class="keyword">if</span>(mainActivity!=<span class="keyword">null</span>&amp;&amp;!mainActivity.isDestroy)&#123;</div><div class="line">                    SystemClock.sleep(<span class="number">1000</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        isDestroy = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h4><p>在使用Handler时，经常可以看到有人在Activity、Fragment中写过内部类形式的Handler，比如说写一个内部类形式的handler来执行一个延时的任务，像这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_DELAY = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mButton = (Button) findViewById(R.id.button);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                startDelayTask();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startDelayTask</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//发送一条消息，该消息会被延时10秒后才处理</span></div><div class="line">        Message message = Message.obtain();</div><div class="line">        message.obj = <span class="string">"按钮点击15秒后再弹出"</span>;</div><div class="line">        message.what = MESSAGE_DELAY;</div><div class="line">        mHandler.sendMessageDelayed(message, <span class="number">15000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> MESSAGE_DELAY:</div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, (String) msg.obj, Toast.LENGTH_SHORT).show();</div><div class="line">                    mButton.setText(<span class="string">"延时修改了按钮的文本"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当点击了按钮后会发送出一条消息，该消息将会15秒后再进行处理，如果中途退出Activity，不一会LeakCanary就会检测到内存泄露。</p>
<p>上述代码发生内存泄露也是因为内部类持有外部类的引用。这个内部类Handler会拿着外部类Activity的引用，而那个Message又拿着Handler的引用。这个Message又要在消息队列里排队等着被handler中的死循环来取消息。从而形成了一个引用链，最后导致关于外部类Activity的引用不会被释放。</p>
<p>该情况的的解决方案，是与上一节的Thread线程相同的。只要将Handler设置为static的静态内部类方式，就解决了handler持有外部类引用的问题。</p>
<p>如果handler已申明为静态内部类，那么Handler就不再持有外部类的引用，无法使用外部类中非静态的方法、变量了。</p>
<p>如果想在避免内存泄露的同时，想使用非静态的方法、变量，同样可以用弱（软）引用来做。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_DELAY = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startDelayTask</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//发送一条消息，该消息会被延时10秒后才处理</span></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> InsideHandler(MainActivity.<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InsideHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> WeakReference&lt;MainActivity&gt; mSoftReference;</div><div class="line"></div><div class="line">        InsideHandler(MainActivity activity) &#123;</div><div class="line">            mSoftReference = <span class="keyword">new</span> WeakReference&lt;MainActivity&gt;(activity);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            MainActivity mainActivity = mSoftReference.get();</div><div class="line">            <span class="keyword">if</span> (mainActivity != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                    <span class="keyword">case</span> MESSAGE_DELAY:</div><div class="line">                        Toast.makeText(mainActivity, (String) msg.obj, Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="comment">//通过软引用中的mainActivity可以拿到那个非静态的button对象</span></div><div class="line">                        mainActivity.mButton.setText(<span class="string">"延时修改了按钮的文本"</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，更完美的做法是在这些做法的基础上，再添加这段逻辑：当Activity页面退出时，将handler中的所有消息进行移除，做到滴水不漏。</p>
<p>其实就是在onDestroy中写上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDestroy() &#123;</div><div class="line">    super.onDestroy();</div><div class="line">    //参数为null时，handler中所有消息和回调都会被移除</div><div class="line">    mHandler.removeCallbacksAndMessages(null);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PS：弱引用和软引用的区别：弱引用会很容易被回收掉，软引用没那么快。如果你希望能尽快清掉这块内存使用就使用弱引用；如果想在内存实在不足的情况下才清掉，使用软引用。</p>
<p>下图是在内部类Handler使用软引用时LeakCanary出现的提示。</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog18/Blog18_3.jpg?raw=true" alt=""></p>
<p>因为使用软引用，GC会有点偷懒，所以leakCanary会检测到一些异常，出现这样的提示。</p>
<h4 id="非静态内部类的静态实例"><a href="#非静态内部类的静态实例" class="headerlink" title="非静态内部类的静态实例"></a>非静态内部类的静态实例</h4><p>有时候会使用，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> User sUser = <span class="keyword">null</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(sUser==<span class="keyword">null</span>)&#123;</div><div class="line">            sUser = <span class="keyword">new</span> User();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</div><div class="line">        User()&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在代码中，非静态的内部类创建了一个静态实例。非静态内部类会持有外部类Activity的引用，后来又创建了一个这个内部类的静态实例。</p>
<p>这个静态实例不会在Activity被关掉时一块被回收（静态实例的生命周期跟Activity可不一样，你Activity挂了，但是写在Activity中的静态实例还是会在，静态实例的生命周期跟应用的生命周期一样长）。</p>
<p>非静态内部类持有外部引用，而该内部类的静态实例不会及时回收，所以才导致了内存泄露。</p>
<p>解决方案：将内部类申明为静态的内部类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Context导致内存泄露"><a href="#Context导致内存泄露" class="headerlink" title="Context导致内存泄露"></a>Context导致内存泄露</h3><p>有时候我们会创建一个静态类，比如说AppManager、XXXManager。这些静态类可能还是以单例的形式存在。而这些静态类需要做一个关于UI的处理，所以传递了一个Context进来，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    ToastManager(Context context)&#123;</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ToastManager mManager = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(mContext==<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        Toast.makeText(mContext, str, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ToastManager <span class="title">getInstance</span><span class="params">(Context context)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(mManager==<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">synchronized</span> (ToastManager.class)&#123;</div><div class="line">                <span class="keyword">if</span>(mManager==<span class="keyword">null</span>)&#123;</div><div class="line">                    mManager = <span class="keyword">new</span> ToastManager(context);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mManager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而在使用时是这样写的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        ...</div><div class="line">        ToastManager instance = ToastManager.getInstance(MainActivity.this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候代码也会发生内存泄露。因为静态实例比Activity生命周期长，你在使用静态类时将Activity作为context参数传了进来，即时Activity被关掉，但是静态实例中还保有对它的应用，所以会导致Activity没法被及时回收，造成内存泄露。</p>
<p>解决方案：在传Context上下文参数时，尽量传跟Application应用相同生命周期的Context。比如getApplicationContext()，因为静态实例的生命周期跟应用Application一致。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        ToastManager instance = ToastManager.getInstance(getApplicationContext());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Context的作用域"><a href="#Context的作用域" class="headerlink" title="Context的作用域"></a>Context的作用域</h4><p>系统中的Context的具体实现子类有：Activity、Application、Service。</p>
<p>虽然Context能做很多事，但并不是随便拿到一个Context实例就可以为所欲为，它的使用还是有一些规则限制的。在绝大多数场景下，Activity、Service和Application这三种类型的Context都是可以通用的。不过有几种场景比较特殊，比如启动Activity，还有弹出Dialog。</p>
<p>出于安全原因的考虑，Android是不允许Activity或Dialog凭空出现的，一个Activity的启动必须要建立在另一个Activity的基础之上，也就是以此形成的返回栈。而Dialog则必须在一个Activity上面弹出（<strong>除非是System Alert类型的Dialog</strong>），因此在这种场景下，我们只能使用Activity类型的Context，否则将会出错。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog18/Blog18_4.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>上图中Application和Service所不推荐的两种使用情况：</p>
<ol>
<li><p>如果我们用ApplicationContext去启动一个LaunchMode为standard的Activity的时候会报错</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javaandroid.util.AndroidRuntimeException: Calling startActivity from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</div></pre></td></tr></table></figure>
<p>这是因为非Activity类型的Context并没有所谓的任务栈，所以待启动的Activity就找不到栈了。解决这个问题的方法就是为待启动的Activity指定FLAG_ACTIVITY_NEW_TASK标记位，这样启动的时候就为它创建一个新的任务栈，而此时Activity是以singleTask模式启动的。所有这种用Application启动Activity的方式不推荐使用，Service的原因跟Application一致。</p>
</li>
<li><p>在Application和Service中去layout inflate也是合法的，但是会使用系统默认的主题样式，如果你自定义了某些样式可能不会被使用。所以这种方式也不推荐使用。一句话总结：凡是跟UI相关的，都建议使用Activity做为Context来处理；其他的一些操作，Service,Activity,Application等实例Context都可以，当然了，注意Context引用的持有，防止内存泄漏。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;内存优化-上&quot;&gt;&lt;a href=&quot;#内存优化-上&quot; class=&quot;headerlink&quot; title=&quot;内存优化(上)&quot;&gt;&lt;/a&gt;内存优化(上)&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>音乐播放器</title>
    <link href="https://izdo.github.io/2017/09/01/%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>https://izdo.github.io/2017/09/01/音乐播放器/</id>
    <published>2017-09-01T02:53:16.754Z</published>
    <updated>2017-09-01T02:52:45.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h1><blockquote>
<p>今天主要讲的是如何自己动手写一个音乐播放器。<br>直接进入主题。  </p>
<h2 id="新建MyMusic工程"><a href="#新建MyMusic工程" class="headerlink" title="新建MyMusic工程"></a>新建MyMusic工程</h2><h3 id="布局文件activity-main"><a href="#布局文件activity-main" class="headerlink" title="布局文件activity_main"></a>布局文件activity_main</h3></blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"65dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/actionbar_bg"</span> &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/back"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"38sp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"38sp"</span></div><div class="line">            <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_marginLeft</span>=<span class="string">"16sp"</span></div><div class="line">            <span class="attr">android:contentDescription</span>=<span class="string">"@+id/actionbar_left_icon"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/back_left"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/center_content"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#FFF"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"21sp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Justin Bieber-Baby"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/right_icon"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"38sp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"38sp"</span></div><div class="line">            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_marginRight</span>=<span class="string">"16sp"</span></div><div class="line">            <span class="attr">android:contentDescription</span>=<span class="string">"@+id/actionbar_right_icon"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/actionbar_right"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/cover"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"bottom"</span> &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/play_element"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"125sp"</span></div><div class="line">            <span class="attr">android:layout_weight</span>=<span class="string">"0"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@drawable/banner_bg"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span> &gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/music_author"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"5sp"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"Justin Bieber"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"#FFFFFF"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"16sp"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/horizontal_music"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_below</span>=<span class="string">"@+id/music_author"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"6sp"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center_horizontal|center_vertical"</span></div><div class="line">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> &gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/reduce_vol"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"30sp"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"30sp"</span></div><div class="line">                    <span class="attr">android:contentDescription</span>=<span class="string">"@+id/reduce_vol"</span></div><div class="line">                    <span class="attr">android:src</span>=<span class="string">"@drawable/reduce_vol"</span> /&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</div><div class="line"></div><div class="line">                    <span class="tag">&lt;<span class="name">SeekBar</span></span></div><div class="line">                        <span class="attr">android:id</span>=<span class="string">"@+id/music_progress"</span></div><div class="line">                        <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleHorizontal"</span></div><div class="line">                        <span class="attr">android:layout_width</span>=<span class="string">"220sp"</span></div><div class="line">                        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8sp"</span></div><div class="line">                        <span class="attr">android:clickable</span>=<span class="string">"true"</span></div><div class="line">                        <span class="attr">android:focusable</span>=<span class="string">"false"</span></div><div class="line">                        <span class="attr">android:max</span>=<span class="string">"100"</span></div><div class="line">                        <span class="attr">android:paddingLeft</span>=<span class="string">"5sp"</span></div><div class="line">                        <span class="attr">android:progressDrawable</span>=<span class="string">"@drawable/play_seekbar_style"</span></div><div class="line">                        <span class="attr">android:thumb</span>=<span class="string">"@drawable/play_seekbar_thumb"</span></div><div class="line">                        <span class="attr">android:thumbOffset</span>=<span class="string">"5dip"</span> /&gt;</div><div class="line"></div><div class="line">                    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">                        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> &gt;</div><div class="line"></div><div class="line">                        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                            <span class="attr">android:id</span>=<span class="string">"@+id/time_progress"</span></div><div class="line">                            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                            <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">                            <span class="attr">android:layout_marginLeft</span>=<span class="string">"20sp"</span></div><div class="line">                            <span class="attr">android:text</span>=<span class="string">"时长："</span></div><div class="line">                            <span class="attr">android:textColor</span>=<span class="string">"#FFFFFF"</span></div><div class="line">                            <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line"></div><div class="line">                        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                            <span class="attr">android:id</span>=<span class="string">"@+id/music_duration"</span></div><div class="line">                            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">                            <span class="attr">android:layout_marginLeft</span>=<span class="string">"20sp"</span></div><div class="line">                            <span class="attr">android:layout_marginRight</span>=<span class="string">"15sp"</span></div><div class="line">                            <span class="attr">android:text</span>=<span class="string">"04:25"</span></div><div class="line">                            <span class="attr">android:textColor</span>=<span class="string">"#FFFFFF"</span></div><div class="line">                            <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line">                    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/increase_vol"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"30sp"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"30sp"</span></div><div class="line">                    <span class="attr">android:layout_marginLeft</span>=<span class="string">"8sp"</span></div><div class="line">                    <span class="attr">android:contentDescription</span>=<span class="string">"@+id/increase_vol"</span></div><div class="line">                    <span class="attr">android:src</span>=<span class="string">"@drawable/increase_vol"</span> /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_below</span>=<span class="string">"@+id/horizontal_music"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"6sp"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span> &gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/pre_music"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">                    <span class="attr">android:contentDescription</span>=<span class="string">"@+id/pre_music"</span></div><div class="line">                    <span class="attr">android:src</span>=<span class="string">"@drawable/previous"</span> /&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/play_pause_music"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"42sp"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"425sp"</span></div><div class="line">                    <span class="attr">android:layout_marginLeft</span>=<span class="string">"30sp"</span></div><div class="line">                    <span class="attr">android:layout_toRightOf</span>=<span class="string">"@+id/pre_music"</span></div><div class="line">                    <span class="attr">android:contentDescription</span>=<span class="string">"pause"</span></div><div class="line">                    <span class="attr">android:src</span>=<span class="string">"@drawable/play"</span></div><div class="line">                    <span class="attr">android:onClick</span>=<span class="string">"play"</span> /&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/next_music"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">                    <span class="attr">android:layout_marginLeft</span>=<span class="string">"30sp"</span></div><div class="line">                    <span class="attr">android:layout_toRightOf</span>=<span class="string">"@+id/play_pause_music"</span></div><div class="line">                    <span class="attr">android:contentDescription</span>=<span class="string">"@+id/next_music"</span></div><div class="line">                    <span class="attr">android:src</span>=<span class="string">"@drawable/next"</span> /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>同时将相应的图片资源文件放到工程中。<br>布局比较简单，与市面上大多数音乐播放软件是相似的，就不再阐述。<br><img src="" alt=""></p>
<p>众所周知，在我们运行音乐的时候，无论是在前台，还是按HOME键退出界面时，音乐都在播放，那么如何实现音乐在前台和后台都能正常的运行呢？我们自然而然地想到了Service。</p>
</blockquote>
<h3 id="新建MusicService类"><a href="#新建MusicService类" class="headerlink" title="新建MusicService类"></a>新建MusicService类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.mymusic;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Service;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.os.IBinder;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/28.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>新建类时只有onBind()方法，我们需要手动重写onCreate()方法和onDestroy()方法。 </p>
</blockquote>
<h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ImageView play_pause_music;</div><div class="line">    <span class="keyword">private</span> SeekBar sb;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化控件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        play_pause_music = (ImageView) findViewById(R.id.play_pause_music);</div><div class="line">        sb = (SeekBar) findViewById(R.id.music_progress);</div><div class="line">        play_pause_music.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        sb.setOnSeekBarChangeListener(<span class="keyword">new</span> SeekBar.OnSeekBarChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> i, <span class="keyword">boolean</span> b)</span> </span>&#123;</div><div class="line">              </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>基本初始化工作完成后，我们就可以开始对服务的初始化了。<br>这里我们在onCreate()方法中绑定服务，绑定服务需要用到bindService()方法，而这个方法需要三个参数，第一个参数是一个Intent，表示你将要绑定的服务来自于哪个类，第二个参数是一个ServiceConnection对象，而ServiceConnection是一个接口，我们通常会写一个类继承它然后拿到这个类的对象作为参数，第三个参数是一个整型常量，这里我们传入<strong>Context.BIND_AUTO_CREATE</strong>即可。</p>
</blockquote>
<h3 id="修改MainActivity和MusicService类"><a href="#修改MainActivity和MusicService类" class="headerlink" title="修改MainActivity和MusicService类"></a>修改MainActivity和MusicService类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ImageView play_pause_music;</div><div class="line">    <span class="keyword">private</span> SeekBar sb;</div><div class="line">    <span class="keyword">private</span> MyServiceConnection conn;</div><div class="line">    <span class="keyword">private</span> MusicService musicService;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initView();</div><div class="line">        </div><div class="line">         Intent service = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MusicService.class);</div><div class="line">        conn = <span class="keyword">new</span> MyServiceConnection();</div><div class="line">        <span class="comment">// 开启服务</span></div><div class="line">        <span class="keyword">this</span>.startService(service);</div><div class="line">        <span class="comment">// 连接服务</span></div><div class="line">        <span class="keyword">this</span>.bindService(service, conn, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceConnection</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">            <span class="comment">// 连接成功</span></div><div class="line">            MusicService.MyBinder binder = (MusicService.MyBinder) iBinder;</div><div class="line">            musicService = binder.getService();</div><div class="line">            </div><div class="line">            Log.d(TAG, <span class="string">"连接成功"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.unbindService(conn); <span class="comment">//解绑</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    MyBinder binder = <span class="keyword">new</span> MyBinder();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> binder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> MusicService <span class="title">getService</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> MusicService.<span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里为了方便，在onCreate()方法中我们直接开启服务。<br>在MyServiceConnection的onServiceConnected()方法中，我们需要将IBinder参数转为供我们使用的binder，我们需要通过MusicService去获取Binder，一般我们在MusicService类中写一个继承于Binder类的MyBinder，并通过MyBinder类中的方法将服务返回给调用者。<br>回到onServiceConnected()方法中，我们将IBinder强制转型为MyBinder类，并通过它拿到当前正在运行的服务。<br>注意:在程序销毁时，我们需要将服务解绑。</p>
</blockquote>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6-28 15:41:44.827 2687-2687/com.izdo.mymusic D/MainActivity: 连接成功</div></pre></td></tr></table></figure>
<h3 id="修改MusicService类"><a href="#修改MusicService类" class="headerlink" title="修改MusicService类"></a>修改MusicService类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    MyBinder binder = <span class="keyword">new</span> MyBinder();</div><div class="line">    MediaPlayer player = <span class="keyword">new</span> MediaPlayer(); <span class="comment">// 媒体播放</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> binder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> MusicService <span class="title">getService</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> MusicService.<span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开始播放</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">        player.reset(); <span class="comment">// 重置</span></div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            player.setDataSource(path); <span class="comment">// 设置音乐路径</span></div><div class="line">            player.prepare(); <span class="comment">// 缓冲</span></div><div class="line">            player.setOnPreparedListener(<span class="keyword">new</span> MediaPlayer.OnPreparedListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepared</span><span class="params">(MediaPlayer mediaPlayer)</span> </span>&#123;</div><div class="line">                    player.start(); <span class="comment">// 缓冲完成后开始播放</span></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 暂停播放</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(player.isPlaying())&#123;</div><div class="line">            player.pause(); <span class="comment">// 暂停</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 继续播放</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">continue_music</span><span class="params">()</span></span>&#123;</div><div class="line">        player.start(); <span class="comment">// 继续</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 停止播放</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</div><div class="line">        player.stop(); <span class="comment">// 停止</span></div><div class="line">        player.release();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这次我们新加入四个方法，分别是开始播放，暂停播放，继续播放和停止播放，这里主要讲解一下开始播放方法，在播放之前我们需要重置一下播放器，并且<strong>一定要先prepare()让播放器缓冲并准备好开始播放</strong>。 </p>
</blockquote>
<h3 id="修改MainActivity"><a href="#修改MainActivity" class="headerlink" title="修改MainActivity"></a>修改MainActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ImageView play_pause_music;</div><div class="line">    <span class="keyword">private</span> SeekBar sb;</div><div class="line">    <span class="keyword">private</span> MyServiceConnection conn;</div><div class="line">    <span class="keyword">private</span> MusicService musicService;</div><div class="line">     <span class="keyword">private</span> MediaPlayer player;</div><div class="line">    <span class="keyword">private</span> String[] musics = <span class="keyword">new</span> String[]&#123;</div><div class="line">            <span class="string">"1.mp3"</span>, <span class="string">"2.mp3"</span>, <span class="string">"3.mp3"</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">      </div><div class="line">       ...</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceConnection</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">            <span class="comment">// 连接成功</span></div><div class="line">            MusicService.MyBinder binder = (MusicService.MyBinder) iBinder;</div><div class="line">            musicService = binder.getService();</div><div class="line">            </div><div class="line">            player = musicService.player; <span class="comment">// 获取播放器</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!player.isPlaying()) &#123; <span class="comment">// 当播放器不在播放才开始播放音乐</span></div><div class="line">                musicService.play(MyConstant.SD_PATH + <span class="string">"/"</span> + musics[index]); <span class="comment">// 播放音乐</span></div><div class="line">                play_pause_music.setImageResource(R.drawable.play);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="comment">// 开始播放音乐</span></div><div class="line">        <span class="keyword">if</span> (player != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (player.isPlaying()) &#123;</div><div class="line">                musicService.pause();</div><div class="line">                play_pause_music.setImageResource(R.drawable.play);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                musicService.continue_music();</div><div class="line">                play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建MyConstant类作为常量类"><a href="#新建MyConstant类作为常量类" class="headerlink" title="新建MyConstant类作为常量类"></a>新建MyConstant类作为常量类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.mymusic;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Environment;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/28.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConstant</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SD_PATH = Environment.getExternalStorageDirectory().getAbsolutePath().toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>加入的逻辑都比较简单，将所需要的音乐文件放入手机内存中后，部署之后便可听到音乐，由于文章中无法听到音乐效果，所以也不贴效果图了。<br>ps:读取SD卡需要在清单文件中加入权限。</p>
<p>接下来我们要加入进度条自动滚动和拖动进度条并让音乐播放到进度条位置的功能。</p>
<h3 id="修改MainActivity-1"><a href="#修改MainActivity-1" class="headerlink" title="修改MainActivity"></a>修改MainActivity</h3></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler();</div><div class="line">    <span class="keyword">private</span> Runnable run_music = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 检查音乐进度，更新seekbar</span></div><div class="line">            sb.setProgress(player.getCurrentPosition()); <span class="comment">// 设置seekbar当前刻度为音乐当前进度</span></div><div class="line">            handler.postDelayed(run_music, <span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceConnection</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">            <span class="comment">// 连接成功</span></div><div class="line">            MusicService.MyBinder binder = (MusicService.MyBinder) iBinder;</div><div class="line">            musicService = binder.getService();</div><div class="line"></div><div class="line">            player = musicService.player; <span class="comment">// 获取播放器</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!player.isPlaying()) &#123; <span class="comment">// 当播放器不在播放才开始播放音乐</span></div><div class="line">                musicService.play(MyConstant.SD_PATH + <span class="string">"/"</span> + musics[index]); <span class="comment">// 播放音乐</span></div><div class="line">                play_pause_music.setImageResource(R.drawable.play);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">            &#125;</div><div class="line">            sb.setMax(player.getDuration()); <span class="comment">// 设置进度条最大值为音乐长度</span></div><div class="line">            handler.removeCallbacks(run_music); <span class="comment">// 先清空消息队列里的runnable</span></div><div class="line">            handler.post(run_music);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化控件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        play_pause_music = (ImageView) findViewById(R.id.play_pause_music);</div><div class="line">        sb = (SeekBar) findViewById(R.id.music_progress);</div><div class="line">        play_pause_music.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        sb.setOnSeekBarChangeListener(<span class="keyword">new</span> SeekBar.OnSeekBarChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> i, <span class="keyword">boolean</span> b)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (b) &#123;</div><div class="line">                    <span class="keyword">if</span> (player != <span class="keyword">null</span>) &#123;</div><div class="line">                        player.seekTo(i);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>首先说一下进度条自动滚动的功能，进度条的滚动自然牵扯到UI更新的问题，众所周知主线程不能更新UI，所以我们需要用到Handler，通过Runnable中的run()方法获取到当前进度值并设置到seekBar上，然后在onServiceConnected()方法中调用post()方法。<br>只需要seekBar的监听事件的onProgressChanged()方法中调用seekTo()方法即可。</p>
</blockquote>
<h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog17/Blog17_1.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>接下来要加入的是上一首下一首按钮功能和播放完一首歌自动切换到下一首歌功能的实现。</p>
</blockquote>
<h3 id="修改MyConstant类"><a href="#修改MyConstant类" class="headerlink" title="修改MyConstant类"></a>修改MyConstant类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConstant</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SD_PATH = Environment.getExternalStorageDirectory().getAbsolutePath().toString();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NEXT = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> PRE = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> CURRENT = <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里加入了三个常量，分别代表下一首，上一首和当前的歌曲。</p>
</blockquote>
<h3 id="修改MainActivity-2"><a href="#修改MainActivity-2" class="headerlink" title="修改MainActivity"></a>修改MainActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ImageView play_pause_music, pre, next;</div><div class="line">    </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceConnection</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">            <span class="comment">// 连接成功</span></div><div class="line">            MusicService.MyBinder binder = (MusicService.MyBinder) iBinder;</div><div class="line">            musicService = binder.getService();</div><div class="line"></div><div class="line">            player = musicService.player; <span class="comment">// 获取播放器</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!player.isPlaying()) &#123; <span class="comment">// 当播放器不在播放才开始播放音乐</span></div><div class="line">                <span class="comment">//musicService.play(MyConstant.SD_PATH + "/" + musics[index]); // 播放音乐</span></div><div class="line">                playMusicByStatue(MyConstant.CURRENT);<span class="comment">// 播放音乐</span></div><div class="line">                play_pause_music.setImageResource(play);</div><div class="line">                player.setOnCompletionListener(<span class="keyword">new</span> MediaPlayer.OnCompletionListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(MediaPlayer mediaPlayer)</span> </span>&#123;</div><div class="line">                        <span class="comment">// 当前音乐播放完了</span></div><div class="line">                        playMusicByStatue(MyConstant.NEXT);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">            &#125;</div><div class="line">            sb.setMax(player.getDuration()); <span class="comment">// 设置进度条最大值为音乐长度</span></div><div class="line">            handler.removeCallbacks(run_music); <span class="comment">// 先清空消息队列里的runnable</span></div><div class="line">            handler.post(run_music);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMusicByStatue</span><span class="params">(<span class="keyword">int</span> statue)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (statue) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                <span class="comment">// 下一首</span></div><div class="line">                index++;</div><div class="line">                <span class="keyword">if</span> (index == musics.length) &#123;</div><div class="line">                    index = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="comment">// 上一首</span></div><div class="line">                index--;</div><div class="line">                <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</div><div class="line">                    index = musics.length - <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                <span class="comment">// 当前</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        musicService.play(MyConstant.SD_PATH + <span class="string">"/"</span> + musics[index]);</div><div class="line">        sb.setMax(player.getDuration()); <span class="comment">// 设置进度条最大值为音乐长度</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化控件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        play_pause_music = (ImageView) findViewById(R.id.play_pause_music);</div><div class="line">        pre = (ImageView) findViewById(R.id.pre_music);</div><div class="line">        next = (ImageView) findViewById(R.id.next_music);</div><div class="line">        sb = (SeekBar) findViewById(R.id.music_progress);</div><div class="line">        play_pause_music.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        pre.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        next.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        ...</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.play_pause_music:</div><div class="line">                <span class="comment">// 开始播放音乐</span></div><div class="line">                <span class="keyword">if</span> (player != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (player.isPlaying()) &#123;</div><div class="line">                        musicService.pause();</div><div class="line">                        play_pause_music.setImageResource(play);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        musicService.continue_music();</div><div class="line">                        play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.pre_music:</div><div class="line">                playMusicByStatue(MyConstant.PRE);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.next_music:</div><div class="line">                playMusicByStatue(MyConstant.NEXT);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>首先将上一首和下一首的控件初始化并设置监听事件，这里主要加入了playMusicByStatue()方法，通过传入的statue判断是上一首、下一首还是当前，并将onServiceConnected()方法中的<strong>musicService.play(MyConstant.SD_PATH + “/“ + musics[index]);</strong> 改为<strong>playMusicByStatue(MyConstant.CURRENT);</strong>，同时将onClick()方法修改为用switch语句判断点击的按钮，最后加入的逻辑即可。<br>自动切歌功能比较简单，在onServiceConnected()方法中为MediaPlayer添加一个<strong>OnCompletionListener()</strong>，在其onCompletion()中调用playMusicByStatue()方法播放下一首即可。</p>
<p>接下来我们要完善一下这个音乐播放器。<br>完善的部分会有较大的改动。</p>
</blockquote>
<h3 id="新建MusicInfo类"><a href="#新建MusicInfo类" class="headerlink" title="新建MusicInfo类"></a>新建MusicInfo类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.mymusic;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/28.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicInfo</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String musicPath;</div><div class="line">    <span class="keyword">private</span> String musicName;</div><div class="line">    <span class="keyword">private</span> String musicArtist;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMusicArtist</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> musicArtist;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMusicArtist</span><span class="params">(String musicArtist)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.musicArtist = musicArtist;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> duration;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMusicPath</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> musicPath;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMusicPath</span><span class="params">(String musicPath)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.musicPath = musicPath;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMusicName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> musicName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMusicName</span><span class="params">(String musicName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.musicName = musicName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDuration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> duration;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDuration</span><span class="params">(<span class="keyword">int</span> duration)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.duration = duration;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改MainActivity-3"><a href="#修改MainActivity-3" class="headerlink" title="修改MainActivity"></a>修改MainActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.mymusic;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.ComponentName;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.content.ServiceConnection;</div><div class="line"><span class="keyword">import</span> android.database.Cursor;</div><div class="line"><span class="keyword">import</span> android.media.MediaPlayer;</div><div class="line"><span class="keyword">import</span> android.net.Uri;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"><span class="keyword">import</span> android.os.IBinder;</div><div class="line"><span class="keyword">import</span> android.provider.MediaStore;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"><span class="keyword">import</span> android.widget.SeekBar;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.text.DecimalFormat;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView musicProgress; <span class="comment">// 音乐当前时间</span></div><div class="line">    <span class="keyword">private</span> TextView musicDuration; <span class="comment">// 音乐的时长</span></div><div class="line">    <span class="keyword">private</span> TextView musicName; <span class="comment">// 音乐名</span></div><div class="line">    <span class="keyword">private</span> TextView musicArtist; <span class="comment">// 歌手名</span></div><div class="line">    <span class="keyword">private</span> ImageView play_pause_music; <span class="comment">// 开始暂停按钮</span></div><div class="line">    <span class="keyword">private</span> ImageView pre; <span class="comment">// 上一首</span></div><div class="line">    <span class="keyword">private</span> ImageView next; <span class="comment">// 下一首</span></div><div class="line">    <span class="keyword">private</span> SeekBar sb; <span class="comment">// 滚动条</span></div><div class="line">    <span class="keyword">private</span> MyServiceConnection conn;</div><div class="line">    <span class="keyword">private</span> MusicService musicService; <span class="comment">// 音乐核心服务</span></div><div class="line">    <span class="keyword">private</span> MediaPlayer player; <span class="comment">// 媒体播放器</span></div><div class="line">    <span class="comment">//    private String[] musics = new String[]&#123;</span></div><div class="line">    <span class="comment">//            "1.mp3", "2.mp3", "3.mp3"</span></div><div class="line">    <span class="comment">//    &#125;;</span></div><div class="line">    <span class="keyword">private</span> List&lt;MusicInfo&gt; musics = <span class="keyword">new</span> ArrayList&lt;MusicInfo&gt;(); <span class="comment">// 音乐数组</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler();</div><div class="line">    <span class="keyword">private</span> Runnable run_music = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 检查音乐进度，更新seekbar</span></div><div class="line">            sb.setProgress(player.getCurrentPosition()); <span class="comment">// 设置seekbar当前刻度为音乐当前进度</span></div><div class="line">             musicProgress.setText(millsSecondToString(player.getCurrentPosition())); <span class="comment">// 设置时长</span></div><div class="line">            handler.postDelayed(run_music, <span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initView();</div><div class="line"></div><div class="line">        <span class="comment">// 从手机里获取音乐</span></div><div class="line">        Uri uri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;</div><div class="line">        Cursor cursor = <span class="keyword">this</span>.getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">while</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToNext()) &#123;</div><div class="line">            MusicInfo info = <span class="keyword">new</span> MusicInfo();</div><div class="line">            <span class="comment">// 获得音乐的物理路径</span></div><div class="line">            String path = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.DATA));</div><div class="line">            info.setMusicPath(path);</div><div class="line">            <span class="comment">// 获得音乐的名字</span></div><div class="line">            String musicName = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.TITLE));</div><div class="line">            info.setMusicName(musicName);</div><div class="line">            <span class="comment">// 获得歌手的名字</span></div><div class="line">            String musicArtist = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.ARTIST));</div><div class="line">            info.setMusicArtist(musicArtist);</div><div class="line">            <span class="comment">// 获得音乐的时长</span></div><div class="line">            <span class="keyword">int</span> duration = cursor.getInt(cursor.getColumnIndex(MediaStore.Audio.Media.DURATION));</div><div class="line">            info.setDuration(duration);</div><div class="line">            <span class="comment">// 当音乐名和物理路径不为空并且时长不为0时才添加进集合</span></div><div class="line">            <span class="keyword">if</span> (!musicName.equals(<span class="string">""</span>) &amp;&amp; !path.equals(<span class="string">""</span>) &amp;&amp; duration != <span class="number">0</span>) &#123;</div><div class="line">                musics.add(info);</div><div class="line">                Log.d(TAG, <span class="string">"onCreate: "</span> + info.getMusicPath());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Intent service = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MusicService.class);</div><div class="line">        conn = <span class="keyword">new</span> MyServiceConnection();</div><div class="line">        <span class="comment">// 开启服务</span></div><div class="line">        <span class="keyword">this</span>.startService(service);</div><div class="line">        <span class="comment">// 绑定服务</span></div><div class="line">        <span class="keyword">this</span>.bindService(service, conn, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.unbindService(conn); <span class="comment">//解绑</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceConnection</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">            <span class="comment">// 绑定成功</span></div><div class="line">            MusicService.MyBinder binder = (MusicService.MyBinder) iBinder;</div><div class="line">            musicService = binder.getService();</div><div class="line"></div><div class="line">            player = musicService.player; <span class="comment">// 获取播放器</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!player.isPlaying()) &#123; <span class="comment">// 当播放器不在播放才开始播放音乐</span></div><div class="line">                <span class="comment">//musicService.play(MyConstant.SD_PATH + "/" + musics[index]); // 播放音乐</span></div><div class="line">                playMusicByStatue(MyConstant.CURRENT);<span class="comment">// 播放音乐</span></div><div class="line">                play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">                player.setOnCompletionListener(<span class="keyword">new</span> MediaPlayer.OnCompletionListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(MediaPlayer mediaPlayer)</span> </span>&#123;</div><div class="line">                        <span class="comment">// 当前音乐播放完了</span></div><div class="line">                        playMusicByStatue(MyConstant.NEXT);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">            &#125;</div><div class="line">            sb.setMax(player.getDuration()); <span class="comment">// 设置进度条最大值为音乐长度</span></div><div class="line">            handler.removeCallbacks(run_music); <span class="comment">// 先清空消息队列里的runnable</span></div><div class="line">            handler.post(run_music);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMusicByStatue</span><span class="params">(<span class="keyword">int</span> statue)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (statue) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                <span class="comment">// 下一首</span></div><div class="line">                index++;</div><div class="line">                <span class="keyword">if</span> (index == musics.size()) &#123;</div><div class="line">                    index = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="comment">// 上一首</span></div><div class="line">                index--;</div><div class="line">                <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</div><div class="line">                    index = musics.size() - <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                <span class="comment">// 当前</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        playMusic(index);</div><div class="line">        <span class="comment">//        musicService.play(MyConstant.SD_PATH + "/" + musics.get(index));</span></div><div class="line">        <span class="comment">//        sb.setMax(player.getDuration()); // 设置进度条最大值为音乐长度</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据音乐数组下标播放对应的音乐</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">playMusic</span><span class="params">(<span class="keyword">int</span> index2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (musics.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            musicService.play(musics.get(index2).getMusicPath());</div><div class="line">            <span class="comment">// 设置音乐名</span></div><div class="line">            musicName.setText(musics.get(index2).getMusicName());</div><div class="line">            <span class="comment">// 设置歌手</span></div><div class="line">            musicArtist.setText(musics.get(index2).getMusicArtist());</div><div class="line">            <span class="comment">// 设置音乐时长</span></div><div class="line">            musicDuration.setText(millsSecondToString(musics.get(index2).getDuration()));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 设置进度条最大值为音乐长度</span></div><div class="line">        sb.setMax(player.getDuration()); </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 转换时长为标准时间格式</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">millsSecondToString</span><span class="params">(<span class="keyword">int</span> mills)</span> </span>&#123;</div><div class="line">        <span class="comment">// 将毫秒转化成秒</span></div><div class="line">        <span class="keyword">int</span> seconds = mills / <span class="number">1000</span>;</div><div class="line">        <span class="comment">// 算出余数即为秒钟</span></div><div class="line">        <span class="keyword">int</span> second = seconds % <span class="number">60</span>;</div><div class="line">        <span class="comment">// 计算出分钟数</span></div><div class="line">        <span class="keyword">int</span> minute = (seconds - second) / <span class="number">60</span>;</div><div class="line">        DecimalFormat decimalFormat = <span class="keyword">new</span> DecimalFormat(<span class="string">"00"</span>);</div><div class="line">        <span class="keyword">return</span> decimalFormat.format(minute) + <span class="string">":"</span> + decimalFormat.format(second);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化控件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        play_pause_music = (ImageView) findViewById(R.id.play_pause_music);</div><div class="line">        pre = (ImageView) findViewById(R.id.pre_music);</div><div class="line">        next = (ImageView) findViewById(R.id.next_music);</div><div class="line">        sb = (SeekBar) findViewById(R.id.music_progress);</div><div class="line">        musicName = (TextView) findViewById(R.id.center_content);</div><div class="line">        musicProgress = (TextView) findViewById(R.id.time_progress);</div><div class="line">        musicArtist = (TextView) findViewById(R.id.music_artist);</div><div class="line">        musicDuration = (TextView) findViewById(R.id.music_duration);</div><div class="line"></div><div class="line">        play_pause_music.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        pre.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        next.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        sb.setOnSeekBarChangeListener(<span class="keyword">new</span> SeekBar.OnSeekBarChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> i, <span class="keyword">boolean</span> b)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (b) &#123;</div><div class="line">                    <span class="keyword">if</span> (player != <span class="keyword">null</span>) &#123;</div><div class="line">                        player.seekTo(i);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.play_pause_music:</div><div class="line">                <span class="comment">// 开始播放音乐</span></div><div class="line">                <span class="keyword">if</span> (player != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (player.isPlaying()) &#123;</div><div class="line">                        musicService.pause();</div><div class="line">                        play_pause_music.setImageResource(R.drawable.play);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        musicService.continue_music();</div><div class="line">                        play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.pre_music:</div><div class="line">                playMusicByStatue(MyConstant.PRE);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.next_music:</div><div class="line">                playMusicByStatue(MyConstant.NEXT);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>首先拿到界面上音乐当前时间和时长的TextView，然后将存放音乐的数组改为用集合存放，并且音乐文件不再是通过具体路径获得，改为由内容提供者获取SD卡中所有音频文件。<br>新增的playMusic()方法用于根据设置相关的信息到界面上，millsSecondToString()方法用于将获取到的音乐时长从毫秒值转换为标准的时间格式。<br>而通过ContentResolver拿到的音乐信息可以参考以下网址:<a href="http://blog.csdn.net/zhutoushifu/article/details/50667862" target="_blank" rel="external">MediaStore部分属性解释</a></p>
</blockquote>
<h3 id="运行效果-1"><a href="#运行效果-1" class="headerlink" title="运行效果"></a>运行效果</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog17/Blog17_2.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>这样一个简单的音乐播放器就完成了，当然一个音乐播放器不止这么简单，还有很多功能是我们可以实现的<br>，但是由于文章篇幅问题，这个简单的demo就先到这里了。<br>后续的修改也不以文章的形式发表，完善更多功能后有时间的话会把完整的项目发布。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;音乐播放器&quot;&gt;&lt;a href=&quot;#音乐播放器&quot; class=&quot;headerlink&quot; title=&quot;音乐播放器&quot;&gt;&lt;/a&gt;音乐播放器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;今天主要讲的是如何自己动手写一个音乐播放器。&lt;br&gt;直接进入主题。  &lt;/p&gt;
&lt;h2 i
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="demo" scheme="https://izdo.github.io/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="https://izdo.github.io/2017/06/25/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://izdo.github.io/2017/06/25/抽象工厂模式/</id>
    <published>2017-06-25T14:36:27.120Z</published>
    <updated>2017-06-25T14:35:14.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="什么是抽象工厂模式"><a href="#什么是抽象工厂模式" class="headerlink" title="什么是抽象工厂模式"></a>什么是抽象工厂模式</h2><blockquote>
<p>抽象工厂模式是所有形态的工厂模式中最为抽象和最具一般性的。抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体类型的情况下，能够创建多个产品族的产品对象。</p>
<p>同样先看一个例子。</p>
<h2 id="新建AbstractFactory工程"><a href="#新建AbstractFactory工程" class="headerlink" title="新建AbstractFactory工程"></a>新建AbstractFactory工程</h2><h3 id="新建Fruit类"><a href="#新建Fruit类" class="headerlink" title="新建Fruit类"></a>新建Fruit类</h3></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建Apple类和Banana类"><a href="#新建Apple类和Banana类" class="headerlink" title="新建Apple类和Banana类"></a>新建Apple类和Banana类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘苹果</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘香蕉</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建NorthApple类和SouthApple类"><a href="#新建NorthApple类和SouthApple类" class="headerlink" title="新建NorthApple类和SouthApple类"></a>新建NorthApple类和SouthApple类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NorthApple</span> <span class="keyword">extends</span> <span class="title">Apple</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘北方苹果"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SouthApple</span> <span class="keyword">extends</span> <span class="title">Apple</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘南方苹果"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建NorthBanana类和SouthBanana类"><a href="#新建NorthBanana类和SouthBanana类" class="headerlink" title="新建NorthBanana类和SouthBanana类"></a>新建NorthBanana类和SouthBanana类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NorthBanana</span> <span class="keyword">extends</span> <span class="title">Banana</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘北方香蕉"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SouthBanana</span> <span class="keyword">extends</span> <span class="title">Banana</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘南方香蕉"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>也就是说，现在Apple类和Banana类都是抽象类，而苹果和香蕉都有南北方之分，这时候只要让南北方苹果的类继承自Apple类即可。让具体的某种水果的抽象工厂去实现具体的产品族，这就是抽象工厂的好处。同样地，对于水果工厂，我们也可以让其分为南方水果工厂和北方水果工厂，通过工厂(南方工厂、被反工厂)来划分而不是通过水果(苹果工厂、香蕉工厂)来划分。</p>
</blockquote>
<h3 id="新建FruitFactory类"><a href="#新建FruitFactory类" class="headerlink" title="新建FruitFactory类"></a>新建FruitFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line">	<span class="comment">// 实例化Apple</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getApple</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">// 实例化Banana</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getBanana</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建NorthFrutFactory类和SouthFruitFactory类"><a href="#新建NorthFrutFactory类和SouthFruitFactory类" class="headerlink" title="新建NorthFrutFactory类和SouthFruitFactory类"></a>新建NorthFrutFactory类和SouthFruitFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NorthFrutFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getApple</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> NorthApple();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getBanana</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> NorthBanana();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SouthFruitFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getApple</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SouthApple();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getBanana</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SouthBanana();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建MainClass类"><a href="#新建MainClass类" class="headerlink" title="新建MainClass类"></a>新建MainClass类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		FruitFactory ff = <span class="keyword">new</span> NorthFrutFactory();</div><div class="line"></div><div class="line">		Fruit apple = ff.getApple();</div><div class="line">		apple.get();</div><div class="line"></div><div class="line">		Fruit banana = ff.getBanana();</div><div class="line">		banana.get();</div><div class="line"></div><div class="line">		FruitFactory ff2 = <span class="keyword">new</span> SouthFruitFactory();</div><div class="line"></div><div class="line">		Fruit apple2 = ff2.getApple();</div><div class="line">		apple2.get();</div><div class="line"></div><div class="line">		Fruit banana2 = ff2.getBanana();</div><div class="line">		banana2.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">采摘北方苹果</div><div class="line">采摘北方香蕉</div><div class="line">采摘南方苹果</div><div class="line">采摘南方香蕉</div></pre></td></tr></table></figure>
<blockquote>
<p>这样我们就可以通过相应地方的工厂获得相应的水果。那么现在我们要新增一种温室水果应该怎样做？</p>
</blockquote>
<h3 id="新建WenshiApple类和WenshiBanana类"><a href="#新建WenshiApple类和WenshiBanana类" class="headerlink" title="新建WenshiApple类和WenshiBanana类"></a>新建WenshiApple类和WenshiBanana类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WenshiApple</span> <span class="keyword">extends</span> <span class="title">Apple</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘温室苹果"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WenshiBanana</span> <span class="keyword">extends</span> <span class="title">Banana</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘温室香蕉"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建WenshiFruitFactory类"><a href="#新建WenshiFruitFactory类" class="headerlink" title="新建WenshiFruitFactory类"></a>新建WenshiFruitFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WenshiFruitFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getApple</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> WenshiApple();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getBanana</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> WenshiBanana();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改main方法"><a href="#修改main方法" class="headerlink" title="修改main方法"></a>修改main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		FruitFactory ff = <span class="keyword">new</span> NorthFrutFactory();</div><div class="line"></div><div class="line">		Fruit apple = ff.getApple();</div><div class="line">		apple.get();</div><div class="line"></div><div class="line">		Fruit banana = ff.getBanana();</div><div class="line">		banana.get();</div><div class="line"></div><div class="line">		FruitFactory ff2 = <span class="keyword">new</span> SouthFruitFactory();</div><div class="line"></div><div class="line">		Fruit apple2 = ff2.getApple();</div><div class="line">		apple2.get();</div><div class="line"></div><div class="line">		Fruit banana2 = ff2.getBanana();</div><div class="line">		banana2.get();</div><div class="line"></div><div class="line">		FruitFactory ff3 = <span class="keyword">new</span> WenshiFruitFactory();</div><div class="line"></div><div class="line">		Fruit apple3 = ff3.getApple();</div><div class="line">		apple3.get();</div><div class="line"></div><div class="line">		Fruit banana3 = ff3.getBanana();</div><div class="line">		banana3.get();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>简单的说，当我们要加入温室苹果时，我们需要新建出温室苹果，然后创建出一个专门用来生产温室水果的工厂类即可。</p>
</blockquote>
<h2 id="工厂方法模式中包含的角色及其职责"><a href="#工厂方法模式中包含的角色及其职责" class="headerlink" title="工厂方法模式中包含的角色及其职责"></a>工厂方法模式中包含的角色及其职责</h2><blockquote>
<ul>
<li>抽象工厂(Creator)角色:抽象工厂模式的核心，包含对多个产品结构的声明，任何工厂类都必须实现这个接口。</li>
<li>具体工厂(Concrete Creator)角色:具体工厂类是抽象工厂的一个实现，负责实例化某个产品族中的产品对象。</li>
<li>抽象(Product)产品角色:抽象工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</li>
<li>具体产品(Concrete Product)角色:抽象工厂模式所创建的具体实例对象。</li>
</ul>
</blockquote>
<h3 id="对照图"><a href="#对照图" class="headerlink" title="对照图"></a>对照图</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog16/Blog16_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="抽象工厂模式的优缺点"><a href="#抽象工厂模式的优缺点" class="headerlink" title="抽象工厂模式的优缺点"></a>抽象工厂模式的优缺点</h2><blockquote>
<p>每种模式都有其优势，但是世界上是没有完美的东西的，在得到某些东西的同时，也必须舍弃一些东西，所以抽象工厂模式同样也有其劣势。<br>抽象工厂模式一个显著的优点是分离接口与实现，客户端使用抽象工厂来创建需要的对象，而客户端根本就不知道具体的实现是谁，客户端只是面向产品的接口编程而已，使其从具体的产品实现中解耦，同时基于接口与实现的分离，使抽象工厂方法模式在切换产品类时更加灵活、容易。<br>而抽象工厂模式的缺点有两个，一是对类文件的爆炸性增加，每次我们需要新增一种水果时，就需要新建许多类，比如现在我们要加入Pear类，这时候我们就需要创建Pear实体类、NonthPear类、SouthPear类以及WenshiPear类，并且在Fruit类和FruitFactory类中做出相应的修改，这样的工作是比较繁琐的，二是不太容易扩展新的产品类，第一点也说过，每当我们新增一个产品类就需要修改抽象工厂，这样的话所有的具体工厂类均会被修改了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;抽象工厂模式&quot;&gt;&lt;a href=&quot;#抽象工厂模式&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式&quot;&gt;&lt;/a&gt;抽象工厂模式&lt;/h1&gt;&lt;h2 id=&quot;什么是抽象工厂模式&quot;&gt;&lt;a href=&quot;#什么是抽象工厂模式&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="Java" scheme="https://izdo.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://izdo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法模式</title>
    <link href="https://izdo.github.io/2017/06/25/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://izdo.github.io/2017/06/25/工厂方法模式/</id>
    <published>2017-06-25T14:36:23.292Z</published>
    <updated>2017-06-25T14:35:04.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="什么是工厂方法模式"><a href="#什么是工厂方法模式" class="headerlink" title="什么是工厂方法模式"></a>什么是工厂方法模式</h2><blockquote>
<p>工厂方法模式同样属于类的创建型模式又被称为多态工厂模式。工厂方法模式我的意义是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类当中。<strong>核心工厂类不再负责产品的创建</strong>，这样核心类称为一个抽象工厂角色，仅负责具体工厂子类必须实现的接口，这样进一步抽象化的好处是使得工厂方法模式可以使系统在不修改具体工厂角色的情况下引进新的产品。</p>
<p>同样先看一个例子。</p>
<h2 id="新建FactoryMethod工程"><a href="#新建FactoryMethod工程" class="headerlink" title="新建FactoryMethod工程"></a>新建FactoryMethod工程</h2><p>将上一篇简单工厂模式工程中的所有类都拷贝过来。<br>回顾一下简单工厂模式，如果我们要添加一种水果，应该怎样做？</p>
</blockquote>
<h3 id="新建Pear类"><a href="#新建Pear类" class="headerlink" title="新建Pear类"></a>新建Pear类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pear</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘梨子"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改FruitFactory类"><a href="#修改FruitFactory类" class="headerlink" title="修改FruitFactory类"></a>修改FruitFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getFruit</span><span class="params">(String type)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"apple"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> Apple.class.newInstance();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"banana"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> Banana.class.newInstance();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"pear"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> Pear.class.newInstance();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			System.out.println(<span class="string">"找不到相应的实例化类"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改main方法"><a href="#修改main方法" class="headerlink" title="修改main方法"></a>修改main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException </span>&#123;</div><div class="line"></div><div class="line">		Fruit apple = FruitFactory.getFruit(<span class="string">"Apple"</span>);</div><div class="line">		Fruit banana = FruitFactory.getFruit(<span class="string">"Banana"</span>);</div><div class="line">		Fruit pear = FruitFactory.getFruit(<span class="string">"pear"</span>);</div><div class="line">		apple.get();</div><div class="line">		banana.get();</div><div class="line">		pear.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这就是简单工厂模式，而上一篇文章结尾也说了简单工厂模式的缺点是有时候需要我们去修改工厂类，扩展性并不好。<br>那么这个时候工厂方法模式就起作用了。</p>
</blockquote>
<h3 id="将FruitFactory修改为接口"><a href="#将FruitFactory修改为接口" class="headerlink" title="将FruitFactory修改为接口"></a>将FruitFactory修改为接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getFruit</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建AppleFactory类和BananaFactory类"><a href="#新建AppleFactory类和BananaFactory类" class="headerlink" title="新建AppleFactory类和BananaFactory类"></a>新建AppleFactory类和BananaFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getFruit</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Apple();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BananaFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getFruit</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Banana();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改main方法-1"><a href="#修改main方法-1" class="headerlink" title="修改main方法"></a>修改main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 获得AppleFactory</span></div><div class="line">		FruitFactory ff = <span class="keyword">new</span> AppleFactory();</div><div class="line">		<span class="comment">// 通过AppleFactory获得Apple实例对象</span></div><div class="line">		Fruit apple = ff.getFruit();</div><div class="line">		apple.get();</div><div class="line"></div><div class="line">		<span class="comment">// 获得BananaFactory</span></div><div class="line">		FruitFactory ff2 = <span class="keyword">new</span> BananaFactory();</div><div class="line">		<span class="comment">// 通过AppleFactory获得Apple实例对象</span></div><div class="line">		Fruit banana = ff2.getFruit();</div><div class="line">		banana.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">采摘苹果</div><div class="line">采摘香蕉</div></pre></td></tr></table></figure>
<blockquote>
<p>可以看到，我们将FruitFactory修改为接口后，想要加入一种水果的话，只要新建相对应的具体水果类和水果工厂并实现FruitFactory接口，然后通过该水果工厂的实例去获取相应水果的实例即可。<br>那么如果我们要加入Pear这种水果应该怎么做？</p>
</blockquote>
<h3 id="新建PearFactory类"><a href="#新建PearFactory类" class="headerlink" title="新建PearFactory类"></a>新建PearFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PearFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getFruit</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Pear();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改main方法-2"><a href="#修改main方法-2" class="headerlink" title="修改main方法"></a>修改main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 获得AppleFactory</span></div><div class="line">		FruitFactory ff = <span class="keyword">new</span> AppleFactory();</div><div class="line">		<span class="comment">// 通过AppleFactory获得Apple实例对象</span></div><div class="line">		Fruit apple = ff.getFruit();</div><div class="line">		apple.get();</div><div class="line"></div><div class="line">		<span class="comment">// 获得BananaFactory</span></div><div class="line">		FruitFactory ff2 = <span class="keyword">new</span> BananaFactory();</div><div class="line">		<span class="comment">// 通过BananaFactory获得Apple实例对象</span></div><div class="line">		Fruit banana = ff2.getFruit();</div><div class="line">		banana.get();</div><div class="line"></div><div class="line">		<span class="comment">// 获得Pearactory</span></div><div class="line">		FruitFactory ff3 = <span class="keyword">new</span> PearFactory();</div><div class="line">		<span class="comment">// 通过PearFactory获得Apple实例对象</span></div><div class="line">		Fruit pear = ff3.getFruit();</div><div class="line">		pear.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">采摘苹果</div><div class="line">采摘香蕉</div><div class="line">采摘梨子</div></pre></td></tr></table></figure>
<blockquote>
<p>可以看到，当我们需要加入一种新的水果时，完全不需要修改FruitFactory类，只需要加入相应的工厂并实现FruitFactory和一个具体对象即可，当我们需要修改某种特定水果的方法时，只需要找出其工厂类并做出相应的修改。</p>
</blockquote>
<h2 id="工厂方法模式中包含的角色及其职责"><a href="#工厂方法模式中包含的角色及其职责" class="headerlink" title="工厂方法模式中包含的角色及其职责"></a>工厂方法模式中包含的角色及其职责</h2><blockquote>
<ul>
<li>抽象工厂(Creator)角色:工厂方法模式的核心，任何工厂类都必须实现这个接口。</li>
<li>具体工厂(Concrete Creator)角色:具体工厂类是抽象工厂的一个实现，负责实例化产品对象。</li>
<li>抽象(Product)产品角色:工厂方法模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</li>
<li>具体产品(Concrete Product)角色:工厂方法模式所创建的具体实例对象。</li>
</ul>
</blockquote>
<h3 id="对照图"><a href="#对照图" class="headerlink" title="对照图"></a>对照图</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog15/Blog15_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="工厂方法模式和简单工厂模式比较"><a href="#工厂方法模式和简单工厂模式比较" class="headerlink" title="工厂方法模式和简单工厂模式比较"></a>工厂方法模式和简单工厂模式比较</h2><blockquote>
<p>工厂方法模式与简单工厂模式在结构上的不同不是很明显。<br>工厂方法类的核心是一个抽象工厂类，而简单工厂模式把核心放在一个具体类上。<br>工厂方法模式之所以有一个别名叫多态性工厂模式是因为具体工厂类都有共同的接口，或者有共同的抽象父类。<br>当系统扩展需要添加新的产品对象时，仅仅需要添加一个具体对象以及一个具体工厂对象，原有工厂对象不需要进行任何修改，也不需要修改客户端，很好的符合了”开放-封闭”原则。而简单工厂模式在添加新产品对象后不得不修改工厂方法，扩展性不好。<br>工厂方法模式退化后可以演变成简单工厂模式。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工厂方法模式&quot;&gt;&lt;a href=&quot;#工厂方法模式&quot; class=&quot;headerlink&quot; title=&quot;工厂方法模式&quot;&gt;&lt;/a&gt;工厂方法模式&lt;/h1&gt;&lt;h2 id=&quot;什么是工厂方法模式&quot;&gt;&lt;a href=&quot;#什么是工厂方法模式&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="Java" scheme="https://izdo.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://izdo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>简单工厂模式</title>
    <link href="https://izdo.github.io/2017/06/25/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://izdo.github.io/2017/06/25/简单工厂模式/</id>
    <published>2017-06-25T14:36:08.101Z</published>
    <updated>2017-06-25T14:34:01.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><h2 id="什么是简单工厂模式"><a href="#什么是简单工厂模式" class="headerlink" title="什么是简单工厂模式"></a>什么是简单工厂模式</h2><blockquote>
<p>简单工厂模式属于类的创建型模式，又叫做静态工厂方法模式。通过专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。  </p>
<p>首先看一个例子</p>
<h2 id="新建SimpleFactory工程"><a href="#新建SimpleFactory工程" class="headerlink" title="新建SimpleFactory工程"></a>新建SimpleFactory工程</h2><h3 id="新建Apple类和Banana类"><a href="#新建Apple类和Banana类" class="headerlink" title="新建Apple类和Banana类"></a>新建Apple类和Banana类</h3></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘苹果</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"采摘苹果"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘香蕉</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"采摘香蕉"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在主函数中实例化两个类"><a href="#在主函数中实例化两个类" class="headerlink" title="在主函数中实例化两个类"></a>在主函数中实例化两个类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 实例化一个Apple</span></div><div class="line">		Apple apple = <span class="keyword">new</span> Apple();</div><div class="line">		<span class="comment">// 实例化一个Banana</span></div><div class="line">		Banana banana = <span class="keyword">new</span> Banana();</div><div class="line"></div><div class="line">		apple.get();</div><div class="line">		banana.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">采摘苹果</div><div class="line">采摘香蕉</div></pre></td></tr></table></figure>
<blockquote>
<p>这是Java基础，相信很容易看懂，而我们能看到Apple类和Banana类都是属于水果，里面都只有一个get()方法，那么我们可以定义一个Fruit接口，然后让具体的实现类去实现这个接口。</p>
</blockquote>
<h3 id="新建Fruit接口"><a href="#新建Fruit接口" class="headerlink" title="新建Fruit接口"></a>新建Fruit接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现类实现接口"><a href="#实现类实现接口" class="headerlink" title="实现类实现接口"></a>实现类实现接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘苹果</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘苹果"</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘香蕉</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘香蕉"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改main函数"><a href="#修改main函数" class="headerlink" title="修改main函数"></a>修改main函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// // 实例化一个Apple</span></div><div class="line">		<span class="comment">// Apple apple = new Apple();</span></div><div class="line">		<span class="comment">// // 实例化一个Banana</span></div><div class="line">		<span class="comment">// Banana banana = new Banana();</span></div><div class="line"></div><div class="line">		<span class="comment">// apple.get();</span></div><div class="line">		<span class="comment">// banana.get();</span></div><div class="line">		</div><div class="line">		<span class="comment">// 使用多态实例化一个Apple</span></div><div class="line">		Fruit apple = <span class="keyword">new</span> Apple();</div><div class="line">		<span class="comment">// 使用多态实例化一个Banana</span></div><div class="line">		Fruit banana = <span class="keyword">new</span> Banana();</div><div class="line">		apple.get();</div><div class="line">		banana.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">采摘苹果</div><div class="line">采摘香蕉</div></pre></td></tr></table></figure>
<blockquote>
<p>可以看到由于接口是不能实例化的，所以这里运用多态实例化了具体类，运行结果是一样的。<br>那么接下来进入正题，所谓工厂模式，就是需要一个工厂来生产出我们所需要的产品而不需要我们自己动手去做，所以我们现在需要一个创建出一个工厂。</p>
</blockquote>
<h3 id="新建FruitFactory工厂类"><a href="#新建FruitFactory工厂类" class="headerlink" title="新建FruitFactory工厂类"></a>新建FruitFactory工厂类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 获得Apple类的实例</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getApple</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Apple();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 获得Banana类的实例</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getBanana</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Banana();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改main方法"><a href="#修改main方法" class="headerlink" title="修改main方法"></a>修改main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// // 实例化一个Apple</span></div><div class="line">		<span class="comment">// Apple apple = new Apple();</span></div><div class="line">		<span class="comment">// // 实例化一个Banana</span></div><div class="line">		<span class="comment">// Banana banana = new Banana();</span></div><div class="line"></div><div class="line">		<span class="comment">// apple.get();</span></div><div class="line">		<span class="comment">// banana.get();</span></div><div class="line"></div><div class="line">		<span class="comment">// // 使用多态实例化一个Apple</span></div><div class="line">		<span class="comment">// Fruit apple = new Apple();</span></div><div class="line">		<span class="comment">// // 使用多态实例化一个Banana</span></div><div class="line">		<span class="comment">// Fruit banana = new Banana();</span></div><div class="line">		<span class="comment">// apple.get();</span></div><div class="line">		<span class="comment">// banana.get();</span></div><div class="line"></div><div class="line">		<span class="comment">// 实例化一个Apple</span></div><div class="line">		Fruit apple = <span class="keyword">new</span> FruitFactory().getApple();</div><div class="line">		<span class="comment">// 实例化一个Banana</span></div><div class="line">		Fruit banana = <span class="keyword">new</span> FruitFactory().getBanana();</div><div class="line">		apple.get();</div><div class="line">		banana.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">采摘苹果</div><div class="line">采摘香蕉</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果还是一样的。<br>但是我们发现要实例化一个具体类我们需要<strong>new FruitFactory().getXXX();</strong> 创建一个匿名对象，这样未免也太麻烦了，所以我们可以将FruitFacotory中的两个方法都改为静态方法，这样就可以直接通过类名调用该方法，而不需要去创建对象了。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 获得Apple类的实例</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getApple</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Apple();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 获得Banana类的实例</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getBanana</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Banana();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">	...</div><div class="line"></div><div class="line">		<span class="comment">// 实例化一个Apple</span></div><div class="line">		Fruit apple = FruitFactory.getApple();</div><div class="line">		<span class="comment">// 实例化一个Banana</span></div><div class="line">		Fruit banana = FruitFactory.getBanana();</div><div class="line">		apple.get();</div><div class="line">		banana.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="工厂模式中包含的角色及其职责"><a href="#工厂模式中包含的角色及其职责" class="headerlink" title="工厂模式中包含的角色及其职责"></a>工厂模式中包含的角色及其职责</h2><blockquote>
<ul>
<li>工厂(Creator)角色: 简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类可以被外界直接调用，创建所需的产品对象。</li>
<li>抽象产品(Product)角色:简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</li>
<li>具体产品(Concrete Product)角色:简单工厂模式所创建的具体实例对象。  <h3 id="对照图"><a href="#对照图" class="headerlink" title="对照图"></a>对照图</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog14/Blog14_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<p>回到刚才的工程中，我们在Fruit工厂类中定义了两个方法，一个用于获取Apple的实例，另一个用于获取Banana的实例，但是水果有很多种，如果我们要获取许多种类的水果的实例，那我们岂不是需要写一堆方法了吗？所以我们可以将这些水果放在一个方法中。</p>
</blockquote>
<h3 id="修改FruitFactory类"><a href="#修改FruitFactory类" class="headerlink" title="修改FruitFactory类"></a>修改FruitFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line">	...</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 获得所有产品对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getFruit</span><span class="params">(String type)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"apple"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> Apple.class.newInstance();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"banana"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> Banana.class.newInstance();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			System.out.println(<span class="string">"找不到相应的实例化类"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>现在我们将获取Apple和Banana实例的方法都放在getFruit()方法中，通过传入的type判断所需要的是什么类型的水果的实例再将其实例返回给调用者，这样就避免的方法过多的情况。</p>
</blockquote>
<h3 id="修改main方法-1"><a href="#修改main方法-1" class="headerlink" title="修改main方法"></a>修改main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException </span>&#123;</div><div class="line"></div><div class="line">		...</div><div class="line"></div><div class="line">		Fruit apple = FruitFactory.getFruit(<span class="string">"apple"</span>);</div><div class="line">		Fruit banana = FruitFactory.getFruit(<span class="string">"banana"</span>);</div><div class="line">		apple.get();</div><div class="line">		banana.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">采摘苹果</div><div class="line">采摘香蕉</div></pre></td></tr></table></figure>
<blockquote>
<p>除了这种方式，我们还可以用另一种方式来获取实例。</p>
</blockquote>
<h3 id="修改FruitFactory类-1"><a href="#修改FruitFactory类-1" class="headerlink" title="修改FruitFactory类"></a>修改FruitFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 获得所有产品对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getFruit</span><span class="params">(String type)</span></span></div><div class="line">			<span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException &#123;</div><div class="line">		<span class="comment">// if (type.equalsIgnoreCase("apple")) &#123;</span></div><div class="line">		<span class="comment">// return Apple.class.newInstance();</span></div><div class="line">		<span class="comment">// &#125; else if (type.equalsIgnoreCase("banana")) &#123;</span></div><div class="line">		<span class="comment">// return Banana.class.newInstance();</span></div><div class="line">		<span class="comment">// &#125; else &#123;</span></div><div class="line">		<span class="comment">// System.out.println("找不到相应的实例化类");</span></div><div class="line">		<span class="comment">// return null;</span></div><div class="line">		<span class="comment">// &#125;</span></div><div class="line"></div><div class="line">		Class fruit = Class.forName(type);</div><div class="line">		<span class="keyword">return</span> (Fruit) fruit.newInstance();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改main方法-2"><a href="#修改main方法-2" class="headerlink" title="修改main方法"></a>修改main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException </span>&#123;</div><div class="line"></div><div class="line">	    ...</div><div class="line"></div><div class="line">		<span class="comment">// // 实例化一个Apple</span></div><div class="line">		<span class="comment">// Fruit apple = FruitFactory.getApple();</span></div><div class="line">		<span class="comment">// // 实例化一个Banana</span></div><div class="line">		<span class="comment">// Fruit banana = FruitFactory.getBanana();</span></div><div class="line">		<span class="comment">// apple.get();</span></div><div class="line">		<span class="comment">// banana.get();</span></div><div class="line"></div><div class="line">		Fruit apple = FruitFactory.getFruit(<span class="string">"Apple"</span>);</div><div class="line">		Fruit banana = FruitFactory.getFruit(<span class="string">"Banana"</span>);</div><div class="line">		apple.get();</div><div class="line">		banana.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们将getFruit()方法更改为由传入的type类型查找相应的Class并实例化，这样虽然将步骤简单化了，我们不再需要去判断对应的类型，但是也有局限性，<br>我们传入的type必须和类名大小写一致，否则会出现<br>NoClassDefFoundError这个异常，减少了灵活性。  </p>
</blockquote>
<h2 id="简单工厂模式的优缺点"><a href="#简单工厂模式的优缺点" class="headerlink" title="简单工厂模式的优缺点"></a>简单工厂模式的优缺点</h2><blockquote>
<p>在这个模式中，工厂类是整个模式的关键所在。它包含必要的判断逻辑，能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。用户在使用时可以直接根据工厂类去创建所需的实例，而无需了解这些对象是如何创建以及如何组织的，有利于整个软件体系结构的优化。<br>不难发现，简单工厂模式的缺点也正体现在其工厂类上，由于工厂类集中了所有实例的创建逻辑，所以”高内聚”方面做的并不好，另外，当系统中的具体产品类不断增多时，可能会出现要求工厂类也要做相应的修改，扩展性并不是很好。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h1&gt;&lt;h2 id=&quot;什么是简单工厂模式&quot;&gt;&lt;a href=&quot;#什么是简单工厂模式&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="Java" scheme="https://izdo.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://izdo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>RxJava2(下)</title>
    <link href="https://izdo.github.io/2017/06/04/RxJava2(%E4%B8%8B)/"/>
    <id>https://izdo.github.io/2017/06/04/RxJava2(下)/</id>
    <published>2017-06-04T01:54:38.652Z</published>
    <updated>2017-06-03T15:16:40.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RxJava2-下"><a href="#RxJava2-下" class="headerlink" title="RxJava2(下)"></a>RxJava2(下)</h1><h2 id="自定义图片缓存框架模型"><a href="#自定义图片缓存框架模型" class="headerlink" title="自定义图片缓存框架模型"></a>自定义图片缓存框架模型</h2><blockquote>
<p>在RxJava2的最后一部分我们利用RxJava2来做一个类似于Picasso的自定义图片缓存框架的模型(具体功能并不实现)，下面是我们要实现的自定义图片缓存框架的流程图。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog13/Blog13_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>解析：当我们发起一个加载图片的请求时，首先是去检查内存中是否有缓存，如果有的话直接显示图片，没有的话就检查文件中是否有缓存，有的话同样直接显示图片，没有的话再从网络上加载，然后再缓存到内存和文件中，通过这样的方式，可以减少从网络上请求数据的操作，这样不仅加快的图片的显示，而且还能降低流量的消耗，而不是说每次都到网络上下载数据。</p>
</blockquote>
<h3 id="新建ImgActivity"><a href="#新建ImgActivity" class="headerlink" title="新建ImgActivity"></a>新建ImgActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjavaop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.jakewharton.rxbinding2.view.RxView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableEmitter;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableOnSubscribe;</div><div class="line"><span class="keyword">import</span> io.reactivex.functions.Consumer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImgActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_img);</div><div class="line"></div><div class="line">        mButton = (Button) findViewById(R.id.btn_get);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// 内存</span></div><div class="line">        <span class="keyword">final</span> Observable&lt;String&gt; memoryObservable = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                e.onNext(<span class="string">"memory"</span>);</div><div class="line">                e.onComplete();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">// 文件</span></div><div class="line">        <span class="keyword">final</span> Observable&lt;String&gt; diskObservable = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                e.onNext(<span class="string">"disk"</span>);</div><div class="line">                e.onComplete();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">// 网络</span></div><div class="line">        <span class="keyword">final</span> Observable&lt;String&gt; netWorkObservable = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                e.onNext(<span class="string">"network"</span>);</div><div class="line">                e.onComplete();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        RxView.clicks(mButton).subscribe(<span class="keyword">new</span> Consumer&lt;Object&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Observable.concat(memoryObservable, diskObservable, netWorkObservable)</div><div class="line">                        .subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                                Log.d(<span class="string">"ImgActivity"</span>, <span class="string">"get data from"</span> + s);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>布局文件同样只有一个按钮。<br>这里通过三个Observable模拟出内存、文件和网络，然后通过concat合并三个Observable(Concat操作符与上一篇文章中的Merge是一样的，只不过Merge可能会使数据发生交错)，最后再打印出合并后的结果即可。</p>
</blockquote>
<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog13/Blog13_2.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>从图中可以看出，获取数据的来源是内存、文件和网络，那么我们刚才所说的内存-&gt;文件-&gt;网络逐一检查该怎么实现呢？这个时候就要用到Filter操作符了。<br>PS：RxJava2与RxJava1有所不同，RxJava1可以使用First操作符限制其只发送第一个非null数据，而在RxJava2中则需要使用Filter进行过滤。</p>
</blockquote>
<h4 id="修改ImgActicity中的代码"><a href="#修改ImgActicity中的代码" class="headerlink" title="修改ImgActicity中的代码"></a>修改ImgActicity中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImgActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">        ...</div><div class="line"></div><div class="line">        RxView.clicks(mButton).subscribe(<span class="keyword">new</span> Consumer&lt;Object&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Observable.concat(memoryObservable, diskObservable, netWorkObservable)</div><div class="line">                        .filter(<span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                                <span class="keyword">return</span> !TextUtils.isEmpty(s);</div><div class="line">                            &#125;</div><div class="line">                        &#125;)</div><div class="line">                        .firstElement()</div><div class="line">                        .subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                                Log.d(<span class="string">"ImgActivity"</span>, <span class="string">"get data from "</span> + s);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里使用Filter过滤掉null对象。<br>需要注意的是，RxJava1是可以发送null对象的，也就是<strong>onNext(null)</strong>，而RxJava2中不能发送null对象，如果使用RxJava2时发送null对象，则会报错：<strong>java.lang.NullPointerException: onNext called with null. Null values are generally not allowed in 2.x operators and sources.</strong>，也就是说RxJava2中不需要发送null对象。<br>那么我们这里的处理就是直接发送空值：<strong>//e.onNext(“”);</strong><br>而通过Filter操作符，这个空值是会被过滤掉的，然后通过FirstElement()获取第一个数据。</p>
</blockquote>
<h5 id="当三个Observable都不为空值时"><a href="#当三个Observable都不为空值时" class="headerlink" title="当三个Observable都不为空值时"></a>当三个Observable都不为空值时</h5><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog13/Blog13_3.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>这个情况代表内存中缓存，则直接读取内存显示图片。</p>
</blockquote>
<h5 id="memoryObservable发送空值"><a href="#memoryObservable发送空值" class="headerlink" title="memoryObservable发送空值"></a>memoryObservable发送空值</h5><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog13/Blog13_4.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>这个情况代表内存无缓存，而文件中右缓存，则直接读取文件显示图片。</p>
</blockquote>
<h5 id="diskObservable发送空值"><a href="#diskObservable发送空值" class="headerlink" title="diskObservable发送空值"></a>diskObservable发送空值</h5><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog13/Blog13_5.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>这个情况代表内存和文件中均无缓存，这个时候则从网络上获取图片然后再显示。<br>这样模拟图片显示的效果就实现了，接下来会正式地编写自定义的图片缓存框架。</p>
</blockquote>
<h2 id="模仿Picasso自定义图片缓存框架"><a href="#模仿Picasso自定义图片缓存框架" class="headerlink" title="模仿Picasso自定义图片缓存框架"></a>模仿Picasso自定义图片缓存框架</h2><blockquote>
<p>在我的OKHttp3框架(上)文章中，曾经使用过Picasso加载图片：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog13/Blog13_6.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Picasso 第三方开源框架</div><div class="line"> * load() 加载图片地址</div><div class="line"> * resize() 设置图片大小</div><div class="line"> * centerCrop() 设置图片圆角</div><div class="line"> * into() 显示到控件</div><div class="line">*/</div><div class="line">Picasso.with(UserInfoActivity.<span class="keyword">this</span>).load(img).resize(<span class="number">100</span>, <span class="number">100</span>).centerCrop().into(mImgview);</div></pre></td></tr></table></figure>
<blockquote>
<p>当我们在使用Picasso框架加载图片的时候，短短的一句话就能让我们成功地获取图片并显示，这样的框架用起来是非常爽的，而我们现在就要模仿Picasso框架的写法，使用RxJava2来自定义一个图片缓存框架。  </p>
</blockquote>
<h3 id="新建RxImageLoader类"><a href="#新建RxImageLoader类" class="headerlink" title="新建RxImageLoader类"></a>新建RxImageLoader类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Imgloader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> io.reactivex.Observer;</div><div class="line"><span class="keyword">import</span> io.reactivex.disposables.Disposable;</div><div class="line"><span class="keyword">import</span> io.reactivex.functions.Predicate;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/31.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 创建单例</span></div><div class="line">    <span class="keyword">static</span> RxImageLoader singleton;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mUrl;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RequestCreator mRequestCreator;</div><div class="line"></div><div class="line">    <span class="comment">// 单例模式私有化构造器</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RxImageLoader</span><span class="params">()</span> </span>&#123;</div><div class="line">        mRequestCreator = <span class="keyword">new</span> RequestCreator();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RxImageLoader <span class="title">with</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (RxImageLoader.class) &#123;</div><div class="line">                <span class="comment">// 当单例为空时则新建一个单例</span></div><div class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">                    singleton = <span class="keyword">new</span> Builder(context).build();</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * url 加载图片的地址</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> RxImageLoader <span class="title">load</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.mUrl = url;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * imgView 显示图片的控件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">into</span><span class="params">(<span class="keyword">final</span> ImageView imgview)</span> </span>&#123;</div><div class="line"></div><div class="line">        Observable.concat(mRequestCreator.getImageFromMemory(mUrl),</div><div class="line">                mRequestCreator.getImageFromDisk(mUrl),</div><div class="line">                mRequestCreator.getImageFromNetwork(mUrl))</div><div class="line">                .filter(<span class="keyword">new</span> Predicate&lt;Image&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Image image)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribe(<span class="keyword">new</span> Observer&lt;Image&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Image value)</span> </span>&#123;</div><div class="line"></div><div class="line">                        imgview.setImageBitmap(value.getBitmap());</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 单例模式创建RxImageLoader</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.mContext = context;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> RxImageLoader <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RxImageLoader();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这种单例模式的创建方法是很常见的，将构造器私有化并在Builder()方法中只创建一个实例，调用者只能用这个实例去调用其他方法。</p>
</blockquote>
<h3 id="新建Image类作为图片封装类"><a href="#新建Image类作为图片封装类" class="headerlink" title="新建Image类作为图片封装类"></a>新建Image类作为图片封装类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Imgloader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Image</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Bitmap bitmap;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Image</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.url = url;</div><div class="line">        <span class="keyword">this</span>.bitmap = bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.url = url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBitmap</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bitmap = bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这个类比较简单，只有一个url地址和bitmap以及其get()、set()方法。</p>
</blockquote>
<h3 id="新建CacheObservable类作为缓存类"><a href="#新建CacheObservable类作为缓存类" class="headerlink" title="新建CacheObservable类作为缓存类"></a>新建CacheObservable类作为缓存类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Imgloader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableEmitter;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableOnSubscribe;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheObservable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;Image&gt; <span class="title">getImage</span><span class="params">(<span class="keyword">final</span> String url)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Image&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Image&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!e.isDisposed()) &#123;</div><div class="line">                    Image image = getDataFromCache(url);</div><div class="line"></div><div class="line">                    e.onNext(image);</div><div class="line">                    e.onComplete();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取缓存</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Image <span class="title">getDataFromCache</span><span class="params">(String url)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 设置缓存</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">putDataToCache</span><span class="params">(Image image)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>由于我们获取缓存的方式有内存、文件和网络，所以需要将这个缓存类作为一个父类，然后每种缓存方式都继承自这个缓存类，而具体的缓存方式处理数据的方式又有所不同，所以缓存类中需要有抽象方法，当子类继承这个缓存类的时候，才去具体实现相应的处理，所以缓存类需要定义为抽象类，而对于getImage()方法来说，每种方式显示图片的方法都是一致的，所以此方法在缓存类中实现即可。</p>
</blockquote>
<h3 id="内存缓存类"><a href="#内存缓存类" class="headerlink" title="内存缓存类"></a>内存缓存类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Imgloader;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryCacheObservable</span> <span class="keyword">extends</span> <span class="title">CacheObservable</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Image <span class="title">getDataFromCache</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putDataToCache</span><span class="params">(Image image)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="文件缓存类"><a href="#文件缓存类" class="headerlink" title="文件缓存类"></a>文件缓存类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Imgloader;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiskCacheObservable</span> <span class="keyword">extends</span> <span class="title">CacheObservable</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Image <span class="title">getDataFromCache</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putDataToCache</span><span class="params">(Image image)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="网络缓存类"><a href="#网络缓存类" class="headerlink" title="网络缓存类"></a>网络缓存类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Imgloader;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkCacheObservable</span> <span class="keyword">extends</span> <span class="title">CacheObservable</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Image <span class="title">getDataFromCache</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putDataToCache</span><span class="params">(Image image)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建RequestCreator类用于实例化三个缓存类"><a href="#新建RequestCreator类用于实例化三个缓存类" class="headerlink" title="新建RequestCreator类用于实例化三个缓存类"></a>新建RequestCreator类用于实例化三个缓存类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Imgloader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestCreator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MemoryCacheObservable mMemoryCacheObservable;</div><div class="line">    <span class="keyword">private</span> DiskCacheObservable mDiskCacheObservable;</div><div class="line">    <span class="keyword">private</span> NetworkCacheObservable mNetworkCacheObservable;</div><div class="line"></div><div class="line">    <span class="comment">// 构造器 初始化三个缓存类</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestCreator</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        mMemoryCacheObservable = <span class="keyword">new</span> MemoryCacheObservable();</div><div class="line">        mDiskCacheObservable = <span class="keyword">new</span> DiskCacheObservable();</div><div class="line">        mNetworkCacheObservable = <span class="keyword">new</span> NetworkCacheObservable();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 从内存中获取图片</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;Image&gt; <span class="title">getImageFromMemory</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mMemoryCacheObservable.getImage(url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 从文件中获取图片</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;Image&gt; <span class="title">getImageFromDisk</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mDiskCacheObservable.getImage(url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 从网络获取图片</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;Image&gt; <span class="title">getImageFromNetwork</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mNetworkCacheObservable.getImage(url);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这个类主要用于创建三种缓存类，而调用者只需要实例化RequestCreator类就能同时操作这三种缓存方式了。<br>这样，自定义图片缓存框架大体上的模板已经完成了。</p>
</blockquote>
<h3 id="新建ImgLoaderActivity类"><a href="#新建ImgLoaderActivity类" class="headerlink" title="新建ImgLoaderActivity类"></a>新建ImgLoaderActivity类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjavaop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.jakewharton.rxbinding2.view.RxView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Imgloader.RxImageLoader;</div><div class="line"><span class="keyword">import</span> io.reactivex.functions.Consumer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImgLoaderActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line">    <span class="keyword">private</span> ImageView mImageView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_imgloader);</div><div class="line"></div><div class="line">        mButton = (Button) findViewById(R.id.btn_getImg);</div><div class="line">        mImageView = (ImageView) findViewById(R.id.imageview);</div><div class="line"></div><div class="line"></div><div class="line">        RxView.clicks(mButton).subscribe(<span class="keyword">new</span> Consumer&lt;Object&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                RxImageLoader.with(ImgLoaderActivity.<span class="keyword">this</span>)</div><div class="line">                        .load(<span class="string">"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1035293498,3690663067&amp;fm=23&amp;gp=0.jpg"</span>)</div><div class="line">                        .into(mImageView);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>自定义的图片缓存框架调用方式和Picasso基本上是一样的，但是由于这只是一个模型，具体的功能并没有实现，所以就不进行测试了。</p>
<p>最后再提供几篇可以参考的文章，本篇文章遇到的bug大多数参考自以下文章以及RxJava2(上)文章开头所提供的几篇文章：<br><a href="http://www.open-open.com/lib/view/open1489980802535.html" target="_blank" rel="external">[转]RxJava1 升级到 RxJava2 所踩过的坑</a><br><a href="http://blog.csdn.net/qq285016127/article/details/63010761" target="_blank" rel="external">[转]深入浅出RxJava2.0_02[新特性]</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RxJava2-下&quot;&gt;&lt;a href=&quot;#RxJava2-下&quot; class=&quot;headerlink&quot; title=&quot;RxJava2(下)&quot;&gt;&lt;/a&gt;RxJava2(下)&lt;/h1&gt;&lt;h2 id=&quot;自定义图片缓存框架模型&quot;&gt;&lt;a href=&quot;#自定义图片缓存框架模型&quot;
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
