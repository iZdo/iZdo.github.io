<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iZdo&#39;s Blog</title>
  <subtitle>bonbolu</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://izdo.github.io/"/>
  <updated>2017-09-03T07:23:51.030Z</updated>
  <id>https://izdo.github.io/</id>
  
  <author>
    <name>iZdo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内存优化(下)</title>
    <link href="https://izdo.github.io/2017/09/03/%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96(%E4%B8%8B)/"/>
    <id>https://izdo.github.io/2017/09/03/内存优化(下)/</id>
    <published>2017-09-03T07:24:49.475Z</published>
    <updated>2017-09-03T07:23:51.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存优化-下"><a href="#内存优化-下" class="headerlink" title="内存优化(下)"></a>内存优化(下)</h1><h2 id="内存优化—减少内存使用（Reduce）"><a href="#内存优化—减少内存使用（Reduce）" class="headerlink" title="内存优化—减少内存使用（Reduce）"></a>内存优化—减少内存使用（Reduce）</h2><p>如果减少某些不必要内存的使用，也可以达到内存优化的目的。</p>
<p>比如说Bitmap。它在使用时会花掉较多的内存。那我们就可以考虑在应用bitmap时减少某些不必要内存的使用。</p>
<ul>
<li><p>边界压缩：一张拍出来的图片分辨率可能会很大，如果不做压缩去展示的话，会消耗大量内存，可能造成OOM，通过BitmapFactory.Options去设置inSampleSize，可以对图片进行边界的压缩，减少内存开销。（做法：先设置BitmapFactory.inJustDecodeBounds为true，然后decodeFile，这样将会只去解析图片大小等信息，避免了将原图加载进内存。拿到原图尺寸信息后，根据业务逻辑换算比例，设置inSampleSize，接着设置BitmapFactory.inJustDecodeBounds为false，最后再去decodeFile，从而实现对图片边界大小进行了压缩再展示。）</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_1.jpg?raw=true" alt=""></p>
</li>
<li><p>色彩压缩：除此之外，还可以通过设置Bitmap图片的Config配置来减少内存使用。配置有以下四种：</p>
<blockquote>
<p>ALPHA_8（Alpha由8位组成，代表8位Alpha位图）</p>
<p>ARGB_4444（由4个4位组成即16位，代表16位ARGB位图）</p>
<p>ARGB_8888（由4个8位组成即32位，代表32位ARGB位图，图片质量最佳）</p>
<p>RGB_565（R为5位，G为6位，B为5位，共16位，它是没有透明度的）</p>
</blockquote>
<p>如果配置不一样，需要的内存也不同。比如ARGB4444、ARGB8888、RGB565。配置的位数越高，图片质量越佳，当然需要的内存就越多。如果图片不需要透明度，就采用RGB565的配置。通过Bitmap.Config配置，也可以起到压缩图片大小作用。</p>
<p>在实际中，可以通过以下代码来进行图片转bitmap解码时的Config。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">options.inPreferredConfig = Bitmap.Config.RGB_565;</div><div class="line">Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.ic_menu_add, options);</div></pre></td></tr></table></figure>
</li>
<li><p>如果通过在列表中展示缩略图的形式来加载图片，如果需要查看高清图片，另启动一个页面（对话框）来加载高清图片，这样可以避免在列表中加载太多高清图片，减少内存开销。</p>
</li>
</ul>
<h2 id="内存优化—回收（Recycle）"><a href="#内存优化—回收（Recycle）" class="headerlink" title="内存优化—回收（Recycle）"></a>内存优化—回收（Recycle）</h2><p>一些资源时使用时记得回收，比如说<strong>BraodcastReceiver，ContentObserver，File，Cursor，Stream，Bitmap</strong>、<strong>TypeArray</strong>等资源的代码，应该在使用之后或者Activity销毁时及时关闭或者注销，否则这些资源可能将不会被回收，造成内存泄漏。</p>
<h2 id="内存优化—重用（Reuse）"><a href="#内存优化—重用（Reuse）" class="headerlink" title="内存优化—重用（Reuse）"></a>内存优化—重用（Reuse）</h2><h3 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h3><p>在程序里面经常会遇到的一个问题是短时间内创建大量的对象，导致内存紧张，从而触发GC导致性能问题。对于这个问题，我们可以使用对象池技术来解决它。通常对象池中的对象可能是bitmaps，views，messages等等。</p>
<p>比如说Message.obtain()方法。通过handler去发消息Message时，通过Message.obtain()来获得一个消息，就比直接通过new一个Message要更好。因为Message中内部就维护了一个对象池用来存放消息，通过obtain方法来取消息的话，会先从内部的对象池中去取，如果取不到，再去新创建一个消息进行使用。</p>
<p>关于对象池的操作原理，请看下面的图示：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_2.png?raw=true" alt=""></p>
<p>使用对象池技术有很多好处，它可以避免内存抖动，提升性能，但是在使用的时候有一些内容是需要特别注意的。通常情况下，初始化的对象池里面都是空白的，当使用某个对象的时候先去对象池查询是否存在，如果不存在则创建这个对象然后加入对象池。</p>
<p>但是我们也可以在程序刚启动的时候就事先为对象池填充一些即将要使用到的数据，这样可以在需要使用到这些对象的时候提供更快的首次加载速度，这种行为就叫做<strong>预分配</strong>。</p>
<p>使用对象池也有不好的一面，我们需要手动管理这些对象的分配与释放，所以我们需要慎重地使用这项技术，避免发生对象的内存泄漏。为了确保所有的对象能够正确被释放，我们需要保证加入对象池的对象和其他外部对象没有互相引用的关系。</p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>无论是为了提高CPU的计算速度还是提高数据的访问速度，在绝大多数的场景下，我们都会使用到缓存。</p>
<p>例如缓存到内存里面的图片资源，网络请求返回数据的缓存等等。凡是可能需要反复读取的数据，都建议使用合适的缓存策略。比如图片三级缓存、ListView中的Adapter使用contentView进行复用、使用holder避免重复的findViewById。再比如以下的代码，都是缓存的体现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原代码</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(i&lt;getCount())&#123;</div><div class="line">        Log.d(<span class="string">"TAG"</span>, <span class="string">"some log"</span> + i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//有缓存体现的代码，避免重复调用1024次getCount方法</span></div><div class="line"><span class="keyword">int</span> count = getCount();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(i&lt;count)&#123;</div><div class="line">        Log.d(<span class="string">"TAG"</span>, <span class="string">"some log"</span> + i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="缓存中的lru算法"><a href="#缓存中的lru算法" class="headerlink" title="缓存中的lru算法"></a>缓存中的lru算法</h4><p>lru算法（Least Recently Use），即最近最少使用算法，在Android中比较常用。当内存超过限定大小时，凡是近时间内最少使用的那一个对象，就会从缓存容器中被移除掉。</p>
<p>LRU Cache的基础构建用法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//往缓存中添加图片，PicUrl是图片的地址，将其作为key，bitmap位图则作为value</span></div><div class="line">bitmapLRUCache.put(picUrl,bitmap);</div><div class="line"><span class="comment">//通过picUrl图片地址，从缓存中取bitmap</span></div><div class="line">bitmapLRUCache.get(picUrl);</div></pre></td></tr></table></figure>
<p>为了给LRU Cache设置一个比较合理的缓存大小值，我们通常是用下面的方法来做界定的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当前应用最大可用内存</span></div><div class="line"><span class="keyword">long</span> maxMemory = Runtime.getRuntime().maxMemory();</div><div class="line"><span class="comment">//创建一个LRUCache，设置缓存大小界限为最大可用内存的八分之一</span></div><div class="line">BitmapLRUCache bitmapLRUCache = <span class="keyword">new</span> BitmapLRUCache((<span class="keyword">int</span>)maxMemory / <span class="number">8</span>);</div></pre></td></tr></table></figure>
<p>使用LRU Cache时为了能够让Cache知道每个加入的Item的具体大小，我们需要Override下面的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitmapLRUCache</span> <span class="keyword">extends</span> <span class="title">LruCache</span>&lt;<span class="title">String</span>,<span class="title">Bitmap</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitmapLRUCache</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(maxSize);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> byteCount = value.getByteCount();<span class="comment">//该bitmap位图所占用的内存字节数</span></div><div class="line">        <span class="keyword">return</span> byteCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="内存优化—检查（Review）"><a href="#内存优化—检查（Review）" class="headerlink" title="内存优化—检查（Review）"></a>内存优化—检查（Review）</h2><p>代码写完了只是个开始。比较规范的编码，都需要Review的。代码检查时的注意点可参考上述内容。</p>
<p>接下来要提到的是UI检查。</p>
<h3 id="查看UI布局是否过度绘制（overdraw）"><a href="#查看UI布局是否过度绘制（overdraw）" class="headerlink" title="查看UI布局是否过度绘制（overdraw）"></a>查看UI布局是否过度绘制（overdraw）</h3><p>查看的前提是：移动设备已经开启了<strong>开发者选项</strong>。</p>
<p>在开发者选项中，点击“调试GPU过度绘制”，将弹出对话框，然后选择“显示过度绘制区域”，如下图所示：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_3.jpg?raw=true" alt=""></p>
<p>屏幕这时候会变得花花绿绿的. 这些颜色是用来帮助你诊断应用程序的显示行为的。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_4.jpg?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这些颜色用于表示每个像素被重绘的次数, 含义如下：</p>
<blockquote>
<p>真实颜色: 没有被重绘</p>
<p>蓝色: 重绘一次</p>
<p>绿色: 重绘两次</p>
<p>粉色: 重绘三次</p>
<p>红色: 重绘四次或更多次 </p>
</blockquote>
<p><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_5.png?raw=true" alt=""></p>
<p>通过这个工具，可以实现这些事情：</p>
<ul>
<li>展示一个APP在何处做了不必要的渲染绘制。</li>
</ul>
<ul>
<li>帮助你查看在哪里可以减少渲染绘制。</li>
</ul>
<p>有些重绘是不可避免的. 尽量调整APP的用户界面, 目标是让大部分的屏幕都是真实的颜色以及重绘一次的蓝色。</p>
<h3 id="查看UI布局的渲染速度"><a href="#查看UI布局的渲染速度" class="headerlink" title="查看UI布局的渲染速度"></a>查看UI布局的渲染速度</h3><p>查看的前提是：移动设备已经开启了<strong>开发者选项</strong>。</p>
<p>在开发者选项中，点击“GPU呈现模式分析”，将弹出对话框，然后选择“在屏幕上显示为条形图”，如下图所示：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_6.jpg?raw=tru" alt=""></p>
<p>这时，将会在屏幕下方出现条形图，如下图所示：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_7.jpg?raw=tru" alt=""></p>
<p>该工具会为每个可见的APP显示一个图表，水平轴即时间流逝, 垂直轴表示每帧经过的时间,单位是毫秒。</p>
<p>在与APP的交互中, 垂直栏会显示在屏幕上, 从左到右移动, 随着时间推移，绘制帧的性能将会迅速体现出来。</p>
<p>绿色的线是用于标记16毫秒的分隔线（PS：人眼的原因, 1秒24帧的动画才能感到顺畅. 所以每帧的时间大概有41ms多一点点(1000ms/24). 但是但是, 注意了, 这41ms不是全都留给你<a href="http://www.07net01.com/tags-Java-0.html" target="_blank" rel="external">Java</a>代码, 而是所有java native 屏幕等等的, <strong>最后留给我们用java级别代码发挥的时间, 只有16~17ms</strong>），只要有一帧超过了绿线, 你的APP就会丢失一帧。</p>
<h3 id="查看UI布局的层级和实现方式"><a href="#查看UI布局的层级和实现方式" class="headerlink" title="查看UI布局的层级和实现方式"></a>查看UI布局的层级和实现方式</h3><p>有的UI界面写的效率比较低，我们可以通过一些工具来进行UI方面的视图检查。Hierarchy Viewer工具可以展示当前手机界面的View层级。</p>
<p>使用该工具的前提是：只能在模拟器或开发版手机上才能用，普通的商业手机是无法连上的。主要是出于安全考虑，普通商业手机中view server这个服务是没有开启的. Hierarchy Viewer就无法连接到机器获取view层级信息。（PS：如果愿意花功夫捣鼓，也可以在真机上强行开启View Server，详情见[网上资料][<a href="http://blog.csdn.net/autumn_xl/article/details/40741835]）" target="_blank" rel="external">http://blog.csdn.net/autumn_xl/article/details/40741835]）</a></p>
<p>先打开模拟器运行要查看的页面，然后打开Hierarchy Viewer工具，它位于android的sdk所在目录中，具体位置为…\sdk\tools\hierarchyviewer.bat。打开后如图所示：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_8.jpg?raw=tru" alt=""></p>
<p>列表展示手机中已打开的页面（包括状态栏等）。这里以电话应用中的DialtactsActivity为例，双击DialtactsActivity，将会打开关于该页面的树状图。如下图所示：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_9.jpg?raw=tru" alt=""></p>
<p>图中标出了3个部分：</p>
<ul>
<li><p>① Tree View：</p>
<p>树状图的形式展示该Activity中的View层级结构。可以放大缩小，每个节点代表一个View，点击可以弹出其属性的当前值，并且在LayoutView中会显示其在界面中相应位置。</p>
</li>
<li><p>② Tree Overview</p>
<p>它是Tree View的概览图。有一个选择框， 可以拖动选择查看。选中的部分会在Tree View中显示</p>
</li>
<li><p>③ Layout View</p>
<p>匹配手机屏幕的视图，如果在Tree View中点击了某个节点，呢么这个节点在手机中的真是位置将会在Layout View中以红框的形式被标出。</p>
</li>
</ul>
<p>接下来介绍点击Tree View中某个节点时，它所展示的信息类似于下图：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_10.jpg?raw=tru" alt=""></p>
<p>下面的三个圆点，依次表示Measure、Layout、Draw，可以理解为对应View的onMeasure，onLayout，onDraw三个方法的执行速度。</p>
<ul>
<li>绿色：表示该View的此项性能比该View Tree中超过50%的View都要快。</li>
<li>黄色：表示该View的此项性能比该View Tree中超过50%的View都要慢。</li>
<li>红色：表示该View的此项性能是View Tree中最慢的。</li>
</ul>
<p>如果界面中的Tree View中红点较多，那就需要注意了。一般的布局可能有以下几点：</p>
<ol>
<li>Measure红点，可能是布局中多次嵌套RelativeLayout，或是嵌套的LinearLayout都使用了weight属性。</li>
<li>Layout红点，可能是布局层级太深。</li>
<li>Draw红点，可能是自定义View的绘制有问题，复杂计算等。</li>
</ol>
<h2 id="UI布局优化"><a href="#UI布局优化" class="headerlink" title="UI布局优化"></a>UI布局优化</h2><h3 id="避免过度绘制-Overdraw"><a href="#避免过度绘制-Overdraw" class="headerlink" title="避免过度绘制(Overdraw)"></a>避免过度绘制(Overdraw)</h3><h3 id="减少布局层级"><a href="#减少布局层级" class="headerlink" title="减少布局层级"></a>减少布局层级</h3><h3 id="复用（id、style）"><a href="#复用（id、style）" class="headerlink" title="复用（id、style）"></a>复用（id、style）</h3><h3 id="使用include、merge、viewStub标签"><a href="#使用include、merge、viewStub标签" class="headerlink" title="使用include、merge、viewStub标签"></a>使用include、merge、viewStub标签</h3><h4 id="include标签"><a href="#include标签" class="headerlink" title="include标签"></a>include标签</h4><p>include标签常用于将布局中的公共部分提取出来供其他layout共用，以实现布局模块化，这在布局编写上提供了大大的便利。</p>
<p>下面以在一个布局main.xml中用include引入另一个布局foot.xml为例。main.mxl代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/simple_list_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"@dimen/dp_80"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/foot.xml"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 其中include引入的foot.xml为公用的页面底部，foot.xml代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/dp_40"</span></div><div class="line">        <span class="attr">android:layout_above</span>=<span class="string">"@+id/text"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/dp_40"</span></div><div class="line">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/app_name"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;include&gt;</code>标签唯一需要的属性是layout属性，指定需要包含的布局文件。在该标签中，还可以定义android:id和android:layout_*属性来覆盖被引入布局根节点的对应属性值。注意重新定义android:id后，子布局的顶结点i就变化了。</p>
<h4 id="merge标签"><a href="#merge标签" class="headerlink" title="merge标签"></a>merge标签</h4><p>在使用了include后可能导致布局嵌套过多，多余不必要的layout节点，从而导致解析变慢，不必要的节点和嵌套可通过上文中提到的hierarchy viewer来查看。而<code>merge</code>标签可以消除那些include时不必要的layout节点。</p>
<p><code>merge</code>标签可用于两种典型情况：</p>
<ol>
<li>布局顶结点是FrameLayout且不需要设置background或padding等属性，可以用merge代替，因为Activity内容试图的parent view就是个FrameLayout，所以可以用merge消除只剩一个。</li>
<li>某布局作为子布局被其他布局include时，使用merge当作该布局的顶节点，这样在被引入时顶结点会自动被忽略，而将其子节点全部合并到主布局中</li>
</ol>
<p>以上一节中的<code>&lt;include&gt;</code>标签的示例为例，用hierarchy viewer查看main.xml布局如下图：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_11.jpg?raw=tru" alt=""></p>
<p>可以发现多了一层没必要的RelativeLayout，将foot.xml中RelativeLayout改为merge，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/dp_40"</span></div><div class="line">        <span class="attr">android:layout_above</span>=<span class="string">"@+id/text"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/dp_40"</span></div><div class="line">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/app_name"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行后再次用hierarchy viewer查看main.xml布局如下图：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog19/Blog19_12.jpg?raw=tru" alt=""></p>
<p>这样就不会有多余的RelativeLayout节点了。</p>
<h4 id="viewStub标签"><a href="#viewStub标签" class="headerlink" title="viewStub标签"></a>viewStub标签</h4><p>viewstub标签同include标签一样可以用来引入一个外部布局，不同的是，viewstub引入的布局默认不会扩张，即既不会占用显示也不会占用位置，从而在解析layout时节省cpu和内存。</p>
<p>viewstub常用来引入那些默认不会显示，只在特殊情况下显示的布局，如进度布局、网络失败显示的刷新布局、信息出错出现的提示布局等。</p>
<p>下面以在一个布局main.xml中加入网络错误时的提示页面network_error.xml为例。main.mxl代码如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line">	……</div><div class="line">    <span class="tag">&lt;<span class="name">ViewStub</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/network_error_layout"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout</span>=<span class="string">"@layout/network_error"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中network_error.xml为只有在网络错误时才需要显示的布局，默认不会被解析，示例代码如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/network_setting"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"@dimen/dp_160"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/network_setting"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/network_refresh"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"@dimen/dp_160"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_below</span>=<span class="string">"@+id/network_setting"</span></div><div class="line">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"@dimen/dp_10"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/network_refresh"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在java中通过(ViewStub)findViewById(id)找到ViewStub，通过stub.inflate()展开ViewStub，然后得到子View，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> View networkErrorView;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showNetError</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// not repeated infalte</span></div><div class="line">	<span class="keyword">if</span> (networkErrorView != <span class="keyword">null</span>) &#123;</div><div class="line">		networkErrorView.setVisibility(View.VISIBLE);</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	ViewStub stub = (ViewStub)findViewById(R.id.network_error_layout);</div><div class="line">	networkErrorView = stub.inflate();</div><div class="line">	Button networkSetting = (Button)networkErrorView.findViewById(R.id.network_setting);</div><div class="line">	Button refresh = (Button)findViewById(R.id.network_refresh);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showNormal</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (networkErrorView != <span class="keyword">null</span>) &#123;</div><div class="line">		networkErrorView.setVisibility(View.GONE);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 在上面showNetError()中展开了ViewStub，同时我们对networkErrorView进行了保存，这样下次不用继续inflate。</p>
<p>上面展开ViewStub部分代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ViewStub stub = (ViewStub)findViewById(R.id.network_error_layout);</div><div class="line">networkErrorView = stub.inflate();</div></pre></td></tr></table></figure>
<p>也可以写成下面的形式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">View viewStub = findViewById(R.id.network_error_layout);</div><div class="line">viewStub.setVisibility(View.VISIBLE);   <span class="comment">// ViewStub被展开后的布局所替换</span></div><div class="line">networkErrorView =  findViewById(R.id.network_error_layout); <span class="comment">// 获取展开后的布局</span></div></pre></td></tr></table></figure>
<p>两者效果一致，只是不用显示的转换为ViewStub。通过viewstub的原理我们可以知道将一个view设置为GONE不会被解析，从而提高layout解析速度，而VISIBLE和INVISIBLE这两个可见性属性会被正常解析。</p>
<h2 id="AsncTask简介"><a href="#AsncTask简介" class="headerlink" title="AsncTask简介"></a>AsncTask简介</h2><p>系统提供的轻量级后台加载的异步任务类<br>Thread池+Handler<br>3.0之前 线程池是并行的(内部有好几个线程在同时工作)<br>3.0之后 串行(默认线程池中只有一个线程在工作) 原因：先前的并行，一旦工作任务量很大，导致线程不够用而崩溃/卡顿。<br>可以手动改回并行</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;内存优化-下&quot;&gt;&lt;a href=&quot;#内存优化-下&quot; class=&quot;headerlink&quot; title=&quot;内存优化(下)&quot;&gt;&lt;/a&gt;内存优化(下)&lt;/h1&gt;&lt;h2 id=&quot;内存优化—减少内存使用（Reduce）&quot;&gt;&lt;a href=&quot;#内存优化—减少内存使用（Redu
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>内存优化(上)</title>
    <link href="https://izdo.github.io/2017/09/03/%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96(%E4%B8%8A)/"/>
    <id>https://izdo.github.io/2017/09/03/内存优化(上)/</id>
    <published>2017-09-03T07:24:49.472Z</published>
    <updated>2017-09-03T06:29:25.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存优化-上"><a href="#内存优化-上" class="headerlink" title="内存优化(上)"></a>内存优化(上)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么内存优化？</p>
<p>在一个商业项目中，很有可能因为工程师的疏忽，导致代码质量不佳，影响到程序的运行效率，从而让用户感知到应用的卡顿、崩溃。而Android开发中，每个Android应用在手机上申请的内存空间都是有限的。虽然手机发展越来越快，可申请到的内存越来越大，但是也不能大手大脚，随便浪费应用可使用的内存空间。内存一旦不够时，你这个应用就会因为OOM（out of memory）而崩溃。因此，内存优化这一块内容，在开发应用时是非常重要的。</p>
<h2 id="内存优化的关键点—避免内存泄露"><a href="#内存优化的关键点—避免内存泄露" class="headerlink" title="内存优化的关键点—避免内存泄露"></a>内存优化的关键点—避免内存泄露</h2><p>内存优化中非常关键的一点，就是避免内存泄露。因为内存泄露会严重的导致内存浪费，所以避免内存泄露，是内存优化中必不可少的。</p>
<h2 id="java中的四种引用类型"><a href="#java中的四种引用类型" class="headerlink" title="java中的四种引用类型"></a>java中的四种引用类型</h2><p>java引用类型不是指像int、char等这些基本的数据类型。java中的引用类型有四种：强引用、软引用、弱引用、虚引用。这四种引用类型，它们关于对象的可及性是由强到弱的。</p>
<h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>最常见的强引用方式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//强引用  对象类型 对象名 = new 对象构造方法();</span></div><div class="line"><span class="comment">//比如下列代码</span></div><div class="line">String str = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div></pre></td></tr></table></figure>
<p>在上述代码中，这个str对象就是强可及对象。<strong>强可及对象永远不会被GC回收。</strong>它宁愿被抛出OOM异常，也不会回收掉强可及对象。</p>
<p>清除强引用对象中的引用链如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div><div class="line"><span class="comment">//置空</span></div><div class="line">str = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<h3 id="软应用"><a href="#软应用" class="headerlink" title="软应用"></a>软应用</h3><p>软引用方式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//软引用SoftReference</span></div><div class="line">SoftReference&lt;String&gt; softReference = <span class="keyword">new</span> SoftReference&lt;String&gt;(str);</div></pre></td></tr></table></figure>
<p>在上述代码中，这个str对象就是软可及对象。<strong>当系统内存不足时，软可及对象会被GC回收。</strong></p>
<p>清除软引用对象中的引用链可以通过模拟系统内存不足来清除，也可以手动清除，手动清除如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SoftReference&lt;String&gt; softReference = <span class="keyword">new</span> SoftReference&lt;String&gt;(str);</div><div class="line">softReference.clear();</div></pre></td></tr></table></figure>
<h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>弱引用方式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//弱引用WeakReference</span></div><div class="line">WeakReference&lt;String&gt; weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(str);</div></pre></td></tr></table></figure>
<p>在上述代码中，这个str对象就是弱可及对象。<strong>当每次GC时，弱可及对象就会被回收。</strong></p>
<p>清除弱引用对象中的引用链可以通过手动调用gc代码来清除，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WeakReference&lt;String&gt; weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(str);</div><div class="line">System.gc();</div></pre></td></tr></table></figure>
<p>当然，也可以通过类似软引用，调用clear()方法也可以。</p>
<h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>虚引用方式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//虚引用PhantomReference</span></div><div class="line">PhantomReference phantomReference = <span class="keyword">new</span> PhantomReference&lt;&gt;(arg0, arg1);</div></pre></td></tr></table></figure>
<p>虚引用一般在代码中出现的频率极低，主要目的是为了检测对象是否已经被系统回收。它在一些用来检测内存是否泄漏的开源项目中使用到过，如LeakCanary。</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul>
<li>一个对象的可及性由最强的那个来决定。 </li>
</ul>
<ul>
<li>System.gc()方法只会回收堆内存中存放的对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"abc"</span>;</div><div class="line"><span class="comment">//弱引用WeakReference</span></div><div class="line">WeakReference&lt;String&gt; weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(str);</div><div class="line">System.gc();</div></pre></td></tr></table></figure>
<p>​    像这样的代码，即使gc后，str对象仍然可以通过弱引用拿到。因为像”abc”这种，并没有存放在堆内    存中，它被存放在常量池里，所以gc不会去回收。</p>
<h2 id="内存泄露的原因"><a href="#内存泄露的原因" class="headerlink" title="内存泄露的原因"></a>内存泄露的原因</h2><p><strong>对无用对象的引用一直未被释放，就会导致内存泄露。</strong>如果对象已经用不到了，但是因为疏忽，导致代码中对该无用对象的引用一直没有被清除掉，就会造成内存泄露。</p>
<p>比如你按back键关掉了一个Activity，那么这个Activity页面就暂时没用了。但是某个后台任务如果一直持有着对该Activity对象的引用，这个时候就会导致内存泄露。</p>
<h2 id="检测内存泄露—LeakCanary"><a href="#检测内存泄露—LeakCanary" class="headerlink" title="检测内存泄露—LeakCanary"></a>检测内存泄露—LeakCanary</h2><p>在全球最大的同性交友网站<a href="http://www.github.com" target="_blank" rel="external">github</a>中，有一个非常流行的开源项目<a href="https://github.com/square/leakcanary" target="_blank" rel="external">LeakCanary</a>，它能很方便的检测到当前开发的java项目中是否存在内存泄露。</p>
<h2 id="LeakCanary的使用"><a href="#LeakCanary的使用" class="headerlink" title="LeakCanary的使用"></a>LeakCanary的使用</h2><h3 id="官方使用文档描述"><a href="#官方使用文档描述" class="headerlink" title="官方使用文档描述"></a>官方使用文档描述</h3><p>从LeakCanary的文档描述中，可以得知使用方式，简单翻译为如下步骤：</p>
<ol>
<li><p>在你的项目中，找到moudle级别的build.gradle文件，并在dependencies标签里加上以下代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">//... 你项目中以前声明的一些依赖</div><div class="line">  debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'</div><div class="line">  releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'</div><div class="line">  testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在你Android项目中，找到先前写的Application类（PS：如果没有，那么请自行新建并在AndroidManifest中声明），并添加如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    <span class="keyword">if</span> (LeakCanary.isInAnalyzerProcess(<span class="keyword">this</span>)) &#123;</div><div class="line">      <span class="comment">// This process is dedicated to LeakCanary for heap analysis.</span></div><div class="line">      <span class="comment">// You should not init your app in this process.</span></div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    LeakCanary.install(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">// Normal app init code...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>导入完毕！当你的应用出现内存泄露时，LeakCanary会在通知栏上进行通知，注意查看。下图是一个LeakCanary检测到内存泄露时的实示例。<br><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog18/Blog18_1.png?raw=true" alt=""></p>
</li>
</ol>
<h3 id="检测Fragment"><a href="#检测Fragment" class="headerlink" title="检测Fragment"></a>检测Fragment</h3><p>上述步骤默认会检测Activity，但是不会去检测Fragment，如果需要对某个Fragment检测的话，需要利用到LeakCanary的其他写法。</p>
<p>首先，在先前的Application类中，改写为以下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RefWatcher mRefWatcher;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        <span class="comment">//...</span></div><div class="line">        mRefWatcher = LeakCanary.install(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">// Normal app init code...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在Fragment中的onDestroy方法中，去使用这个静态的RefWatcher进行观察，如果onDestroy了当前这个Fragment还没被回收，说明该Fragment产生了内存泄露。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    MyApplication.mRefWatcher.watch(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="检测某个特定对象"><a href="#检测某个特定对象" class="headerlink" title="检测某个特定对象"></a>检测某个特定对象</h3><p>有时候如果需要检测某个特定的可疑对象在某个时机下是否内存泄露，那么只需要执行如下代码</p>
<p>（假如对象名为someObjNeedGced）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> 	<span class="comment">//...</span></div><div class="line">    RefWatcher refWatcher = MyApplication.refWatcher;</div><div class="line">    refWatcher.watch(someObjNeedGced);</div><div class="line"><span class="comment">//...</span></div></pre></td></tr></table></figure>
<p>当执行了refWatcher.watch方法时，如果这个对象还在内存中被其他对象引用，就会在 logcat 里看到内存泄漏的提示。</p>
<h2 id="LeakCanary的原理简介"><a href="#LeakCanary的原理简介" class="headerlink" title="LeakCanary的原理简介"></a>LeakCanary的原理简介</h2><p>LeakCanary的代码执行流程图如下：</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog18/Blog18_2.png?raw=true" alt=""></p>
<p>LeakCanary 的机制如下：</p>
<ol>
<li><code>RefWatcher.watch()</code> 会以监控对象来创建一个<code>KeyedWeakReference</code> 弱引用对象</li>
<li>在<code>AndroidWatchExecutor</code>的后台线程里，来检查弱引用已经被清除了，如果没被清除，则执行一次 GC</li>
<li>如果弱引用对象仍然没有被清除，说明内存泄漏了，系统就导出 hprof 文件，保存在 app 的文件系统目录下</li>
<li><code>HeapAnalyzerService</code>启动一个单独的进程，使用<code>HeapAnalyzer</code>来分析 hprof 文件。它使用另外一个开源库 <a href="https://github.com/square/haha" target="_blank" rel="external">HAHA</a>。</li>
<li><code>HeapAnalyzer</code> 通过查找<code>KeyedWeakReference</code> 弱引用对象来查找内在泄漏</li>
<li><code>HeapAnalyzer</code>计算<code>KeyedWeakReference</code>所引用对象的最短强引用路径，来分析内存泄漏，并且构建出对象引用链出来。</li>
<li>内存泄漏信息送回给<code>DisplayLeakService</code>，它是运行在 app 进程里的一个服务。然后在设备通知栏显示内存泄漏信息。</li>
</ol>
<h2 id="常见的内存泄露"><a href="#常见的内存泄露" class="headerlink" title="常见的内存泄露"></a>常见的内存泄露</h2><h3 id="内部类导致内存泄露"><a href="#内部类导致内存泄露" class="headerlink" title="内部类导致内存泄露"></a>内部类导致内存泄露</h3><p>内部类实例会隐式的持有外部类的引用。</p>
<p>比如说在Activity中去创建一个内部类实例，然后在内部类实例中去执行一些需要耗时间的任务。任务在执行过程中，将Activity关掉，这个时候Activity对象是不会被释放的，因为那个内部类还持有着对Activity的引用。但是Activity此时已经是个没用的Activity了，所有这时，内存泄露就出现了。</p>
<p>隐式持有外部类的说明：内部类可以直接去调用外部类的方法，如果没有持有外部类的引用，内部类是没办法去调用外部类的属性和方法的，但是内部类又没有明显的去指定和声明引用，所以称之为隐式引用。</p>
<h4 id="Thread线程"><a href="#Thread线程" class="headerlink" title="Thread线程"></a>Thread线程</h4><p>在Activity中创建一个内部类去继承Thread，然后让该Thread执行一些后台任务，未执行完时，关闭Activity，此时会内存泄露。核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                startThread();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread thread = <span class="keyword">new</span> Thread() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</div><div class="line">                    SystemClock.sleep(<span class="number">1000</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        thread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当点击页面按钮执行startThread()后，再按下back键关闭Activity，几秒后LeakCanary就会提示内存泄露了。</p>
<p>为了避免此种Thread相关内存泄露，只需要避免这个内部类去隐式引用外部类Activity即可。</p>
<p>解决方案：让这个内部类声明为静态类。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ...与先前相比未做变化，不再描述</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread thread = <span class="keyword">new</span> MyStaticThread();</div><div class="line">        thread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStaticThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</div><div class="line">                SystemClock.sleep(<span class="number">1000</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样声明为静态类后，该内部类将不会再去隐式持有外部类的应用。</p>
<p>如果像这样的循环操作，为了效率和优化，建议通过申明一个boolean类型的标志位来控制后台任务。比如在外部类Activity的onDestory退出方法中，将boolean值进行修改，使后台任务退出循环。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">	<span class="comment">//Activity页面是否已经destroy</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isDestroy = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStaticThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(!isDestroy)&#123;</div><div class="line">                    SystemClock.sleep(<span class="number">1000</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        isDestroy = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为申明为了静态内部类，该内部类不再持有外部类Activity的引用，所以此时不能再去使用外部类中的方法、变量。<u>除非外部类的那些方法、变量是静态的</u>。</p>
<p>Q：在防止内存泄露的前提下，如果一定要去使用那些外部类中非静态的方法、变量，该怎么做？</p>
<p>A：通过使用弱引用或者软引用的方式，来引用外部类Activity。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread thread = <span class="keyword">new</span> MyStaticThread(MainActivity.<span class="keyword">this</span>);</div><div class="line">        thread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span>  <span class="keyword">boolean</span> isDestroy = <span class="keyword">false</span>;<span class="comment">//Activity页面是否已经destroy</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStaticThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> WeakReference&lt;MainActivity&gt; softReference = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        MyStaticThread(MainActivity mainActivity)&#123;</div><div class="line">            <span class="keyword">this</span>.softReference = <span class="keyword">new</span> WeakReference&lt;MainActivity&gt;(mainActivity);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">//能够isDestroy变量是非静态的，它属于MainActivity，我们只要拿到了MainActivity对象，就能拿到isDestroy</span></div><div class="line">            MainActivity mainActivity = softReference.get();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</div><div class="line">                <span class="comment">//使用前最好对MainActivity对象做非空判断，如果它已经被回收，就不再执行后台任务</span></div><div class="line">                <span class="keyword">if</span>(mainActivity!=<span class="keyword">null</span>&amp;&amp;!mainActivity.isDestroy)&#123;</div><div class="line">                    SystemClock.sleep(<span class="number">1000</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        isDestroy = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h4><p>在使用Handler时，经常可以看到有人在Activity、Fragment中写过内部类形式的Handler，比如说写一个内部类形式的handler来执行一个延时的任务，像这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_DELAY = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mButton = (Button) findViewById(R.id.button);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                startDelayTask();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startDelayTask</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//发送一条消息，该消息会被延时10秒后才处理</span></div><div class="line">        Message message = Message.obtain();</div><div class="line">        message.obj = <span class="string">"按钮点击15秒后再弹出"</span>;</div><div class="line">        message.what = MESSAGE_DELAY;</div><div class="line">        mHandler.sendMessageDelayed(message, <span class="number">15000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> MESSAGE_DELAY:</div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, (String) msg.obj, Toast.LENGTH_SHORT).show();</div><div class="line">                    mButton.setText(<span class="string">"延时修改了按钮的文本"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当点击了按钮后会发送出一条消息，该消息将会15秒后再进行处理，如果中途退出Activity，不一会LeakCanary就会检测到内存泄露。</p>
<p>上述代码发生内存泄露也是因为内部类持有外部类的引用。这个内部类Handler会拿着外部类Activity的引用，而那个Message又拿着Handler的引用。这个Message又要在消息队列里排队等着被handler中的死循环来取消息。从而形成了一个引用链，最后导致关于外部类Activity的引用不会被释放。</p>
<p>该情况的的解决方案，是与上一节的Thread线程相同的。只要将Handler设置为static的静态内部类方式，就解决了handler持有外部类引用的问题。</p>
<p>如果handler已申明为静态内部类，那么Handler就不再持有外部类的引用，无法使用外部类中非静态的方法、变量了。</p>
<p>如果想在避免内存泄露的同时，想使用非静态的方法、变量，同样可以用弱（软）引用来做。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_DELAY = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startDelayTask</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//发送一条消息，该消息会被延时10秒后才处理</span></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> InsideHandler(MainActivity.<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InsideHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> WeakReference&lt;MainActivity&gt; mSoftReference;</div><div class="line"></div><div class="line">        InsideHandler(MainActivity activity) &#123;</div><div class="line">            mSoftReference = <span class="keyword">new</span> WeakReference&lt;MainActivity&gt;(activity);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            MainActivity mainActivity = mSoftReference.get();</div><div class="line">            <span class="keyword">if</span> (mainActivity != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                    <span class="keyword">case</span> MESSAGE_DELAY:</div><div class="line">                        Toast.makeText(mainActivity, (String) msg.obj, Toast.LENGTH_SHORT).show();</div><div class="line">                        <span class="comment">//通过软引用中的mainActivity可以拿到那个非静态的button对象</span></div><div class="line">                        mainActivity.mButton.setText(<span class="string">"延时修改了按钮的文本"</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，更完美的做法是在这些做法的基础上，再添加这段逻辑：当Activity页面退出时，将handler中的所有消息进行移除，做到滴水不漏。</p>
<p>其实就是在onDestroy中写上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDestroy() &#123;</div><div class="line">    super.onDestroy();</div><div class="line">    //参数为null时，handler中所有消息和回调都会被移除</div><div class="line">    mHandler.removeCallbacksAndMessages(null);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PS：弱引用和软引用的区别：弱引用会很容易被回收掉，软引用没那么快。如果你希望能尽快清掉这块内存使用就使用弱引用；如果想在内存实在不足的情况下才清掉，使用软引用。</p>
<p>下图是在内部类Handler使用软引用时LeakCanary出现的提示。</p>
<p> <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog18/Blog18_3.jpg?raw=true" alt=""></p>
<p>因为使用软引用，GC会有点偷懒，所以leakCanary会检测到一些异常，出现这样的提示。</p>
<h4 id="非静态内部类的静态实例"><a href="#非静态内部类的静态实例" class="headerlink" title="非静态内部类的静态实例"></a>非静态内部类的静态实例</h4><p>有时候会使用，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> User sUser = <span class="keyword">null</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(sUser==<span class="keyword">null</span>)&#123;</div><div class="line">            sUser = <span class="keyword">new</span> User();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</div><div class="line">        User()&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在代码中，非静态的内部类创建了一个静态实例。非静态内部类会持有外部类Activity的引用，后来又创建了一个这个内部类的静态实例。</p>
<p>这个静态实例不会在Activity被关掉时一块被回收（静态实例的生命周期跟Activity可不一样，你Activity挂了，但是写在Activity中的静态实例还是会在，静态实例的生命周期跟应用的生命周期一样长）。</p>
<p>非静态内部类持有外部引用，而该内部类的静态实例不会及时回收，所以才导致了内存泄露。</p>
<p>解决方案：将内部类申明为静态的内部类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Context导致内存泄露"><a href="#Context导致内存泄露" class="headerlink" title="Context导致内存泄露"></a>Context导致内存泄露</h3><p>有时候我们会创建一个静态类，比如说AppManager、XXXManager。这些静态类可能还是以单例的形式存在。而这些静态类需要做一个关于UI的处理，所以传递了一个Context进来，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line">    ToastManager(Context context)&#123;</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ToastManager mManager = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(mContext==<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        Toast.makeText(mContext, str, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ToastManager <span class="title">getInstance</span><span class="params">(Context context)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(mManager==<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">synchronized</span> (ToastManager.class)&#123;</div><div class="line">                <span class="keyword">if</span>(mManager==<span class="keyword">null</span>)&#123;</div><div class="line">                    mManager = <span class="keyword">new</span> ToastManager(context);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mManager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而在使用时是这样写的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        ...</div><div class="line">        ToastManager instance = ToastManager.getInstance(MainActivity.this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候代码也会发生内存泄露。因为静态实例比Activity生命周期长，你在使用静态类时将Activity作为context参数传了进来，即时Activity被关掉，但是静态实例中还保有对它的应用，所以会导致Activity没法被及时回收，造成内存泄露。</p>
<p>解决方案：在传Context上下文参数时，尽量传跟Application应用相同生命周期的Context。比如getApplicationContext()，因为静态实例的生命周期跟应用Application一致。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        ToastManager instance = ToastManager.getInstance(getApplicationContext());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Context的作用域"><a href="#Context的作用域" class="headerlink" title="Context的作用域"></a>Context的作用域</h4><p>系统中的Context的具体实现子类有：Activity、Application、Service。</p>
<p>虽然Context能做很多事，但并不是随便拿到一个Context实例就可以为所欲为，它的使用还是有一些规则限制的。在绝大多数场景下，Activity、Service和Application这三种类型的Context都是可以通用的。不过有几种场景比较特殊，比如启动Activity，还有弹出Dialog。</p>
<p>出于安全原因的考虑，Android是不允许Activity或Dialog凭空出现的，一个Activity的启动必须要建立在另一个Activity的基础之上，也就是以此形成的返回栈。而Dialog则必须在一个Activity上面弹出（<strong>除非是System Alert类型的Dialog</strong>），因此在这种场景下，我们只能使用Activity类型的Context，否则将会出错。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog18/Blog18_4.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>上图中Application和Service所不推荐的两种使用情况：</p>
<ol>
<li><p>如果我们用ApplicationContext去启动一个LaunchMode为standard的Activity的时候会报错</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javaandroid.util.AndroidRuntimeException: Calling startActivity from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</div></pre></td></tr></table></figure>
<p>这是因为非Activity类型的Context并没有所谓的任务栈，所以待启动的Activity就找不到栈了。解决这个问题的方法就是为待启动的Activity指定FLAG_ACTIVITY_NEW_TASK标记位，这样启动的时候就为它创建一个新的任务栈，而此时Activity是以singleTask模式启动的。所有这种用Application启动Activity的方式不推荐使用，Service的原因跟Application一致。</p>
</li>
<li><p>在Application和Service中去layout inflate也是合法的，但是会使用系统默认的主题样式，如果你自定义了某些样式可能不会被使用。所以这种方式也不推荐使用。一句话总结：凡是跟UI相关的，都建议使用Activity做为Context来处理；其他的一些操作，Service,Activity,Application等实例Context都可以，当然了，注意Context引用的持有，防止内存泄漏。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;内存优化-上&quot;&gt;&lt;a href=&quot;#内存优化-上&quot; class=&quot;headerlink&quot; title=&quot;内存优化(上)&quot;&gt;&lt;/a&gt;内存优化(上)&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="note" scheme="https://izdo.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>音乐播放器</title>
    <link href="https://izdo.github.io/2017/09/01/%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>https://izdo.github.io/2017/09/01/音乐播放器/</id>
    <published>2017-09-01T02:53:16.754Z</published>
    <updated>2017-09-01T02:52:45.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h1><blockquote>
<p>今天主要讲的是如何自己动手写一个音乐播放器。<br>直接进入主题。  </p>
<h2 id="新建MyMusic工程"><a href="#新建MyMusic工程" class="headerlink" title="新建MyMusic工程"></a>新建MyMusic工程</h2><h3 id="布局文件activity-main"><a href="#布局文件activity-main" class="headerlink" title="布局文件activity_main"></a>布局文件activity_main</h3></blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"65dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/actionbar_bg"</span> &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/back"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"38sp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"38sp"</span></div><div class="line">            <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_marginLeft</span>=<span class="string">"16sp"</span></div><div class="line">            <span class="attr">android:contentDescription</span>=<span class="string">"@+id/actionbar_left_icon"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/back_left"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/center_content"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#FFF"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"21sp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Justin Bieber-Baby"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/right_icon"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"38sp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"38sp"</span></div><div class="line">            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_marginRight</span>=<span class="string">"16sp"</span></div><div class="line">            <span class="attr">android:contentDescription</span>=<span class="string">"@+id/actionbar_right_icon"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/actionbar_right"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/cover"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"bottom"</span> &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/play_element"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"125sp"</span></div><div class="line">            <span class="attr">android:layout_weight</span>=<span class="string">"0"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@drawable/banner_bg"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span> &gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/music_author"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"5sp"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"Justin Bieber"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"#FFFFFF"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"16sp"</span> /&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/horizontal_music"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_below</span>=<span class="string">"@+id/music_author"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"6sp"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center_horizontal|center_vertical"</span></div><div class="line">                <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> &gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/reduce_vol"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"30sp"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"30sp"</span></div><div class="line">                    <span class="attr">android:contentDescription</span>=<span class="string">"@+id/reduce_vol"</span></div><div class="line">                    <span class="attr">android:src</span>=<span class="string">"@drawable/reduce_vol"</span> /&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</div><div class="line"></div><div class="line">                    <span class="tag">&lt;<span class="name">SeekBar</span></span></div><div class="line">                        <span class="attr">android:id</span>=<span class="string">"@+id/music_progress"</span></div><div class="line">                        <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleHorizontal"</span></div><div class="line">                        <span class="attr">android:layout_width</span>=<span class="string">"220sp"</span></div><div class="line">                        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8sp"</span></div><div class="line">                        <span class="attr">android:clickable</span>=<span class="string">"true"</span></div><div class="line">                        <span class="attr">android:focusable</span>=<span class="string">"false"</span></div><div class="line">                        <span class="attr">android:max</span>=<span class="string">"100"</span></div><div class="line">                        <span class="attr">android:paddingLeft</span>=<span class="string">"5sp"</span></div><div class="line">                        <span class="attr">android:progressDrawable</span>=<span class="string">"@drawable/play_seekbar_style"</span></div><div class="line">                        <span class="attr">android:thumb</span>=<span class="string">"@drawable/play_seekbar_thumb"</span></div><div class="line">                        <span class="attr">android:thumbOffset</span>=<span class="string">"5dip"</span> /&gt;</div><div class="line"></div><div class="line">                    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">                        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> &gt;</div><div class="line"></div><div class="line">                        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                            <span class="attr">android:id</span>=<span class="string">"@+id/time_progress"</span></div><div class="line">                            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                            <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">                            <span class="attr">android:layout_marginLeft</span>=<span class="string">"20sp"</span></div><div class="line">                            <span class="attr">android:text</span>=<span class="string">"时长："</span></div><div class="line">                            <span class="attr">android:textColor</span>=<span class="string">"#FFFFFF"</span></div><div class="line">                            <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line"></div><div class="line">                        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                            <span class="attr">android:id</span>=<span class="string">"@+id/music_duration"</span></div><div class="line">                            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">                            <span class="attr">android:layout_marginLeft</span>=<span class="string">"20sp"</span></div><div class="line">                            <span class="attr">android:layout_marginRight</span>=<span class="string">"15sp"</span></div><div class="line">                            <span class="attr">android:text</span>=<span class="string">"04:25"</span></div><div class="line">                            <span class="attr">android:textColor</span>=<span class="string">"#FFFFFF"</span></div><div class="line">                            <span class="attr">android:textSize</span>=<span class="string">"12sp"</span> /&gt;</div><div class="line">                    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/increase_vol"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"30sp"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"30sp"</span></div><div class="line">                    <span class="attr">android:layout_marginLeft</span>=<span class="string">"8sp"</span></div><div class="line">                    <span class="attr">android:contentDescription</span>=<span class="string">"@+id/increase_vol"</span></div><div class="line">                    <span class="attr">android:src</span>=<span class="string">"@drawable/increase_vol"</span> /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_below</span>=<span class="string">"@+id/horizontal_music"</span></div><div class="line">                <span class="attr">android:layout_marginTop</span>=<span class="string">"6sp"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span> &gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/pre_music"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">                    <span class="attr">android:contentDescription</span>=<span class="string">"@+id/pre_music"</span></div><div class="line">                    <span class="attr">android:src</span>=<span class="string">"@drawable/previous"</span> /&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/play_pause_music"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"42sp"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"425sp"</span></div><div class="line">                    <span class="attr">android:layout_marginLeft</span>=<span class="string">"30sp"</span></div><div class="line">                    <span class="attr">android:layout_toRightOf</span>=<span class="string">"@+id/pre_music"</span></div><div class="line">                    <span class="attr">android:contentDescription</span>=<span class="string">"pause"</span></div><div class="line">                    <span class="attr">android:src</span>=<span class="string">"@drawable/play"</span></div><div class="line">                    <span class="attr">android:onClick</span>=<span class="string">"play"</span> /&gt;</div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                    <span class="attr">android:id</span>=<span class="string">"@+id/next_music"</span></div><div class="line">                    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                    <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">                    <span class="attr">android:layout_marginLeft</span>=<span class="string">"30sp"</span></div><div class="line">                    <span class="attr">android:layout_toRightOf</span>=<span class="string">"@+id/play_pause_music"</span></div><div class="line">                    <span class="attr">android:contentDescription</span>=<span class="string">"@+id/next_music"</span></div><div class="line">                    <span class="attr">android:src</span>=<span class="string">"@drawable/next"</span> /&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>同时将相应的图片资源文件放到工程中。<br>布局比较简单，与市面上大多数音乐播放软件是相似的，就不再阐述。<br><img src="" alt=""></p>
<p>众所周知，在我们运行音乐的时候，无论是在前台，还是按HOME键退出界面时，音乐都在播放，那么如何实现音乐在前台和后台都能正常的运行呢？我们自然而然地想到了Service。</p>
</blockquote>
<h3 id="新建MusicService类"><a href="#新建MusicService类" class="headerlink" title="新建MusicService类"></a>新建MusicService类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.mymusic;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Service;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.os.IBinder;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/28.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>新建类时只有onBind()方法，我们需要手动重写onCreate()方法和onDestroy()方法。 </p>
</blockquote>
<h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ImageView play_pause_music;</div><div class="line">    <span class="keyword">private</span> SeekBar sb;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化控件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        play_pause_music = (ImageView) findViewById(R.id.play_pause_music);</div><div class="line">        sb = (SeekBar) findViewById(R.id.music_progress);</div><div class="line">        play_pause_music.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        sb.setOnSeekBarChangeListener(<span class="keyword">new</span> SeekBar.OnSeekBarChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> i, <span class="keyword">boolean</span> b)</span> </span>&#123;</div><div class="line">              </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>基本初始化工作完成后，我们就可以开始对服务的初始化了。<br>这里我们在onCreate()方法中绑定服务，绑定服务需要用到bindService()方法，而这个方法需要三个参数，第一个参数是一个Intent，表示你将要绑定的服务来自于哪个类，第二个参数是一个ServiceConnection对象，而ServiceConnection是一个接口，我们通常会写一个类继承它然后拿到这个类的对象作为参数，第三个参数是一个整型常量，这里我们传入<strong>Context.BIND_AUTO_CREATE</strong>即可。</p>
</blockquote>
<h3 id="修改MainActivity和MusicService类"><a href="#修改MainActivity和MusicService类" class="headerlink" title="修改MainActivity和MusicService类"></a>修改MainActivity和MusicService类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ImageView play_pause_music;</div><div class="line">    <span class="keyword">private</span> SeekBar sb;</div><div class="line">    <span class="keyword">private</span> MyServiceConnection conn;</div><div class="line">    <span class="keyword">private</span> MusicService musicService;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initView();</div><div class="line">        </div><div class="line">         Intent service = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MusicService.class);</div><div class="line">        conn = <span class="keyword">new</span> MyServiceConnection();</div><div class="line">        <span class="comment">// 开启服务</span></div><div class="line">        <span class="keyword">this</span>.startService(service);</div><div class="line">        <span class="comment">// 连接服务</span></div><div class="line">        <span class="keyword">this</span>.bindService(service, conn, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceConnection</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">            <span class="comment">// 连接成功</span></div><div class="line">            MusicService.MyBinder binder = (MusicService.MyBinder) iBinder;</div><div class="line">            musicService = binder.getService();</div><div class="line">            </div><div class="line">            Log.d(TAG, <span class="string">"连接成功"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.unbindService(conn); <span class="comment">//解绑</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    MyBinder binder = <span class="keyword">new</span> MyBinder();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> binder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> MusicService <span class="title">getService</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> MusicService.<span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里为了方便，在onCreate()方法中我们直接开启服务。<br>在MyServiceConnection的onServiceConnected()方法中，我们需要将IBinder参数转为供我们使用的binder，我们需要通过MusicService去获取Binder，一般我们在MusicService类中写一个继承于Binder类的MyBinder，并通过MyBinder类中的方法将服务返回给调用者。<br>回到onServiceConnected()方法中，我们将IBinder强制转型为MyBinder类，并通过它拿到当前正在运行的服务。<br>注意:在程序销毁时，我们需要将服务解绑。</p>
</blockquote>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6-28 15:41:44.827 2687-2687/com.izdo.mymusic D/MainActivity: 连接成功</div></pre></td></tr></table></figure>
<h3 id="修改MusicService类"><a href="#修改MusicService类" class="headerlink" title="修改MusicService类"></a>修改MusicService类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    MyBinder binder = <span class="keyword">new</span> MyBinder();</div><div class="line">    MediaPlayer player = <span class="keyword">new</span> MediaPlayer(); <span class="comment">// 媒体播放</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> binder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> MusicService <span class="title">getService</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> MusicService.<span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开始播放</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">        player.reset(); <span class="comment">// 重置</span></div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            player.setDataSource(path); <span class="comment">// 设置音乐路径</span></div><div class="line">            player.prepare(); <span class="comment">// 缓冲</span></div><div class="line">            player.setOnPreparedListener(<span class="keyword">new</span> MediaPlayer.OnPreparedListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepared</span><span class="params">(MediaPlayer mediaPlayer)</span> </span>&#123;</div><div class="line">                    player.start(); <span class="comment">// 缓冲完成后开始播放</span></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 暂停播放</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(player.isPlaying())&#123;</div><div class="line">            player.pause(); <span class="comment">// 暂停</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 继续播放</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">continue_music</span><span class="params">()</span></span>&#123;</div><div class="line">        player.start(); <span class="comment">// 继续</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 停止播放</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</div><div class="line">        player.stop(); <span class="comment">// 停止</span></div><div class="line">        player.release();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这次我们新加入四个方法，分别是开始播放，暂停播放，继续播放和停止播放，这里主要讲解一下开始播放方法，在播放之前我们需要重置一下播放器，并且<strong>一定要先prepare()让播放器缓冲并准备好开始播放</strong>。 </p>
</blockquote>
<h3 id="修改MainActivity"><a href="#修改MainActivity" class="headerlink" title="修改MainActivity"></a>修改MainActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ImageView play_pause_music;</div><div class="line">    <span class="keyword">private</span> SeekBar sb;</div><div class="line">    <span class="keyword">private</span> MyServiceConnection conn;</div><div class="line">    <span class="keyword">private</span> MusicService musicService;</div><div class="line">     <span class="keyword">private</span> MediaPlayer player;</div><div class="line">    <span class="keyword">private</span> String[] musics = <span class="keyword">new</span> String[]&#123;</div><div class="line">            <span class="string">"1.mp3"</span>, <span class="string">"2.mp3"</span>, <span class="string">"3.mp3"</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">      </div><div class="line">       ...</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceConnection</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">            <span class="comment">// 连接成功</span></div><div class="line">            MusicService.MyBinder binder = (MusicService.MyBinder) iBinder;</div><div class="line">            musicService = binder.getService();</div><div class="line">            </div><div class="line">            player = musicService.player; <span class="comment">// 获取播放器</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!player.isPlaying()) &#123; <span class="comment">// 当播放器不在播放才开始播放音乐</span></div><div class="line">                musicService.play(MyConstant.SD_PATH + <span class="string">"/"</span> + musics[index]); <span class="comment">// 播放音乐</span></div><div class="line">                play_pause_music.setImageResource(R.drawable.play);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="comment">// 开始播放音乐</span></div><div class="line">        <span class="keyword">if</span> (player != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (player.isPlaying()) &#123;</div><div class="line">                musicService.pause();</div><div class="line">                play_pause_music.setImageResource(R.drawable.play);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                musicService.continue_music();</div><div class="line">                play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建MyConstant类作为常量类"><a href="#新建MyConstant类作为常量类" class="headerlink" title="新建MyConstant类作为常量类"></a>新建MyConstant类作为常量类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.mymusic;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Environment;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/28.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConstant</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SD_PATH = Environment.getExternalStorageDirectory().getAbsolutePath().toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>加入的逻辑都比较简单，将所需要的音乐文件放入手机内存中后，部署之后便可听到音乐，由于文章中无法听到音乐效果，所以也不贴效果图了。<br>ps:读取SD卡需要在清单文件中加入权限。</p>
<p>接下来我们要加入进度条自动滚动和拖动进度条并让音乐播放到进度条位置的功能。</p>
<h3 id="修改MainActivity-1"><a href="#修改MainActivity-1" class="headerlink" title="修改MainActivity"></a>修改MainActivity</h3></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler();</div><div class="line">    <span class="keyword">private</span> Runnable run_music = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 检查音乐进度，更新seekbar</span></div><div class="line">            sb.setProgress(player.getCurrentPosition()); <span class="comment">// 设置seekbar当前刻度为音乐当前进度</span></div><div class="line">            handler.postDelayed(run_music, <span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceConnection</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">            <span class="comment">// 连接成功</span></div><div class="line">            MusicService.MyBinder binder = (MusicService.MyBinder) iBinder;</div><div class="line">            musicService = binder.getService();</div><div class="line"></div><div class="line">            player = musicService.player; <span class="comment">// 获取播放器</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!player.isPlaying()) &#123; <span class="comment">// 当播放器不在播放才开始播放音乐</span></div><div class="line">                musicService.play(MyConstant.SD_PATH + <span class="string">"/"</span> + musics[index]); <span class="comment">// 播放音乐</span></div><div class="line">                play_pause_music.setImageResource(R.drawable.play);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">            &#125;</div><div class="line">            sb.setMax(player.getDuration()); <span class="comment">// 设置进度条最大值为音乐长度</span></div><div class="line">            handler.removeCallbacks(run_music); <span class="comment">// 先清空消息队列里的runnable</span></div><div class="line">            handler.post(run_music);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化控件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        play_pause_music = (ImageView) findViewById(R.id.play_pause_music);</div><div class="line">        sb = (SeekBar) findViewById(R.id.music_progress);</div><div class="line">        play_pause_music.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        sb.setOnSeekBarChangeListener(<span class="keyword">new</span> SeekBar.OnSeekBarChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> i, <span class="keyword">boolean</span> b)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (b) &#123;</div><div class="line">                    <span class="keyword">if</span> (player != <span class="keyword">null</span>) &#123;</div><div class="line">                        player.seekTo(i);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>首先说一下进度条自动滚动的功能，进度条的滚动自然牵扯到UI更新的问题，众所周知主线程不能更新UI，所以我们需要用到Handler，通过Runnable中的run()方法获取到当前进度值并设置到seekBar上，然后在onServiceConnected()方法中调用post()方法。<br>只需要seekBar的监听事件的onProgressChanged()方法中调用seekTo()方法即可。</p>
</blockquote>
<h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog17/Blog17_1.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>接下来要加入的是上一首下一首按钮功能和播放完一首歌自动切换到下一首歌功能的实现。</p>
</blockquote>
<h3 id="修改MyConstant类"><a href="#修改MyConstant类" class="headerlink" title="修改MyConstant类"></a>修改MyConstant类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConstant</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SD_PATH = Environment.getExternalStorageDirectory().getAbsolutePath().toString();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NEXT = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> PRE = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> CURRENT = <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里加入了三个常量，分别代表下一首，上一首和当前的歌曲。</p>
</blockquote>
<h3 id="修改MainActivity-2"><a href="#修改MainActivity-2" class="headerlink" title="修改MainActivity"></a>修改MainActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ImageView play_pause_music, pre, next;</div><div class="line">    </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceConnection</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">            <span class="comment">// 连接成功</span></div><div class="line">            MusicService.MyBinder binder = (MusicService.MyBinder) iBinder;</div><div class="line">            musicService = binder.getService();</div><div class="line"></div><div class="line">            player = musicService.player; <span class="comment">// 获取播放器</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!player.isPlaying()) &#123; <span class="comment">// 当播放器不在播放才开始播放音乐</span></div><div class="line">                <span class="comment">//musicService.play(MyConstant.SD_PATH + "/" + musics[index]); // 播放音乐</span></div><div class="line">                playMusicByStatue(MyConstant.CURRENT);<span class="comment">// 播放音乐</span></div><div class="line">                play_pause_music.setImageResource(play);</div><div class="line">                player.setOnCompletionListener(<span class="keyword">new</span> MediaPlayer.OnCompletionListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(MediaPlayer mediaPlayer)</span> </span>&#123;</div><div class="line">                        <span class="comment">// 当前音乐播放完了</span></div><div class="line">                        playMusicByStatue(MyConstant.NEXT);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">            &#125;</div><div class="line">            sb.setMax(player.getDuration()); <span class="comment">// 设置进度条最大值为音乐长度</span></div><div class="line">            handler.removeCallbacks(run_music); <span class="comment">// 先清空消息队列里的runnable</span></div><div class="line">            handler.post(run_music);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMusicByStatue</span><span class="params">(<span class="keyword">int</span> statue)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (statue) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                <span class="comment">// 下一首</span></div><div class="line">                index++;</div><div class="line">                <span class="keyword">if</span> (index == musics.length) &#123;</div><div class="line">                    index = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="comment">// 上一首</span></div><div class="line">                index--;</div><div class="line">                <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</div><div class="line">                    index = musics.length - <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                <span class="comment">// 当前</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        musicService.play(MyConstant.SD_PATH + <span class="string">"/"</span> + musics[index]);</div><div class="line">        sb.setMax(player.getDuration()); <span class="comment">// 设置进度条最大值为音乐长度</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化控件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        play_pause_music = (ImageView) findViewById(R.id.play_pause_music);</div><div class="line">        pre = (ImageView) findViewById(R.id.pre_music);</div><div class="line">        next = (ImageView) findViewById(R.id.next_music);</div><div class="line">        sb = (SeekBar) findViewById(R.id.music_progress);</div><div class="line">        play_pause_music.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        pre.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        next.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        ...</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.play_pause_music:</div><div class="line">                <span class="comment">// 开始播放音乐</span></div><div class="line">                <span class="keyword">if</span> (player != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (player.isPlaying()) &#123;</div><div class="line">                        musicService.pause();</div><div class="line">                        play_pause_music.setImageResource(play);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        musicService.continue_music();</div><div class="line">                        play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.pre_music:</div><div class="line">                playMusicByStatue(MyConstant.PRE);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.next_music:</div><div class="line">                playMusicByStatue(MyConstant.NEXT);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>首先将上一首和下一首的控件初始化并设置监听事件，这里主要加入了playMusicByStatue()方法，通过传入的statue判断是上一首、下一首还是当前，并将onServiceConnected()方法中的<strong>musicService.play(MyConstant.SD_PATH + “/“ + musics[index]);</strong> 改为<strong>playMusicByStatue(MyConstant.CURRENT);</strong>，同时将onClick()方法修改为用switch语句判断点击的按钮，最后加入的逻辑即可。<br>自动切歌功能比较简单，在onServiceConnected()方法中为MediaPlayer添加一个<strong>OnCompletionListener()</strong>，在其onCompletion()中调用playMusicByStatue()方法播放下一首即可。</p>
<p>接下来我们要完善一下这个音乐播放器。<br>完善的部分会有较大的改动。</p>
</blockquote>
<h3 id="新建MusicInfo类"><a href="#新建MusicInfo类" class="headerlink" title="新建MusicInfo类"></a>新建MusicInfo类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.mymusic;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/28.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicInfo</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String musicPath;</div><div class="line">    <span class="keyword">private</span> String musicName;</div><div class="line">    <span class="keyword">private</span> String musicArtist;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMusicArtist</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> musicArtist;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMusicArtist</span><span class="params">(String musicArtist)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.musicArtist = musicArtist;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> duration;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMusicPath</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> musicPath;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMusicPath</span><span class="params">(String musicPath)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.musicPath = musicPath;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMusicName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> musicName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMusicName</span><span class="params">(String musicName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.musicName = musicName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDuration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> duration;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDuration</span><span class="params">(<span class="keyword">int</span> duration)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.duration = duration;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改MainActivity-3"><a href="#修改MainActivity-3" class="headerlink" title="修改MainActivity"></a>修改MainActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.mymusic;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.ComponentName;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.content.ServiceConnection;</div><div class="line"><span class="keyword">import</span> android.database.Cursor;</div><div class="line"><span class="keyword">import</span> android.media.MediaPlayer;</div><div class="line"><span class="keyword">import</span> android.net.Uri;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"><span class="keyword">import</span> android.os.IBinder;</div><div class="line"><span class="keyword">import</span> android.provider.MediaStore;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"><span class="keyword">import</span> android.widget.SeekBar;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.text.DecimalFormat;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView musicProgress; <span class="comment">// 音乐当前时间</span></div><div class="line">    <span class="keyword">private</span> TextView musicDuration; <span class="comment">// 音乐的时长</span></div><div class="line">    <span class="keyword">private</span> TextView musicName; <span class="comment">// 音乐名</span></div><div class="line">    <span class="keyword">private</span> TextView musicArtist; <span class="comment">// 歌手名</span></div><div class="line">    <span class="keyword">private</span> ImageView play_pause_music; <span class="comment">// 开始暂停按钮</span></div><div class="line">    <span class="keyword">private</span> ImageView pre; <span class="comment">// 上一首</span></div><div class="line">    <span class="keyword">private</span> ImageView next; <span class="comment">// 下一首</span></div><div class="line">    <span class="keyword">private</span> SeekBar sb; <span class="comment">// 滚动条</span></div><div class="line">    <span class="keyword">private</span> MyServiceConnection conn;</div><div class="line">    <span class="keyword">private</span> MusicService musicService; <span class="comment">// 音乐核心服务</span></div><div class="line">    <span class="keyword">private</span> MediaPlayer player; <span class="comment">// 媒体播放器</span></div><div class="line">    <span class="comment">//    private String[] musics = new String[]&#123;</span></div><div class="line">    <span class="comment">//            "1.mp3", "2.mp3", "3.mp3"</span></div><div class="line">    <span class="comment">//    &#125;;</span></div><div class="line">    <span class="keyword">private</span> List&lt;MusicInfo&gt; musics = <span class="keyword">new</span> ArrayList&lt;MusicInfo&gt;(); <span class="comment">// 音乐数组</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler();</div><div class="line">    <span class="keyword">private</span> Runnable run_music = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 检查音乐进度，更新seekbar</span></div><div class="line">            sb.setProgress(player.getCurrentPosition()); <span class="comment">// 设置seekbar当前刻度为音乐当前进度</span></div><div class="line">             musicProgress.setText(millsSecondToString(player.getCurrentPosition())); <span class="comment">// 设置时长</span></div><div class="line">            handler.postDelayed(run_music, <span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initView();</div><div class="line"></div><div class="line">        <span class="comment">// 从手机里获取音乐</span></div><div class="line">        Uri uri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;</div><div class="line">        Cursor cursor = <span class="keyword">this</span>.getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">while</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToNext()) &#123;</div><div class="line">            MusicInfo info = <span class="keyword">new</span> MusicInfo();</div><div class="line">            <span class="comment">// 获得音乐的物理路径</span></div><div class="line">            String path = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.DATA));</div><div class="line">            info.setMusicPath(path);</div><div class="line">            <span class="comment">// 获得音乐的名字</span></div><div class="line">            String musicName = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.TITLE));</div><div class="line">            info.setMusicName(musicName);</div><div class="line">            <span class="comment">// 获得歌手的名字</span></div><div class="line">            String musicArtist = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.ARTIST));</div><div class="line">            info.setMusicArtist(musicArtist);</div><div class="line">            <span class="comment">// 获得音乐的时长</span></div><div class="line">            <span class="keyword">int</span> duration = cursor.getInt(cursor.getColumnIndex(MediaStore.Audio.Media.DURATION));</div><div class="line">            info.setDuration(duration);</div><div class="line">            <span class="comment">// 当音乐名和物理路径不为空并且时长不为0时才添加进集合</span></div><div class="line">            <span class="keyword">if</span> (!musicName.equals(<span class="string">""</span>) &amp;&amp; !path.equals(<span class="string">""</span>) &amp;&amp; duration != <span class="number">0</span>) &#123;</div><div class="line">                musics.add(info);</div><div class="line">                Log.d(TAG, <span class="string">"onCreate: "</span> + info.getMusicPath());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Intent service = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MusicService.class);</div><div class="line">        conn = <span class="keyword">new</span> MyServiceConnection();</div><div class="line">        <span class="comment">// 开启服务</span></div><div class="line">        <span class="keyword">this</span>.startService(service);</div><div class="line">        <span class="comment">// 绑定服务</span></div><div class="line">        <span class="keyword">this</span>.bindService(service, conn, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.unbindService(conn); <span class="comment">//解绑</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceConnection</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</div><div class="line">            <span class="comment">// 绑定成功</span></div><div class="line">            MusicService.MyBinder binder = (MusicService.MyBinder) iBinder;</div><div class="line">            musicService = binder.getService();</div><div class="line"></div><div class="line">            player = musicService.player; <span class="comment">// 获取播放器</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!player.isPlaying()) &#123; <span class="comment">// 当播放器不在播放才开始播放音乐</span></div><div class="line">                <span class="comment">//musicService.play(MyConstant.SD_PATH + "/" + musics[index]); // 播放音乐</span></div><div class="line">                playMusicByStatue(MyConstant.CURRENT);<span class="comment">// 播放音乐</span></div><div class="line">                play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">                player.setOnCompletionListener(<span class="keyword">new</span> MediaPlayer.OnCompletionListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(MediaPlayer mediaPlayer)</span> </span>&#123;</div><div class="line">                        <span class="comment">// 当前音乐播放完了</span></div><div class="line">                        playMusicByStatue(MyConstant.NEXT);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">            &#125;</div><div class="line">            sb.setMax(player.getDuration()); <span class="comment">// 设置进度条最大值为音乐长度</span></div><div class="line">            handler.removeCallbacks(run_music); <span class="comment">// 先清空消息队列里的runnable</span></div><div class="line">            handler.post(run_music);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMusicByStatue</span><span class="params">(<span class="keyword">int</span> statue)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (statue) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                <span class="comment">// 下一首</span></div><div class="line">                index++;</div><div class="line">                <span class="keyword">if</span> (index == musics.size()) &#123;</div><div class="line">                    index = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="comment">// 上一首</span></div><div class="line">                index--;</div><div class="line">                <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</div><div class="line">                    index = musics.size() - <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                <span class="comment">// 当前</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        playMusic(index);</div><div class="line">        <span class="comment">//        musicService.play(MyConstant.SD_PATH + "/" + musics.get(index));</span></div><div class="line">        <span class="comment">//        sb.setMax(player.getDuration()); // 设置进度条最大值为音乐长度</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据音乐数组下标播放对应的音乐</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">playMusic</span><span class="params">(<span class="keyword">int</span> index2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (musics.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            musicService.play(musics.get(index2).getMusicPath());</div><div class="line">            <span class="comment">// 设置音乐名</span></div><div class="line">            musicName.setText(musics.get(index2).getMusicName());</div><div class="line">            <span class="comment">// 设置歌手</span></div><div class="line">            musicArtist.setText(musics.get(index2).getMusicArtist());</div><div class="line">            <span class="comment">// 设置音乐时长</span></div><div class="line">            musicDuration.setText(millsSecondToString(musics.get(index2).getDuration()));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 设置进度条最大值为音乐长度</span></div><div class="line">        sb.setMax(player.getDuration()); </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 转换时长为标准时间格式</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">millsSecondToString</span><span class="params">(<span class="keyword">int</span> mills)</span> </span>&#123;</div><div class="line">        <span class="comment">// 将毫秒转化成秒</span></div><div class="line">        <span class="keyword">int</span> seconds = mills / <span class="number">1000</span>;</div><div class="line">        <span class="comment">// 算出余数即为秒钟</span></div><div class="line">        <span class="keyword">int</span> second = seconds % <span class="number">60</span>;</div><div class="line">        <span class="comment">// 计算出分钟数</span></div><div class="line">        <span class="keyword">int</span> minute = (seconds - second) / <span class="number">60</span>;</div><div class="line">        DecimalFormat decimalFormat = <span class="keyword">new</span> DecimalFormat(<span class="string">"00"</span>);</div><div class="line">        <span class="keyword">return</span> decimalFormat.format(minute) + <span class="string">":"</span> + decimalFormat.format(second);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化控件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        play_pause_music = (ImageView) findViewById(R.id.play_pause_music);</div><div class="line">        pre = (ImageView) findViewById(R.id.pre_music);</div><div class="line">        next = (ImageView) findViewById(R.id.next_music);</div><div class="line">        sb = (SeekBar) findViewById(R.id.music_progress);</div><div class="line">        musicName = (TextView) findViewById(R.id.center_content);</div><div class="line">        musicProgress = (TextView) findViewById(R.id.time_progress);</div><div class="line">        musicArtist = (TextView) findViewById(R.id.music_artist);</div><div class="line">        musicDuration = (TextView) findViewById(R.id.music_duration);</div><div class="line"></div><div class="line">        play_pause_music.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        pre.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        next.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        sb.setOnSeekBarChangeListener(<span class="keyword">new</span> SeekBar.OnSeekBarChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> i, <span class="keyword">boolean</span> b)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (b) &#123;</div><div class="line">                    <span class="keyword">if</span> (player != <span class="keyword">null</span>) &#123;</div><div class="line">                        player.seekTo(i);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.play_pause_music:</div><div class="line">                <span class="comment">// 开始播放音乐</span></div><div class="line">                <span class="keyword">if</span> (player != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (player.isPlaying()) &#123;</div><div class="line">                        musicService.pause();</div><div class="line">                        play_pause_music.setImageResource(R.drawable.play);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        musicService.continue_music();</div><div class="line">                        play_pause_music.setImageResource(R.drawable.pause);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.pre_music:</div><div class="line">                playMusicByStatue(MyConstant.PRE);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.next_music:</div><div class="line">                playMusicByStatue(MyConstant.NEXT);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>首先拿到界面上音乐当前时间和时长的TextView，然后将存放音乐的数组改为用集合存放，并且音乐文件不再是通过具体路径获得，改为由内容提供者获取SD卡中所有音频文件。<br>新增的playMusic()方法用于根据设置相关的信息到界面上，millsSecondToString()方法用于将获取到的音乐时长从毫秒值转换为标准的时间格式。<br>而通过ContentResolver拿到的音乐信息可以参考以下网址:<a href="http://blog.csdn.net/zhutoushifu/article/details/50667862" target="_blank" rel="external">MediaStore部分属性解释</a></p>
</blockquote>
<h3 id="运行效果-1"><a href="#运行效果-1" class="headerlink" title="运行效果"></a>运行效果</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog17/Blog17_2.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>这样一个简单的音乐播放器就完成了，当然一个音乐播放器不止这么简单，还有很多功能是我们可以实现的<br>，但是由于文章篇幅问题，这个简单的demo就先到这里了。<br>后续的修改也不以文章的形式发表，完善更多功能后有时间的话会把完整的项目发布。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;音乐播放器&quot;&gt;&lt;a href=&quot;#音乐播放器&quot; class=&quot;headerlink&quot; title=&quot;音乐播放器&quot;&gt;&lt;/a&gt;音乐播放器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;今天主要讲的是如何自己动手写一个音乐播放器。&lt;br&gt;直接进入主题。  &lt;/p&gt;
&lt;h2 i
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="demo" scheme="https://izdo.github.io/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="https://izdo.github.io/2017/06/25/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://izdo.github.io/2017/06/25/抽象工厂模式/</id>
    <published>2017-06-25T14:36:27.120Z</published>
    <updated>2017-06-25T14:35:14.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="什么是抽象工厂模式"><a href="#什么是抽象工厂模式" class="headerlink" title="什么是抽象工厂模式"></a>什么是抽象工厂模式</h2><blockquote>
<p>抽象工厂模式是所有形态的工厂模式中最为抽象和最具一般性的。抽象工厂模式可以向客户端提供一个接口，使得客户端在不必指定产品的具体类型的情况下，能够创建多个产品族的产品对象。</p>
<p>同样先看一个例子。</p>
<h2 id="新建AbstractFactory工程"><a href="#新建AbstractFactory工程" class="headerlink" title="新建AbstractFactory工程"></a>新建AbstractFactory工程</h2><h3 id="新建Fruit类"><a href="#新建Fruit类" class="headerlink" title="新建Fruit类"></a>新建Fruit类</h3></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建Apple类和Banana类"><a href="#新建Apple类和Banana类" class="headerlink" title="新建Apple类和Banana类"></a>新建Apple类和Banana类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘苹果</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘香蕉</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建NorthApple类和SouthApple类"><a href="#新建NorthApple类和SouthApple类" class="headerlink" title="新建NorthApple类和SouthApple类"></a>新建NorthApple类和SouthApple类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NorthApple</span> <span class="keyword">extends</span> <span class="title">Apple</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘北方苹果"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SouthApple</span> <span class="keyword">extends</span> <span class="title">Apple</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘南方苹果"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建NorthBanana类和SouthBanana类"><a href="#新建NorthBanana类和SouthBanana类" class="headerlink" title="新建NorthBanana类和SouthBanana类"></a>新建NorthBanana类和SouthBanana类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NorthBanana</span> <span class="keyword">extends</span> <span class="title">Banana</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘北方香蕉"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SouthBanana</span> <span class="keyword">extends</span> <span class="title">Banana</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘南方香蕉"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>也就是说，现在Apple类和Banana类都是抽象类，而苹果和香蕉都有南北方之分，这时候只要让南北方苹果的类继承自Apple类即可。让具体的某种水果的抽象工厂去实现具体的产品族，这就是抽象工厂的好处。同样地，对于水果工厂，我们也可以让其分为南方水果工厂和北方水果工厂，通过工厂(南方工厂、被反工厂)来划分而不是通过水果(苹果工厂、香蕉工厂)来划分。</p>
</blockquote>
<h3 id="新建FruitFactory类"><a href="#新建FruitFactory类" class="headerlink" title="新建FruitFactory类"></a>新建FruitFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line">	<span class="comment">// 实例化Apple</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getApple</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">// 实例化Banana</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getBanana</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建NorthFrutFactory类和SouthFruitFactory类"><a href="#新建NorthFrutFactory类和SouthFruitFactory类" class="headerlink" title="新建NorthFrutFactory类和SouthFruitFactory类"></a>新建NorthFrutFactory类和SouthFruitFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NorthFrutFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getApple</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> NorthApple();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getBanana</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> NorthBanana();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SouthFruitFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getApple</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SouthApple();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getBanana</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SouthBanana();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建MainClass类"><a href="#新建MainClass类" class="headerlink" title="新建MainClass类"></a>新建MainClass类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		FruitFactory ff = <span class="keyword">new</span> NorthFrutFactory();</div><div class="line"></div><div class="line">		Fruit apple = ff.getApple();</div><div class="line">		apple.get();</div><div class="line"></div><div class="line">		Fruit banana = ff.getBanana();</div><div class="line">		banana.get();</div><div class="line"></div><div class="line">		FruitFactory ff2 = <span class="keyword">new</span> SouthFruitFactory();</div><div class="line"></div><div class="line">		Fruit apple2 = ff2.getApple();</div><div class="line">		apple2.get();</div><div class="line"></div><div class="line">		Fruit banana2 = ff2.getBanana();</div><div class="line">		banana2.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">采摘北方苹果</div><div class="line">采摘北方香蕉</div><div class="line">采摘南方苹果</div><div class="line">采摘南方香蕉</div></pre></td></tr></table></figure>
<blockquote>
<p>这样我们就可以通过相应地方的工厂获得相应的水果。那么现在我们要新增一种温室水果应该怎样做？</p>
</blockquote>
<h3 id="新建WenshiApple类和WenshiBanana类"><a href="#新建WenshiApple类和WenshiBanana类" class="headerlink" title="新建WenshiApple类和WenshiBanana类"></a>新建WenshiApple类和WenshiBanana类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WenshiApple</span> <span class="keyword">extends</span> <span class="title">Apple</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘温室苹果"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WenshiBanana</span> <span class="keyword">extends</span> <span class="title">Banana</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘温室香蕉"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建WenshiFruitFactory类"><a href="#新建WenshiFruitFactory类" class="headerlink" title="新建WenshiFruitFactory类"></a>新建WenshiFruitFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WenshiFruitFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getApple</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> WenshiApple();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getBanana</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> WenshiBanana();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改main方法"><a href="#修改main方法" class="headerlink" title="修改main方法"></a>修改main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		FruitFactory ff = <span class="keyword">new</span> NorthFrutFactory();</div><div class="line"></div><div class="line">		Fruit apple = ff.getApple();</div><div class="line">		apple.get();</div><div class="line"></div><div class="line">		Fruit banana = ff.getBanana();</div><div class="line">		banana.get();</div><div class="line"></div><div class="line">		FruitFactory ff2 = <span class="keyword">new</span> SouthFruitFactory();</div><div class="line"></div><div class="line">		Fruit apple2 = ff2.getApple();</div><div class="line">		apple2.get();</div><div class="line"></div><div class="line">		Fruit banana2 = ff2.getBanana();</div><div class="line">		banana2.get();</div><div class="line"></div><div class="line">		FruitFactory ff3 = <span class="keyword">new</span> WenshiFruitFactory();</div><div class="line"></div><div class="line">		Fruit apple3 = ff3.getApple();</div><div class="line">		apple3.get();</div><div class="line"></div><div class="line">		Fruit banana3 = ff3.getBanana();</div><div class="line">		banana3.get();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>简单的说，当我们要加入温室苹果时，我们需要新建出温室苹果，然后创建出一个专门用来生产温室水果的工厂类即可。</p>
</blockquote>
<h2 id="工厂方法模式中包含的角色及其职责"><a href="#工厂方法模式中包含的角色及其职责" class="headerlink" title="工厂方法模式中包含的角色及其职责"></a>工厂方法模式中包含的角色及其职责</h2><blockquote>
<ul>
<li>抽象工厂(Creator)角色:抽象工厂模式的核心，包含对多个产品结构的声明，任何工厂类都必须实现这个接口。</li>
<li>具体工厂(Concrete Creator)角色:具体工厂类是抽象工厂的一个实现，负责实例化某个产品族中的产品对象。</li>
<li>抽象(Product)产品角色:抽象工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</li>
<li>具体产品(Concrete Product)角色:抽象工厂模式所创建的具体实例对象。</li>
</ul>
</blockquote>
<h3 id="对照图"><a href="#对照图" class="headerlink" title="对照图"></a>对照图</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog16/Blog16_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="抽象工厂模式的优缺点"><a href="#抽象工厂模式的优缺点" class="headerlink" title="抽象工厂模式的优缺点"></a>抽象工厂模式的优缺点</h2><blockquote>
<p>每种模式都有其优势，但是世界上是没有完美的东西的，在得到某些东西的同时，也必须舍弃一些东西，所以抽象工厂模式同样也有其劣势。<br>抽象工厂模式一个显著的优点是分离接口与实现，客户端使用抽象工厂来创建需要的对象，而客户端根本就不知道具体的实现是谁，客户端只是面向产品的接口编程而已，使其从具体的产品实现中解耦，同时基于接口与实现的分离，使抽象工厂方法模式在切换产品类时更加灵活、容易。<br>而抽象工厂模式的缺点有两个，一是对类文件的爆炸性增加，每次我们需要新增一种水果时，就需要新建许多类，比如现在我们要加入Pear类，这时候我们就需要创建Pear实体类、NonthPear类、SouthPear类以及WenshiPear类，并且在Fruit类和FruitFactory类中做出相应的修改，这样的工作是比较繁琐的，二是不太容易扩展新的产品类，第一点也说过，每当我们新增一个产品类就需要修改抽象工厂，这样的话所有的具体工厂类均会被修改了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;抽象工厂模式&quot;&gt;&lt;a href=&quot;#抽象工厂模式&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式&quot;&gt;&lt;/a&gt;抽象工厂模式&lt;/h1&gt;&lt;h2 id=&quot;什么是抽象工厂模式&quot;&gt;&lt;a href=&quot;#什么是抽象工厂模式&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Java" scheme="https://izdo.github.io/tags/Java/"/>
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="设计模式" scheme="https://izdo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法模式</title>
    <link href="https://izdo.github.io/2017/06/25/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://izdo.github.io/2017/06/25/工厂方法模式/</id>
    <published>2017-06-25T14:36:23.292Z</published>
    <updated>2017-06-25T14:35:04.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="什么是工厂方法模式"><a href="#什么是工厂方法模式" class="headerlink" title="什么是工厂方法模式"></a>什么是工厂方法模式</h2><blockquote>
<p>工厂方法模式同样属于类的创建型模式又被称为多态工厂模式。工厂方法模式我的意义是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类当中。<strong>核心工厂类不再负责产品的创建</strong>，这样核心类称为一个抽象工厂角色，仅负责具体工厂子类必须实现的接口，这样进一步抽象化的好处是使得工厂方法模式可以使系统在不修改具体工厂角色的情况下引进新的产品。</p>
<p>同样先看一个例子。</p>
<h2 id="新建FactoryMethod工程"><a href="#新建FactoryMethod工程" class="headerlink" title="新建FactoryMethod工程"></a>新建FactoryMethod工程</h2><p>将上一篇简单工厂模式工程中的所有类都拷贝过来。<br>回顾一下简单工厂模式，如果我们要添加一种水果，应该怎样做？</p>
</blockquote>
<h3 id="新建Pear类"><a href="#新建Pear类" class="headerlink" title="新建Pear类"></a>新建Pear类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pear</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘梨子"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改FruitFactory类"><a href="#修改FruitFactory类" class="headerlink" title="修改FruitFactory类"></a>修改FruitFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getFruit</span><span class="params">(String type)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"apple"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> Apple.class.newInstance();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"banana"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> Banana.class.newInstance();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"pear"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> Pear.class.newInstance();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			System.out.println(<span class="string">"找不到相应的实例化类"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改main方法"><a href="#修改main方法" class="headerlink" title="修改main方法"></a>修改main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException </span>&#123;</div><div class="line"></div><div class="line">		Fruit apple = FruitFactory.getFruit(<span class="string">"Apple"</span>);</div><div class="line">		Fruit banana = FruitFactory.getFruit(<span class="string">"Banana"</span>);</div><div class="line">		Fruit pear = FruitFactory.getFruit(<span class="string">"pear"</span>);</div><div class="line">		apple.get();</div><div class="line">		banana.get();</div><div class="line">		pear.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这就是简单工厂模式，而上一篇文章结尾也说了简单工厂模式的缺点是有时候需要我们去修改工厂类，扩展性并不好。<br>那么这个时候工厂方法模式就起作用了。</p>
</blockquote>
<h3 id="将FruitFactory修改为接口"><a href="#将FruitFactory修改为接口" class="headerlink" title="将FruitFactory修改为接口"></a>将FruitFactory修改为接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getFruit</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建AppleFactory类和BananaFactory类"><a href="#新建AppleFactory类和BananaFactory类" class="headerlink" title="新建AppleFactory类和BananaFactory类"></a>新建AppleFactory类和BananaFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getFruit</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Apple();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BananaFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getFruit</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Banana();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改main方法-1"><a href="#修改main方法-1" class="headerlink" title="修改main方法"></a>修改main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 获得AppleFactory</span></div><div class="line">		FruitFactory ff = <span class="keyword">new</span> AppleFactory();</div><div class="line">		<span class="comment">// 通过AppleFactory获得Apple实例对象</span></div><div class="line">		Fruit apple = ff.getFruit();</div><div class="line">		apple.get();</div><div class="line"></div><div class="line">		<span class="comment">// 获得BananaFactory</span></div><div class="line">		FruitFactory ff2 = <span class="keyword">new</span> BananaFactory();</div><div class="line">		<span class="comment">// 通过AppleFactory获得Apple实例对象</span></div><div class="line">		Fruit banana = ff2.getFruit();</div><div class="line">		banana.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">采摘苹果</div><div class="line">采摘香蕉</div></pre></td></tr></table></figure>
<blockquote>
<p>可以看到，我们将FruitFactory修改为接口后，想要加入一种水果的话，只要新建相对应的具体水果类和水果工厂并实现FruitFactory接口，然后通过该水果工厂的实例去获取相应水果的实例即可。<br>那么如果我们要加入Pear这种水果应该怎么做？</p>
</blockquote>
<h3 id="新建PearFactory类"><a href="#新建PearFactory类" class="headerlink" title="新建PearFactory类"></a>新建PearFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PearFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getFruit</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Pear();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改main方法-2"><a href="#修改main方法-2" class="headerlink" title="修改main方法"></a>修改main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 获得AppleFactory</span></div><div class="line">		FruitFactory ff = <span class="keyword">new</span> AppleFactory();</div><div class="line">		<span class="comment">// 通过AppleFactory获得Apple实例对象</span></div><div class="line">		Fruit apple = ff.getFruit();</div><div class="line">		apple.get();</div><div class="line"></div><div class="line">		<span class="comment">// 获得BananaFactory</span></div><div class="line">		FruitFactory ff2 = <span class="keyword">new</span> BananaFactory();</div><div class="line">		<span class="comment">// 通过BananaFactory获得Apple实例对象</span></div><div class="line">		Fruit banana = ff2.getFruit();</div><div class="line">		banana.get();</div><div class="line"></div><div class="line">		<span class="comment">// 获得Pearactory</span></div><div class="line">		FruitFactory ff3 = <span class="keyword">new</span> PearFactory();</div><div class="line">		<span class="comment">// 通过PearFactory获得Apple实例对象</span></div><div class="line">		Fruit pear = ff3.getFruit();</div><div class="line">		pear.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">采摘苹果</div><div class="line">采摘香蕉</div><div class="line">采摘梨子</div></pre></td></tr></table></figure>
<blockquote>
<p>可以看到，当我们需要加入一种新的水果时，完全不需要修改FruitFactory类，只需要加入相应的工厂并实现FruitFactory和一个具体对象即可，当我们需要修改某种特定水果的方法时，只需要找出其工厂类并做出相应的修改。</p>
</blockquote>
<h2 id="工厂方法模式中包含的角色及其职责"><a href="#工厂方法模式中包含的角色及其职责" class="headerlink" title="工厂方法模式中包含的角色及其职责"></a>工厂方法模式中包含的角色及其职责</h2><blockquote>
<ul>
<li>抽象工厂(Creator)角色:工厂方法模式的核心，任何工厂类都必须实现这个接口。</li>
<li>具体工厂(Concrete Creator)角色:具体工厂类是抽象工厂的一个实现，负责实例化产品对象。</li>
<li>抽象(Product)产品角色:工厂方法模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</li>
<li>具体产品(Concrete Product)角色:工厂方法模式所创建的具体实例对象。</li>
</ul>
</blockquote>
<h3 id="对照图"><a href="#对照图" class="headerlink" title="对照图"></a>对照图</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog15/Blog15_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="工厂方法模式和简单工厂模式比较"><a href="#工厂方法模式和简单工厂模式比较" class="headerlink" title="工厂方法模式和简单工厂模式比较"></a>工厂方法模式和简单工厂模式比较</h2><blockquote>
<p>工厂方法模式与简单工厂模式在结构上的不同不是很明显。<br>工厂方法类的核心是一个抽象工厂类，而简单工厂模式把核心放在一个具体类上。<br>工厂方法模式之所以有一个别名叫多态性工厂模式是因为具体工厂类都有共同的接口，或者有共同的抽象父类。<br>当系统扩展需要添加新的产品对象时，仅仅需要添加一个具体对象以及一个具体工厂对象，原有工厂对象不需要进行任何修改，也不需要修改客户端，很好的符合了”开放-封闭”原则。而简单工厂模式在添加新产品对象后不得不修改工厂方法，扩展性不好。<br>工厂方法模式退化后可以演变成简单工厂模式。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工厂方法模式&quot;&gt;&lt;a href=&quot;#工厂方法模式&quot; class=&quot;headerlink&quot; title=&quot;工厂方法模式&quot;&gt;&lt;/a&gt;工厂方法模式&lt;/h1&gt;&lt;h2 id=&quot;什么是工厂方法模式&quot;&gt;&lt;a href=&quot;#什么是工厂方法模式&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Java" scheme="https://izdo.github.io/tags/Java/"/>
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="设计模式" scheme="https://izdo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>简单工厂模式</title>
    <link href="https://izdo.github.io/2017/06/25/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://izdo.github.io/2017/06/25/简单工厂模式/</id>
    <published>2017-06-25T14:36:08.101Z</published>
    <updated>2017-06-25T14:34:01.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><h2 id="什么是简单工厂模式"><a href="#什么是简单工厂模式" class="headerlink" title="什么是简单工厂模式"></a>什么是简单工厂模式</h2><blockquote>
<p>简单工厂模式属于类的创建型模式，又叫做静态工厂方法模式。通过专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。  </p>
<p>首先看一个例子</p>
<h2 id="新建SimpleFactory工程"><a href="#新建SimpleFactory工程" class="headerlink" title="新建SimpleFactory工程"></a>新建SimpleFactory工程</h2><h3 id="新建Apple类和Banana类"><a href="#新建Apple类和Banana类" class="headerlink" title="新建Apple类和Banana类"></a>新建Apple类和Banana类</h3></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘苹果</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"采摘苹果"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘香蕉</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"采摘香蕉"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在主函数中实例化两个类"><a href="#在主函数中实例化两个类" class="headerlink" title="在主函数中实例化两个类"></a>在主函数中实例化两个类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 实例化一个Apple</span></div><div class="line">		Apple apple = <span class="keyword">new</span> Apple();</div><div class="line">		<span class="comment">// 实例化一个Banana</span></div><div class="line">		Banana banana = <span class="keyword">new</span> Banana();</div><div class="line"></div><div class="line">		apple.get();</div><div class="line">		banana.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">采摘苹果</div><div class="line">采摘香蕉</div></pre></td></tr></table></figure>
<blockquote>
<p>这是Java基础，相信很容易看懂，而我们能看到Apple类和Banana类都是属于水果，里面都只有一个get()方法，那么我们可以定义一个Fruit接口，然后让具体的实现类去实现这个接口。</p>
</blockquote>
<h3 id="新建Fruit接口"><a href="#新建Fruit接口" class="headerlink" title="新建Fruit接口"></a>新建Fruit接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现类实现接口"><a href="#实现类实现接口" class="headerlink" title="实现类实现接口"></a>实现类实现接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘苹果</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘苹果"</span>);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 采摘香蕉</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		System.out.println(<span class="string">"采摘香蕉"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改main函数"><a href="#修改main函数" class="headerlink" title="修改main函数"></a>修改main函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// // 实例化一个Apple</span></div><div class="line">		<span class="comment">// Apple apple = new Apple();</span></div><div class="line">		<span class="comment">// // 实例化一个Banana</span></div><div class="line">		<span class="comment">// Banana banana = new Banana();</span></div><div class="line"></div><div class="line">		<span class="comment">// apple.get();</span></div><div class="line">		<span class="comment">// banana.get();</span></div><div class="line">		</div><div class="line">		<span class="comment">// 使用多态实例化一个Apple</span></div><div class="line">		Fruit apple = <span class="keyword">new</span> Apple();</div><div class="line">		<span class="comment">// 使用多态实例化一个Banana</span></div><div class="line">		Fruit banana = <span class="keyword">new</span> Banana();</div><div class="line">		apple.get();</div><div class="line">		banana.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">采摘苹果</div><div class="line">采摘香蕉</div></pre></td></tr></table></figure>
<blockquote>
<p>可以看到由于接口是不能实例化的，所以这里运用多态实例化了具体类，运行结果是一样的。<br>那么接下来进入正题，所谓工厂模式，就是需要一个工厂来生产出我们所需要的产品而不需要我们自己动手去做，所以我们现在需要一个创建出一个工厂。</p>
</blockquote>
<h3 id="新建FruitFactory工厂类"><a href="#新建FruitFactory工厂类" class="headerlink" title="新建FruitFactory工厂类"></a>新建FruitFactory工厂类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 获得Apple类的实例</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getApple</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Apple();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 获得Banana类的实例</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Fruit <span class="title">getBanana</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Banana();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改main方法"><a href="#修改main方法" class="headerlink" title="修改main方法"></a>修改main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// // 实例化一个Apple</span></div><div class="line">		<span class="comment">// Apple apple = new Apple();</span></div><div class="line">		<span class="comment">// // 实例化一个Banana</span></div><div class="line">		<span class="comment">// Banana banana = new Banana();</span></div><div class="line"></div><div class="line">		<span class="comment">// apple.get();</span></div><div class="line">		<span class="comment">// banana.get();</span></div><div class="line"></div><div class="line">		<span class="comment">// // 使用多态实例化一个Apple</span></div><div class="line">		<span class="comment">// Fruit apple = new Apple();</span></div><div class="line">		<span class="comment">// // 使用多态实例化一个Banana</span></div><div class="line">		<span class="comment">// Fruit banana = new Banana();</span></div><div class="line">		<span class="comment">// apple.get();</span></div><div class="line">		<span class="comment">// banana.get();</span></div><div class="line"></div><div class="line">		<span class="comment">// 实例化一个Apple</span></div><div class="line">		Fruit apple = <span class="keyword">new</span> FruitFactory().getApple();</div><div class="line">		<span class="comment">// 实例化一个Banana</span></div><div class="line">		Fruit banana = <span class="keyword">new</span> FruitFactory().getBanana();</div><div class="line">		apple.get();</div><div class="line">		banana.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">采摘苹果</div><div class="line">采摘香蕉</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果还是一样的。<br>但是我们发现要实例化一个具体类我们需要<strong>new FruitFactory().getXXX();</strong> 创建一个匿名对象，这样未免也太麻烦了，所以我们可以将FruitFacotory中的两个方法都改为静态方法，这样就可以直接通过类名调用该方法，而不需要去创建对象了。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 获得Apple类的实例</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getApple</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Apple();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 获得Banana类的实例</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getBanana</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Banana();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">	...</div><div class="line"></div><div class="line">		<span class="comment">// 实例化一个Apple</span></div><div class="line">		Fruit apple = FruitFactory.getApple();</div><div class="line">		<span class="comment">// 实例化一个Banana</span></div><div class="line">		Fruit banana = FruitFactory.getBanana();</div><div class="line">		apple.get();</div><div class="line">		banana.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="工厂模式中包含的角色及其职责"><a href="#工厂模式中包含的角色及其职责" class="headerlink" title="工厂模式中包含的角色及其职责"></a>工厂模式中包含的角色及其职责</h2><blockquote>
<ul>
<li>工厂(Creator)角色: 简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类可以被外界直接调用，创建所需的产品对象。</li>
<li>抽象产品(Product)角色:简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</li>
<li>具体产品(Concrete Product)角色:简单工厂模式所创建的具体实例对象。  <h3 id="对照图"><a href="#对照图" class="headerlink" title="对照图"></a>对照图</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog14/Blog14_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<p>回到刚才的工程中，我们在Fruit工厂类中定义了两个方法，一个用于获取Apple的实例，另一个用于获取Banana的实例，但是水果有很多种，如果我们要获取许多种类的水果的实例，那我们岂不是需要写一堆方法了吗？所以我们可以将这些水果放在一个方法中。</p>
</blockquote>
<h3 id="修改FruitFactory类"><a href="#修改FruitFactory类" class="headerlink" title="修改FruitFactory类"></a>修改FruitFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line">	...</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 获得所有产品对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getFruit</span><span class="params">(String type)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"apple"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> Apple.class.newInstance();</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"banana"</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> Banana.class.newInstance();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			System.out.println(<span class="string">"找不到相应的实例化类"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>现在我们将获取Apple和Banana实例的方法都放在getFruit()方法中，通过传入的type判断所需要的是什么类型的水果的实例再将其实例返回给调用者，这样就避免的方法过多的情况。</p>
</blockquote>
<h3 id="修改main方法-1"><a href="#修改main方法-1" class="headerlink" title="修改main方法"></a>修改main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException </span>&#123;</div><div class="line"></div><div class="line">		...</div><div class="line"></div><div class="line">		Fruit apple = FruitFactory.getFruit(<span class="string">"apple"</span>);</div><div class="line">		Fruit banana = FruitFactory.getFruit(<span class="string">"banana"</span>);</div><div class="line">		apple.get();</div><div class="line">		banana.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">采摘苹果</div><div class="line">采摘香蕉</div></pre></td></tr></table></figure>
<blockquote>
<p>除了这种方式，我们还可以用另一种方式来获取实例。</p>
</blockquote>
<h3 id="修改FruitFactory类-1"><a href="#修改FruitFactory类-1" class="headerlink" title="修改FruitFactory类"></a>修改FruitFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * 获得所有产品对象</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getFruit</span><span class="params">(String type)</span></span></div><div class="line">			<span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException &#123;</div><div class="line">		<span class="comment">// if (type.equalsIgnoreCase("apple")) &#123;</span></div><div class="line">		<span class="comment">// return Apple.class.newInstance();</span></div><div class="line">		<span class="comment">// &#125; else if (type.equalsIgnoreCase("banana")) &#123;</span></div><div class="line">		<span class="comment">// return Banana.class.newInstance();</span></div><div class="line">		<span class="comment">// &#125; else &#123;</span></div><div class="line">		<span class="comment">// System.out.println("找不到相应的实例化类");</span></div><div class="line">		<span class="comment">// return null;</span></div><div class="line">		<span class="comment">// &#125;</span></div><div class="line"></div><div class="line">		Class fruit = Class.forName(type);</div><div class="line">		<span class="keyword">return</span> (Fruit) fruit.newInstance();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改main方法-2"><a href="#修改main方法-2" class="headerlink" title="修改main方法"></a>修改main方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException </span>&#123;</div><div class="line"></div><div class="line">	    ...</div><div class="line"></div><div class="line">		<span class="comment">// // 实例化一个Apple</span></div><div class="line">		<span class="comment">// Fruit apple = FruitFactory.getApple();</span></div><div class="line">		<span class="comment">// // 实例化一个Banana</span></div><div class="line">		<span class="comment">// Fruit banana = FruitFactory.getBanana();</span></div><div class="line">		<span class="comment">// apple.get();</span></div><div class="line">		<span class="comment">// banana.get();</span></div><div class="line"></div><div class="line">		Fruit apple = FruitFactory.getFruit(<span class="string">"Apple"</span>);</div><div class="line">		Fruit banana = FruitFactory.getFruit(<span class="string">"Banana"</span>);</div><div class="line">		apple.get();</div><div class="line">		banana.get();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们将getFruit()方法更改为由传入的type类型查找相应的Class并实例化，这样虽然将步骤简单化了，我们不再需要去判断对应的类型，但是也有局限性，<br>我们传入的type必须和类名大小写一致，否则会出现<br>NoClassDefFoundError这个异常，减少了灵活性。  </p>
</blockquote>
<h2 id="简单工厂模式的优缺点"><a href="#简单工厂模式的优缺点" class="headerlink" title="简单工厂模式的优缺点"></a>简单工厂模式的优缺点</h2><blockquote>
<p>在这个模式中，工厂类是整个模式的关键所在。它包含必要的判断逻辑，能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。用户在使用时可以直接根据工厂类去创建所需的实例，而无需了解这些对象是如何创建以及如何组织的，有利于整个软件体系结构的优化。<br>不难发现，简单工厂模式的缺点也正体现在其工厂类上，由于工厂类集中了所有实例的创建逻辑，所以”高内聚”方面做的并不好，另外，当系统中的具体产品类不断增多时，可能会出现要求工厂类也要做相应的修改，扩展性并不是很好。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h1&gt;&lt;h2 id=&quot;什么是简单工厂模式&quot;&gt;&lt;a href=&quot;#什么是简单工厂模式&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Java" scheme="https://izdo.github.io/tags/Java/"/>
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="设计模式" scheme="https://izdo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>RxJava2(下)</title>
    <link href="https://izdo.github.io/2017/06/04/RxJava2(%E4%B8%8B)/"/>
    <id>https://izdo.github.io/2017/06/04/RxJava2(下)/</id>
    <published>2017-06-04T01:54:38.652Z</published>
    <updated>2017-06-03T15:16:40.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RxJava2-下"><a href="#RxJava2-下" class="headerlink" title="RxJava2(下)"></a>RxJava2(下)</h1><h2 id="自定义图片缓存框架模型"><a href="#自定义图片缓存框架模型" class="headerlink" title="自定义图片缓存框架模型"></a>自定义图片缓存框架模型</h2><blockquote>
<p>在RxJava2的最后一部分我们利用RxJava2来做一个类似于Picasso的自定义图片缓存框架的模型(具体功能并不实现)，下面是我们要实现的自定义图片缓存框架的流程图。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog13/Blog13_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>解析：当我们发起一个加载图片的请求时，首先是去检查内存中是否有缓存，如果有的话直接显示图片，没有的话就检查文件中是否有缓存，有的话同样直接显示图片，没有的话再从网络上加载，然后再缓存到内存和文件中，通过这样的方式，可以减少从网络上请求数据的操作，这样不仅加快的图片的显示，而且还能降低流量的消耗，而不是说每次都到网络上下载数据。</p>
</blockquote>
<h3 id="新建ImgActivity"><a href="#新建ImgActivity" class="headerlink" title="新建ImgActivity"></a>新建ImgActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjavaop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.jakewharton.rxbinding2.view.RxView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableEmitter;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableOnSubscribe;</div><div class="line"><span class="keyword">import</span> io.reactivex.functions.Consumer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImgActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_img);</div><div class="line"></div><div class="line">        mButton = (Button) findViewById(R.id.btn_get);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// 内存</span></div><div class="line">        <span class="keyword">final</span> Observable&lt;String&gt; memoryObservable = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                e.onNext(<span class="string">"memory"</span>);</div><div class="line">                e.onComplete();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">// 文件</span></div><div class="line">        <span class="keyword">final</span> Observable&lt;String&gt; diskObservable = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                e.onNext(<span class="string">"disk"</span>);</div><div class="line">                e.onComplete();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">// 网络</span></div><div class="line">        <span class="keyword">final</span> Observable&lt;String&gt; netWorkObservable = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                e.onNext(<span class="string">"network"</span>);</div><div class="line">                e.onComplete();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        RxView.clicks(mButton).subscribe(<span class="keyword">new</span> Consumer&lt;Object&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Observable.concat(memoryObservable, diskObservable, netWorkObservable)</div><div class="line">                        .subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                                Log.d(<span class="string">"ImgActivity"</span>, <span class="string">"get data from"</span> + s);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>布局文件同样只有一个按钮。<br>这里通过三个Observable模拟出内存、文件和网络，然后通过concat合并三个Observable(Concat操作符与上一篇文章中的Merge是一样的，只不过Merge可能会使数据发生交错)，最后再打印出合并后的结果即可。</p>
</blockquote>
<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog13/Blog13_2.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>从图中可以看出，获取数据的来源是内存、文件和网络，那么我们刚才所说的内存-&gt;文件-&gt;网络逐一检查该怎么实现呢？这个时候就要用到Filter操作符了。<br>PS：RxJava2与RxJava1有所不同，RxJava1可以使用First操作符限制其只发送第一个非null数据，而在RxJava2中则需要使用Filter进行过滤。</p>
</blockquote>
<h4 id="修改ImgActicity中的代码"><a href="#修改ImgActicity中的代码" class="headerlink" title="修改ImgActicity中的代码"></a>修改ImgActicity中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImgActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">        ...</div><div class="line"></div><div class="line">        RxView.clicks(mButton).subscribe(<span class="keyword">new</span> Consumer&lt;Object&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Observable.concat(memoryObservable, diskObservable, netWorkObservable)</div><div class="line">                        .filter(<span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                                <span class="keyword">return</span> !TextUtils.isEmpty(s);</div><div class="line">                            &#125;</div><div class="line">                        &#125;)</div><div class="line">                        .firstElement()</div><div class="line">                        .subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                                Log.d(<span class="string">"ImgActivity"</span>, <span class="string">"get data from "</span> + s);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里使用Filter过滤掉null对象。<br>需要注意的是，RxJava1是可以发送null对象的，也就是<strong>onNext(null)</strong>，而RxJava2中不能发送null对象，如果使用RxJava2时发送null对象，则会报错：<strong>java.lang.NullPointerException: onNext called with null. Null values are generally not allowed in 2.x operators and sources.</strong>，也就是说RxJava2中不需要发送null对象。<br>那么我们这里的处理就是直接发送空值：<strong>//e.onNext(“”);</strong><br>而通过Filter操作符，这个空值是会被过滤掉的，然后通过FirstElement()获取第一个数据。</p>
</blockquote>
<h5 id="当三个Observable都不为空值时"><a href="#当三个Observable都不为空值时" class="headerlink" title="当三个Observable都不为空值时"></a>当三个Observable都不为空值时</h5><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog13/Blog13_3.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>这个情况代表内存中缓存，则直接读取内存显示图片。</p>
</blockquote>
<h5 id="memoryObservable发送空值"><a href="#memoryObservable发送空值" class="headerlink" title="memoryObservable发送空值"></a>memoryObservable发送空值</h5><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog13/Blog13_4.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>这个情况代表内存无缓存，而文件中右缓存，则直接读取文件显示图片。</p>
</blockquote>
<h5 id="diskObservable发送空值"><a href="#diskObservable发送空值" class="headerlink" title="diskObservable发送空值"></a>diskObservable发送空值</h5><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog13/Blog13_5.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>这个情况代表内存和文件中均无缓存，这个时候则从网络上获取图片然后再显示。<br>这样模拟图片显示的效果就实现了，接下来会正式地编写自定义的图片缓存框架。</p>
</blockquote>
<h2 id="模仿Picasso自定义图片缓存框架"><a href="#模仿Picasso自定义图片缓存框架" class="headerlink" title="模仿Picasso自定义图片缓存框架"></a>模仿Picasso自定义图片缓存框架</h2><blockquote>
<p>在我的OKHttp3框架(上)文章中，曾经使用过Picasso加载图片：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog13/Blog13_6.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Picasso 第三方开源框架</div><div class="line"> * load() 加载图片地址</div><div class="line"> * resize() 设置图片大小</div><div class="line"> * centerCrop() 设置图片圆角</div><div class="line"> * into() 显示到控件</div><div class="line">*/</div><div class="line">Picasso.with(UserInfoActivity.<span class="keyword">this</span>).load(img).resize(<span class="number">100</span>, <span class="number">100</span>).centerCrop().into(mImgview);</div></pre></td></tr></table></figure>
<blockquote>
<p>当我们在使用Picasso框架加载图片的时候，短短的一句话就能让我们成功地获取图片并显示，这样的框架用起来是非常爽的，而我们现在就要模仿Picasso框架的写法，使用RxJava2来自定义一个图片缓存框架。  </p>
</blockquote>
<h3 id="新建RxImageLoader类"><a href="#新建RxImageLoader类" class="headerlink" title="新建RxImageLoader类"></a>新建RxImageLoader类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Imgloader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> io.reactivex.Observer;</div><div class="line"><span class="keyword">import</span> io.reactivex.disposables.Disposable;</div><div class="line"><span class="keyword">import</span> io.reactivex.functions.Predicate;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/31.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxImageLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 创建单例</span></div><div class="line">    <span class="keyword">static</span> RxImageLoader singleton;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mUrl;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RequestCreator mRequestCreator;</div><div class="line"></div><div class="line">    <span class="comment">// 单例模式私有化构造器</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RxImageLoader</span><span class="params">()</span> </span>&#123;</div><div class="line">        mRequestCreator = <span class="keyword">new</span> RequestCreator();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RxImageLoader <span class="title">with</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (RxImageLoader.class) &#123;</div><div class="line">                <span class="comment">// 当单例为空时则新建一个单例</span></div><div class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">                    singleton = <span class="keyword">new</span> Builder(context).build();</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * url 加载图片的地址</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> RxImageLoader <span class="title">load</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.mUrl = url;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * imgView 显示图片的控件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">into</span><span class="params">(<span class="keyword">final</span> ImageView imgview)</span> </span>&#123;</div><div class="line"></div><div class="line">        Observable.concat(mRequestCreator.getImageFromMemory(mUrl),</div><div class="line">                mRequestCreator.getImageFromDisk(mUrl),</div><div class="line">                mRequestCreator.getImageFromNetwork(mUrl))</div><div class="line">                .filter(<span class="keyword">new</span> Predicate&lt;Image&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Image image)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribe(<span class="keyword">new</span> Observer&lt;Image&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Image value)</span> </span>&#123;</div><div class="line"></div><div class="line">                        imgview.setImageBitmap(value.getBitmap());</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 单例模式创建RxImageLoader</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.mContext = context;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> RxImageLoader <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RxImageLoader();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这种单例模式的创建方法是很常见的，将构造器私有化并在Builder()方法中只创建一个实例，调用者只能用这个实例去调用其他方法。</p>
</blockquote>
<h3 id="新建Image类作为图片封装类"><a href="#新建Image类作为图片封装类" class="headerlink" title="新建Image类作为图片封装类"></a>新建Image类作为图片封装类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Imgloader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Image</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Bitmap bitmap;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Image</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.url = url;</div><div class="line">        <span class="keyword">this</span>.bitmap = bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.url = url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBitmap</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bitmap = bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这个类比较简单，只有一个url地址和bitmap以及其get()、set()方法。</p>
</blockquote>
<h3 id="新建CacheObservable类作为缓存类"><a href="#新建CacheObservable类作为缓存类" class="headerlink" title="新建CacheObservable类作为缓存类"></a>新建CacheObservable类作为缓存类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Imgloader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableEmitter;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableOnSubscribe;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheObservable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;Image&gt; <span class="title">getImage</span><span class="params">(<span class="keyword">final</span> String url)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Image&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Image&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!e.isDisposed()) &#123;</div><div class="line">                    Image image = getDataFromCache(url);</div><div class="line"></div><div class="line">                    e.onNext(image);</div><div class="line">                    e.onComplete();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取缓存</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Image <span class="title">getDataFromCache</span><span class="params">(String url)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 设置缓存</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">putDataToCache</span><span class="params">(Image image)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>由于我们获取缓存的方式有内存、文件和网络，所以需要将这个缓存类作为一个父类，然后每种缓存方式都继承自这个缓存类，而具体的缓存方式处理数据的方式又有所不同，所以缓存类中需要有抽象方法，当子类继承这个缓存类的时候，才去具体实现相应的处理，所以缓存类需要定义为抽象类，而对于getImage()方法来说，每种方式显示图片的方法都是一致的，所以此方法在缓存类中实现即可。</p>
</blockquote>
<h3 id="内存缓存类"><a href="#内存缓存类" class="headerlink" title="内存缓存类"></a>内存缓存类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Imgloader;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryCacheObservable</span> <span class="keyword">extends</span> <span class="title">CacheObservable</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Image <span class="title">getDataFromCache</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putDataToCache</span><span class="params">(Image image)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="文件缓存类"><a href="#文件缓存类" class="headerlink" title="文件缓存类"></a>文件缓存类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Imgloader;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiskCacheObservable</span> <span class="keyword">extends</span> <span class="title">CacheObservable</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Image <span class="title">getDataFromCache</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putDataToCache</span><span class="params">(Image image)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="网络缓存类"><a href="#网络缓存类" class="headerlink" title="网络缓存类"></a>网络缓存类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Imgloader;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkCacheObservable</span> <span class="keyword">extends</span> <span class="title">CacheObservable</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Image <span class="title">getDataFromCache</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putDataToCache</span><span class="params">(Image image)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建RequestCreator类用于实例化三个缓存类"><a href="#新建RequestCreator类用于实例化三个缓存类" class="headerlink" title="新建RequestCreator类用于实例化三个缓存类"></a>新建RequestCreator类用于实例化三个缓存类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Imgloader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/6/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestCreator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MemoryCacheObservable mMemoryCacheObservable;</div><div class="line">    <span class="keyword">private</span> DiskCacheObservable mDiskCacheObservable;</div><div class="line">    <span class="keyword">private</span> NetworkCacheObservable mNetworkCacheObservable;</div><div class="line"></div><div class="line">    <span class="comment">// 构造器 初始化三个缓存类</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestCreator</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        mMemoryCacheObservable = <span class="keyword">new</span> MemoryCacheObservable();</div><div class="line">        mDiskCacheObservable = <span class="keyword">new</span> DiskCacheObservable();</div><div class="line">        mNetworkCacheObservable = <span class="keyword">new</span> NetworkCacheObservable();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 从内存中获取图片</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;Image&gt; <span class="title">getImageFromMemory</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mMemoryCacheObservable.getImage(url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 从文件中获取图片</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;Image&gt; <span class="title">getImageFromDisk</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mDiskCacheObservable.getImage(url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 从网络获取图片</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;Image&gt; <span class="title">getImageFromNetwork</span><span class="params">(String url)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mNetworkCacheObservable.getImage(url);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这个类主要用于创建三种缓存类，而调用者只需要实例化RequestCreator类就能同时操作这三种缓存方式了。<br>这样，自定义图片缓存框架大体上的模板已经完成了。</p>
</blockquote>
<h3 id="新建ImgLoaderActivity类"><a href="#新建ImgLoaderActivity类" class="headerlink" title="新建ImgLoaderActivity类"></a>新建ImgLoaderActivity类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjavaop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.jakewharton.rxbinding2.view.RxView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Imgloader.RxImageLoader;</div><div class="line"><span class="keyword">import</span> io.reactivex.functions.Consumer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImgLoaderActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line">    <span class="keyword">private</span> ImageView mImageView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_imgloader);</div><div class="line"></div><div class="line">        mButton = (Button) findViewById(R.id.btn_getImg);</div><div class="line">        mImageView = (ImageView) findViewById(R.id.imageview);</div><div class="line"></div><div class="line"></div><div class="line">        RxView.clicks(mButton).subscribe(<span class="keyword">new</span> Consumer&lt;Object&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                RxImageLoader.with(ImgLoaderActivity.<span class="keyword">this</span>)</div><div class="line">                        .load(<span class="string">"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1035293498,3690663067&amp;fm=23&amp;gp=0.jpg"</span>)</div><div class="line">                        .into(mImageView);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>自定义的图片缓存框架调用方式和Picasso基本上是一样的，但是由于这只是一个模型，具体的功能并没有实现，所以就不进行测试了。</p>
<p>最后再提供几篇可以参考的文章，本篇文章遇到的bug大多数参考自以下文章以及RxJava2(上)文章开头所提供的几篇文章：<br><a href="http://www.open-open.com/lib/view/open1489980802535.html" target="_blank" rel="external">[转]RxJava1 升级到 RxJava2 所踩过的坑</a><br><a href="http://blog.csdn.net/qq285016127/article/details/63010761" target="_blank" rel="external">[转]深入浅出RxJava2.0_02[新特性]</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RxJava2-下&quot;&gt;&lt;a href=&quot;#RxJava2-下&quot; class=&quot;headerlink&quot; title=&quot;RxJava2(下)&quot;&gt;&lt;/a&gt;RxJava2(下)&lt;/h1&gt;&lt;h2 id=&quot;自定义图片缓存框架模型&quot;&gt;&lt;a href=&quot;#自定义图片缓存框架模型&quot;
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>RxJava2(中)</title>
    <link href="https://izdo.github.io/2017/05/30/RxJava2(%E4%B8%AD)/"/>
    <id>https://izdo.github.io/2017/05/30/RxJava2(中)/</id>
    <published>2017-05-30T15:04:17.026Z</published>
    <updated>2017-05-30T15:06:12.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RxJava2-中"><a href="#RxJava2-中" class="headerlink" title="RxJava2(中)"></a>RxJava2(中)</h1><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><blockquote>
<p>RxJava中的操作符有很多种，而前面用到的From、just也是操作符。<br>想要更深入地了解操作符可以参考以下博客：<br><a href="http://blog.csdn.net/lzyzsd/article/details/41833541" target="_blank" rel="external">[转]深入浅出RxJava(一：基础篇)</a><br><a href="http://blog.csdn.net/lzyzsd/article/details/44094895" target="_blank" rel="external">[转]深入浅出RxJava(二：操作符)</a><br><a href="http://www.jianshu.com/p/88779bda6691" target="_blank" rel="external">[转]RxJava操作符学习笔记</a>  </p>
<p>接下来简单介绍一下变换操作符。</p>
<h3 id="Map操作符"><a href="#Map操作符" class="headerlink" title="Map操作符"></a>Map操作符</h3><p>Map操作符对原始Observable发射的每一项数据应用一个你选择的函数，然后返回一个发射这些结果的Observable。<br>RxJava将这个操作符实现为Map函数，这个操作符默认不在任何特定的调度器上执行。<br>Map操作符就是用于变换Observable对象的。</p>
</blockquote>
<h4 id="新建MapActivity"><a href="#新建MapActivity" class="headerlink" title="新建MapActivity"></a>新建MapActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjava2demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> io.reactivex.functions.Consumer;</div><div class="line"><span class="keyword">import</span> io.reactivex.functions.Function;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Api api;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_map);</div><div class="line"></div><div class="line">        mTextView = (TextView) findViewById(R.id.text);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click_map</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">        Observable observable = Observable.just(<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 使用map进行转换</span></div><div class="line">        <span class="comment">// Integer -&gt; String</span></div><div class="line">        Observable observableMap = observable.map(<span class="keyword">new</span> Function&lt;Integer, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span> + <span class="string">"lalala"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">// 订阅</span></div><div class="line">        observableMap.subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>PS:布局文件文件只有一个按钮，点击事件为”click_map”。<br>代码中使用map将原始的Observable的Integer类型的数据转换为String类型，并且得到的结果成为一个新的Observable，而订阅这个Observable需要用新的Observable调用subscribe方法，也就是说通过map转换的Observable和原始的Observable成为两个独立的Observable了。  </p>
<p>那么也许有人就会问了，如果单纯地只是想把Integer数据类型转化为String类型，那何必这么麻烦呢？<br>当然没有必要，但是，转换的强大之处在于泛型中可以是任意数据类型，可以是基本数据类型，当然也可以是引用类型，只要在转换中处理得当。</p>
</blockquote>
<h4 id="修改click-map-中的代码"><a href="#修改click-map-中的代码" class="headerlink" title="修改click_map()中的代码"></a>修改click_map()中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click_map</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">    Observable.just(<span class="number">1</span>).map(<span class="keyword">new</span> Function&lt;Integer,Info&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Info <span class="title">apply</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">            <span class="comment">// do something</span></div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">/*Observable observable = Observable.just(1);</span></div><div class="line"></div><div class="line">    // 使用map进行转换</div><div class="line">    // Integer -&gt; String</div><div class="line">    Observable observableMap = observable.map(new Function&lt;Integer, String&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        public String apply(Integer integer) throws Exception &#123;</div><div class="line">            return 1 + "lalala";</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // 订阅</div><div class="line">    observableMap.subscribe(new Consumer&lt;String&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        public void accept(String s) throws Exception &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);*/</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里使用链式编程让代码简洁一些，同时将原先的Intege-&gt;String修改为Integer-&gt;Info，而具体的逻辑就暂时不实现了。(我们甚至可以转换为一个Obsevable，这里就不多做解释了,后面会有例子详细地介绍。)</p>
</blockquote>
<h3 id="FlatMap操作符"><a href="#FlatMap操作符" class="headerlink" title="FlatMap操作符"></a>FlatMap操作符</h3><blockquote>
<p>FlatMap将一个发射数据的Observable变换为多个Observables，然后将它们发射的数据合并后放进一个单独的Observable。<br>接下来做一个实际的案例。</p>
</blockquote>
<h4 id="新建BaseResult类用于保存登录返回的结果"><a href="#新建BaseResult类用于保存登录返回的结果" class="headerlink" title="新建BaseResult类用于保存登录返回的结果"></a>新建BaseResult类用于保存登录返回的结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjava2demo;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/18.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseResult</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> succerss;</div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSuccerss</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> succerss;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccerss</span><span class="params">(<span class="keyword">int</span> succerss)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.succerss = succerss;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="修改Api中的代码"><a href="#修改Api中的代码" class="headerlink" title="修改Api中的代码"></a>修改Api中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"myserver"</span>)</div><div class="line">    <span class="function">Call&lt;Info&gt; <span class="title">getUserInfo</span><span class="params">(@Query(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</div><div class="line"></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"myserver/Json"</span>)</div><div class="line">    <span class="function">Call&lt;BaseResult&gt; <span class="title">login</span><span class="params">(@Body UserParam param)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建UserParam保存用户名和密码"><a href="#新建UserParam保存用户名和密码" class="headerlink" title="新建UserParam保存用户名和密码"></a>新建UserParam保存用户名和密码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjava2demo;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/28.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserParam</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserParam</span><span class="params">(String username, String password)</span> </span>&#123;\</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="修改MapActivity中的代码"><a href="#修改MapActivity中的代码" class="headerlink" title="修改MapActivity中的代码"></a>修改MapActivity中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Api api;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_map);</div><div class="line"></div><div class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                .baseUrl(<span class="string">"http://192.168.1.53:8080/"</span>)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .build();</div><div class="line"></div><div class="line">        api = retrofit.create(Api.class);</div><div class="line"></div><div class="line">        mTextView = (TextView) findViewById(R.id.text);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> UserParam <span class="title">getUserParam</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        UserParam param = <span class="keyword">new</span> UserParam(<span class="string">"admin"</span>, <span class="string">"123456"</span>);</div><div class="line">        <span class="keyword">return</span> param;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click_map</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">        Observable.just(getUserParam()).flatMap(<span class="keyword">new</span> Function&lt;UserParam, ObservableSource&lt;BaseResult&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> ObservableSource&lt;BaseResult&gt; <span class="title">apply</span><span class="params">(UserParam userParam)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">                BaseResult result = api.login(userParam).execute().body();</div><div class="line"></div><div class="line">                <span class="keyword">return</span> Observable.just(result);</div><div class="line">            &#125;</div><div class="line">        &#125;).flatMap(<span class="keyword">new</span> Function&lt;BaseResult, ObservableSource&lt;Info&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> ObservableSource&lt;Info&gt; <span class="title">apply</span><span class="params">(BaseResult baseResult)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">                Info info = api.getUserInfo(baseResult.getId()).execute().body();</div><div class="line"></div><div class="line">                <span class="keyword">return</span> Observable.just(info);</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;Info&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Info info)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        mTextView.setText(info.getName());</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">       <span class="comment">/* Observable.just(1).map(new Function&lt;Integer,Info&gt;() &#123;</span></div><div class="line">            @Override</div><div class="line">            public Info apply(Integer integer) throws Exception &#123;</div><div class="line"></div><div class="line">                // do something</div><div class="line"></div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">        &#125;);*/</div><div class="line"></div><div class="line">        <span class="comment">/*Observable observable = Observable.just(1);</span></div><div class="line"></div><div class="line">        // 使用map进行转换</div><div class="line">        // Integer -&gt; String</div><div class="line">        Observable observableMap = observable.map(new Function&lt;Integer, String&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public String apply(Integer integer) throws Exception &#123;</div><div class="line">                return 1 + "lalala";</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        // 订阅</div><div class="line">        observableMap.subscribe(new Consumer&lt;String&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void accept(String s) throws Exception &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);*/</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里主要是通过Retrofit发起网络请求，首先将username为”admin”,password为”123456”的UserParam对象传入Api的login方法中，通过Retrofit发起网络请求，接收到的Json数据已通过BaseResult封装好，通过flatMap()将其转换为BaseResult后再次转换为Info对象，而这也证实了Map操作符的强大之处，可以随心所欲地转换对象。<br>PS：网络请求等耗时操作记得放到子线程中执行：<strong>subscribeOn(Schedulers.io())</strong> ，UI操作需要切换回主线程：<strong>observeOn(AndroidSchedulers.mainThread())</strong></p>
</blockquote>
<h4 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog12/Blog12_1.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="Debounce操作符"><a href="#Debounce操作符" class="headerlink" title="Debounce操作符"></a>Debounce操作符</h3><blockquote>
<p>当我们在搜索(例如百度)的时候，每当输入一个关键字，下方选择框就会出现相应的搜索选项。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog12/Blog12_2.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog12/Blog12_3.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>就如图中红框所示的部分，而如何实现这个功能呢？一般的情况下是通过监听EditText控件，当控件中的值发生改变时去请求搜索接口，但是这样的做法有两个缺点，一个是因为控件的值没改变一次立即就会去请求网络，可能会导致很多没有意义的请求，耗费用户流量；另一个是可能会导致最终搜索的结果不是用户想要的，例如当你想搜索”手机”这个关键词的时候，假如你输入”手’的时候发起的网络请求因为网络问题而导致请求缓慢，在输入”机”之后，成功获取到了”手机”关键词的搜索内容，但是这个时候刚才搜集”手”的请求结果返回了，这时候就会出现”手”的请求结果把”手机”的请求结果覆盖了的情况，从而导致搜索结果不正确。<br>这个时候就可以使用RxJava的Debounce操作符来解决这一问题。  </p>
</blockquote>
<h4 id="新建工程RxJavaOp"><a href="#新建工程RxJavaOp" class="headerlink" title="新建工程RxJavaOp"></a>新建工程RxJavaOp</h4><h4 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.izdo.rxjavaop.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/edit_search"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:hint</span>=<span class="string">"请输入查询"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjavaop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.jakewharton.rxbinding2.widget.RxTextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableSource;</div><div class="line"><span class="keyword">import</span> io.reactivex.android.schedulers.AndroidSchedulers;</div><div class="line"><span class="keyword">import</span> io.reactivex.functions.Consumer;</div><div class="line"><span class="keyword">import</span> io.reactivex.functions.Function;</div><div class="line"><span class="keyword">import</span> io.reactivex.schedulers.Schedulers;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EditText mEditText;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        mEditText = (EditText) findViewById(R.id.edit_search);</div><div class="line"></div><div class="line">        RxTextView.textChanges(<span class="keyword">this</span>.mEditText)</div><div class="line">                .debounce(<span class="number">200</span>, TimeUnit.MILLISECONDS)</div><div class="line"></div><div class="line">                <span class="comment">// UI更新在主线程执行</span></div><div class="line">                .subscribeOn(AndroidSchedulers.mainThread())</div><div class="line"></div><div class="line">                .flatMap(<span class="keyword">new</span> Function&lt;CharSequence, ObservableSource&lt;List&lt;String&gt;&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> ObservableSource&lt;List&lt;String&gt;&gt; apply(CharSequence charSequence) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">                        Log.d(<span class="string">"MainActivity"</span>, <span class="string">"flatMap== "</span> + charSequence);</div><div class="line">                        <span class="comment">// search</span></div><div class="line">                        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">                        list.add(<span class="string">"abc"</span>);</div><div class="line">                        list.add(<span class="string">"acb"</span>);</div><div class="line"></div><div class="line">                        <span class="keyword">return</span> Observable.just(list);</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                <span class="comment">// 网络请求在子线程执行</span></div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line"></div><div class="line">                <span class="comment">// 切换回主线程</span></div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line"></div><div class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;List&lt;String&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(List&lt;String&gt; strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        <span class="comment">// 输出结果</span></div><div class="line">                        Log.d(<span class="string">"MainActivity"</span>, <span class="string">"subscribe: "</span> + strings);</div><div class="line">                    &#125;</div><div class="line">                &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        <span class="comment">// 输出错误信息</span></div><div class="line">                        throwable.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里主要通过RxTextView的textChanges方法进行监听，并调用debounce()方法设置每隔200毫秒后才发出请求，这样就解决了多次请求的问题，接着通过filter()过滤空数据，其他的操作都是RxJava的操作，这里不多解释，主要还是要强调一下，相应的操作应该放在对应的线程中执行。</p>
</blockquote>
<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog12/Blog12_4.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>接下来需要解决上文所说的第二个问题，这时候就需要用到switchMap操作符了。</p>
</blockquote>
<h3 id="switchMap操作符"><a href="#switchMap操作符" class="headerlink" title="switchMap操作符"></a>switchMap操作符</h3><blockquote>
<p>switchMAP()将Observable发射的数据集合变换为Observables集合，然后只发射这些Observables最近发射的数据。  </p>
</blockquote>
<h4 id="修改MAinActivity"><a href="#修改MAinActivity" class="headerlink" title="修改MAinActivity"></a>修改MAinActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EditText mEditText;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        </div><div class="line">        ...</div><div class="line">        </div><div class="line">        RxTextView.textChanges(<span class="keyword">this</span>.mEditText)</div><div class="line">                .debounce(<span class="number">200</span>, TimeUnit.MILLISECONDS)</div><div class="line"></div><div class="line">                <span class="comment">// UI更新在主线程执行</span></div><div class="line">                .subscribeOn(AndroidSchedulers.mainThread())</div><div class="line">                <span class="comment">// 过滤数据</span></div><div class="line">                .filter(<span class="keyword">new</span> Predicate&lt;CharSequence&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(CharSequence charSequence)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        <span class="keyword">if</span> (charSequence.toString().trim().length() &gt; <span class="number">0</span>)</div><div class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line"></div><div class="line">                .switchMap(<span class="keyword">new</span> Function&lt;CharSequence, ObservableSource&lt;List&lt;String&gt;&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> ObservableSource&lt;List&lt;String&gt;&gt; apply(CharSequence charSequence) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">                        Log.d(<span class="string">"MainActivity"</span>, <span class="string">"flatMap== "</span> + charSequence);</div><div class="line">                        <span class="comment">// search</span></div><div class="line">                        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">                        list.add(<span class="string">"abc"</span>);</div><div class="line">                        list.add(<span class="string">"acb"</span>);</div><div class="line"></div><div class="line">                        <span class="keyword">return</span> Observable.just(list);</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                <span class="comment">/*.flatMap(new Function&lt;CharSequence, ObservableSource&lt;List&lt;String&gt;&gt;&gt;() &#123;</span></div><div class="line">                    @Override</div><div class="line">                    public ObservableSource&lt;List&lt;String&gt;&gt; apply(CharSequence charSequence) throws Exception &#123;</div><div class="line"></div><div class="line">                        Log.d("MainActivity", "flatMap== " + charSequence);</div><div class="line">                        // search</div><div class="line">                        List&lt;String&gt; list = new ArrayList&lt;String&gt;();</div><div class="line">                        list.add("abc");</div><div class="line">                        list.add("acb");</div><div class="line"></div><div class="line">                        return Observable.just(list);</div><div class="line">                    &#125;</div><div class="line">                &#125;)*/</div><div class="line">                </div><div class="line">                ...</div><div class="line">                </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>也就是说switchMap操作符会以最后一次输入的值为基准，将上一次的值给清空掉，这样就解决了因为网络缓慢导致的结果覆盖问题。  </p>
</blockquote>
<h3 id="ThrottleFirst操作符"><a href="#ThrottleFirst操作符" class="headerlink" title="ThrottleFirst操作符"></a>ThrottleFirst操作符</h3><blockquote>
<p>当我们到一个网站注册用户时，在相关资料输入完毕后，我们需要点击注册按钮注册，当我们点击按钮之后，它就会向服务器端发送数据，而有时候有的人可能会(恶意)重复点击按钮，这时候就会不断向服务器发送重复数据，而这些重复的垃圾数据会浪费服务器的资源，那我们该如何解决重复点击按钮呢？一般的做法是计算两次点击的时间差，如果时间差太小则判定为重复点击，用这样的方式来防止重复点击按钮，而在RxJava中，可以通过throttleFirst操作符来实现这个功能。<br>throttleFirst操作符允许设置一个时间长度，之后它会发送固定时间长度内的第一个事件，而屏蔽其它时间，在间隔达到设置的时间后，可以再发送下一个事件。</p>
</blockquote>
<h4 id="新建ExampleActivity类-修改ExampleActivity类为默认启动的Activity"><a href="#新建ExampleActivity类-修改ExampleActivity类为默认启动的Activity" class="headerlink" title="新建ExampleActivity类(修改ExampleActivity类为默认启动的Activity)"></a>新建ExampleActivity类(修改ExampleActivity类为默认启动的Activity)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjavaop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_example);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"ExampleActivity"</span>, <span class="string">"我被点击了"</span>);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>现在来看一下当我们正常点击时所打印的log。<br>PS:布局文件只有一个按钮。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog12/Blog12_5.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>下来使用throttleFirst操作符进行重复限制。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_example);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.btn);</div><div class="line"></div><div class="line">        RxView.clicks(button).throttleFirst(<span class="number">1</span>, TimeUnit.SECONDS).subscribe(<span class="keyword">new</span> Observer&lt;Object&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"ExampleActivity"</span>, <span class="string">"我被点击了"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>用法非常简单，首先调用RxView的clicks()方法将想要监听的按钮绑定好，然后调用throttleFirst()将间隔设置为1秒，最后调用subscribe()订阅即可。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog12/Blog12_6.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>可以看到，不管多么快速的点击，都只会在隔一秒打印出新的log，而这个log响应的是第一次点击按钮时的操作。<br>这样我们就通过了throttleFirst操作符防止重复点击操作(也叫防抖操作)。<br>PS：微信有些地方也没有做防抖操作处理，快速点击朋友圈按钮也会出现重复的页面。</p>
</blockquote>
<h3 id="Merge操作符"><a href="#Merge操作符" class="headerlink" title="Merge操作符"></a>Merge操作符</h3><blockquote>
<p>当我们在使用淘宝购物时，需要将想要购买的物品放入购物车，然后进行付款操作才算购买完成。<br>假设小明现在用手机淘宝购买一件衣服和一件裤子，然后将它们加入购物车，但是小明忘了自己的手机没有联网，所以手机的本地数据并没有上传的云端，接着小明使用电脑淘宝将一件帽子和一双鞋子放入购物车，那么这时候本地的数据和云端的数据需要同步，才能将这四件物品同时展示在购物车中，否则电脑端的购物车只会显示帽子和鞋子，而手机端的购物车只会显示衣服和裤子。<br>这歌时候就需要用到Merge操作符来实现合并的功能了。<br>Merge操作符能够合并多个Observables的发射物。<br>使用Merge操作符可以将多个Observables的输出合并，就好像它们是一个单个的Observable一样。<br>Merge操作符可能会让合并的Observables发射的数据交错(另一个类似的操作符Concat不会让数据交错，它会按顺序一个接着一个发射多个Observables的发射物)。</p>
</blockquote>
<h4 id="新建Api接口"><a href="#新建Api接口" class="headerlink" title="新建Api接口"></a>新建Api接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjavaop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> retrofit2.http.GET;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/30.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"myserver"</span>)</div><div class="line">    Observable&lt;List&lt;Commodity&gt;&gt; getCommodity();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Api接口前面已经用过很多次了，这里不多解释。</p>
</blockquote>
<h4 id="新建Commodity类用于保存商品的名称和id"><a href="#新建Commodity类用于保存商品的名称和id" class="headerlink" title="新建Commodity类用于保存商品的名称和id"></a>新建Commodity类用于保存商品的名称和id</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjavaop;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/30.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Commodity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Commodity</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Commodity</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建MergeActivity"><a href="#新建MergeActivity" class="headerlink" title="新建MergeActivity"></a>新建MergeActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjavaop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> io.reactivex.Observer;</div><div class="line"><span class="keyword">import</span> io.reactivex.disposables.Disposable;</div><div class="line"><span class="keyword">import</span> io.reactivex.schedulers.Schedulers;</div><div class="line"><span class="keyword">import</span> retrofit2.Retrofit;</div><div class="line"><span class="keyword">import</span> retrofit2.converter.gson.GsonConverterFactory;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Api api;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_merge);</div><div class="line"></div><div class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                .baseUrl(<span class="string">"http://192.168.1.53:8080/"</span>)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .build();</div><div class="line"></div><div class="line">        api = retrofit.create(Api.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">        Observable.merge(getDataFromLocal(), getDataFromNetwork()).subscribe(<span class="keyword">new</span> Observer&lt;List&lt;Commodity&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;Commodity&gt; commodity)</span> </span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">for</span> (Commodity c : commodity) &#123;</div><div class="line">                    Log.d(<span class="string">"MergeActivity"</span>, <span class="string">"name: "</span> + c.getName());</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"MergeActivity"</span>, <span class="string">"onComplete "</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 本地数据</span></div><div class="line">    <span class="keyword">private</span> Observable&lt;List&lt;Commodity&gt;&gt; getDataFromLocal() &#123;</div><div class="line"></div><div class="line">        List&lt;Commodity&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        list.add(<span class="keyword">new</span> Commodity(<span class="string">"衣服"</span>));</div><div class="line">        list.add(<span class="keyword">new</span> Commodity(<span class="string">"裤子"</span>));</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Observable.just(list);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 云端数据</span></div><div class="line">    <span class="keyword">private</span> Observable&lt;List&lt;Commodity&gt;&gt; getDataFromNetwork() &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> api.getCommodity().subscribeOn(Schedulers.io());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>PS：布局文件同样只有一个按钮。<br>服务器端的数据已经预先准备好。</p>
</blockquote>
<h4 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog12/Blog12_7.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>这样服务器端和本地的数据已经合并在一起了。</p>
</blockquote>
<h3 id="Interval操作符"><a href="#Interval操作符" class="headerlink" title="Interval操作符"></a>Interval操作符</h3><blockquote>
<p>在日常生活中，我们经常会通过手机获取验证码，而这个时候，验证码输入框旁边的按钮就会出现倒计时，如果倒计时结束后还未输入验证码，则可以重新获取验证码，接下来就通过RxJava的interval操作符实现这个功能。<br>Interval操作符创建一个按固定时间间隔发射整数序列的Observable。<br>Interval返回一个Observable，它按固定的时间间隔发射一个无限递增的整数序列。</p>
</blockquote>
<h4 id="新建IntervalActivity"><a href="#新建IntervalActivity" class="headerlink" title="新建IntervalActivity"></a>新建IntervalActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjavaop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> io.reactivex.Observer;</div><div class="line"><span class="keyword">import</span> io.reactivex.disposables.Disposable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntervalActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EditText mEditText;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_interval);</div><div class="line"></div><div class="line">        mEditText = (EditText) findViewById(R.id.edit_mobi);</div><div class="line">        mButton = (Button) findViewById(R.id.btn_send);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">        Observable.interval(<span class="number">0</span>, <span class="number">1</span>, TimeUnit.SECONDS).subscribe(<span class="keyword">new</span> Observer&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long value)</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"IntervalActivity"</span>, <span class="string">"onNext"</span> + value);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"IntervalActivity"</span>, <span class="string">"onComplete"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="布局文件-1"><a href="#布局文件-1" class="headerlink" title="布局文件"></a>布局文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_interval"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.izdo.rxjavaop.IntervalActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/edit_mobi"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:hint</span>=<span class="string">"请输入验证码"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_send"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#fc3778"</span></div><div class="line">        <span class="attr">android:onClick</span>=<span class="string">"click"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"发送验证码"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="效果图-2"><a href="#效果图-2" class="headerlink" title="效果图"></a>效果图</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog12/Blog12_8.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>这是一个无限递增的”计时器”，但是目前存在一些问题：</p>
<ul>
<li>计时器一般是倒计时</li>
<li>倒计时时按钮应该设为不可点击</li>
<li>倒计时时按钮上的文字应该设为对应的数字</li>
<li>计时是从0开始的，这点需要注意</li>
</ul>
<p>接下来就一个一个地解决这些问题，首先计时器不能为无限递增，需要设置一个限制，这时候就要用到<strong>Take操作符</strong>了，而想要在倒计时时按钮设置为不可点击则可以在订阅时进行设置，可以使用<strong>doONSubscribe()</strong> 方法。</p>
</blockquote>
<h4 id="修改IntervalActivity中的代码"><a href="#修改IntervalActivity中的代码" class="headerlink" title="修改IntervalActivity中的代码"></a>修改IntervalActivity中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjavaop;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> io.reactivex.Observer;</div><div class="line"><span class="keyword">import</span> io.reactivex.android.schedulers.AndroidSchedulers;</div><div class="line"><span class="keyword">import</span> io.reactivex.disposables.Disposable;</div><div class="line"><span class="keyword">import</span> io.reactivex.functions.Consumer;</div><div class="line"><span class="keyword">import</span> io.reactivex.functions.Function;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntervalActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EditText mEditText;</div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_interval);</div><div class="line"></div><div class="line">        mEditText = (EditText) findViewById(R.id.edit_mobi);</div><div class="line">        mButton = (Button) findViewById(R.id.btn_send);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 时限</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = <span class="number">10</span>;</div><div class="line"></div><div class="line">        Observable.interval(<span class="number">0</span>, <span class="number">1</span>, TimeUnit.SECONDS)</div><div class="line">                <span class="comment">// 设置时限</span></div><div class="line">                .take(count + <span class="number">1</span>)</div><div class="line">                <span class="comment">// 转换当前倒计时的值</span></div><div class="line">                .map(<span class="keyword">new</span> Function&lt;Long, Long&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> Long <span class="title">apply</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        <span class="keyword">return</span> count - aLong;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                <span class="comment">// UI更新需要在主线程执行</span></div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                <span class="comment">// 在订阅时设置按钮不可点击</span></div><div class="line">                .doOnSubscribe(<span class="keyword">new</span> Consumer&lt;Disposable&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Disposable disposable)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        mButton.setEnabled(<span class="keyword">false</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribe(<span class="keyword">new</span> Observer&lt;Long&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long value)</span> </span>&#123;</div><div class="line">                        Log.d(<span class="string">"IntervalActivity"</span>, <span class="string">"onNext"</span> + value);</div><div class="line"></div><div class="line">                        <span class="comment">// 设置当前剩余时间</span></div><div class="line">                        mButton.setText(<span class="string">"剩余"</span> + value + <span class="string">"秒"</span>);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                        Log.d(<span class="string">"IntervalActivity"</span>, <span class="string">"onComplete"</span>);</div><div class="line">                        <span class="comment">// 还原按钮初始化状态</span></div><div class="line">                        mButton.setEnabled(<span class="keyword">true</span>);</div><div class="line">                        mButton.setText(<span class="string">"发送验证码"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>一般倒计时都是60秒，但是这里因为时间问题就只设置10秒。</p>
</blockquote>
<h4 id="效果图-3"><a href="#效果图-3" class="headerlink" title="效果图"></a>效果图</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog12/Blog12_9.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>现在倒计时就成功实现了，而且上述问题也都解决了，从图中可以看到，在倒计时时，无论怎么点击倒计时也不会重新开始，所以一个获取验证码倒计时的功能就完成了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RxJava2-中&quot;&gt;&lt;a href=&quot;#RxJava2-中&quot; class=&quot;headerlink&quot; title=&quot;RxJava2(中)&quot;&gt;&lt;/a&gt;RxJava2(中)&lt;/h1&gt;&lt;h2 id=&quot;操作符&quot;&gt;&lt;a href=&quot;#操作符&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>RxJava2(上)</title>
    <link href="https://izdo.github.io/2017/05/30/RxJava2(%E4%B8%8A)/"/>
    <id>https://izdo.github.io/2017/05/30/RxJava2(上)/</id>
    <published>2017-05-30T15:04:17.023Z</published>
    <updated>2017-05-30T15:06:05.248Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RxJava2-上"><a href="#RxJava2-上" class="headerlink" title="RxJava2(上)"></a>RxJava2(上)</h1><h2 id="RxJava2是什么"><a href="#RxJava2是什么" class="headerlink" title="RxJava2是什么"></a>RxJava2是什么</h2><blockquote>
<p>RxJava2是一个在Java虚拟机上使用可观测的序列来组成异步的、基于事件的程序的库。<br>总结起来就是异步、简单、强大。</p>
<ul>
<li><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava github官网</a></li>
<li><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">[转]给 Android 开发者的 RxJava 详解</a></li>
<li><a href="http://www.jianshu.com/p/850af4f09b61" target="_blank" rel="external">[转]RxJava2 vs RxJava1</a></li>
</ul>
</blockquote>
<h2 id="RxJava中的概念"><a href="#RxJava中的概念" class="headerlink" title="RxJava中的概念"></a>RxJava中的概念</h2><blockquote>
<ul>
<li>Observable:被观察者(主题Subject)</li>
<li>Observer、Subscriber:观察者</li>
<li>Subscribe:订阅<br>Observable和Observer通过subscribe()方法实现订阅关系。</li>
</ul>
</blockquote>
<h2 id="RxJava2的基本使用"><a href="#RxJava2的基本使用" class="headerlink" title="RxJava2的基本使用"></a>RxJava2的基本使用</h2><blockquote>
<p>使用RxJava2首先理所当然的是要添加依赖了：</p>
<ul>
<li>compile ‘io.reactivex.rxjava2:rxjava:2.1.0’</li>
<li>compile ‘io.reactivex.rxjava2:rxandroid:2.0.1’</li>
</ul>
</blockquote>
<h3 id="1-创建Observable"><a href="#1-创建Observable" class="headerlink" title="1.创建Observable"></a>1.创建Observable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; observable = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 发送通知</span></div><div class="line">        e.onNext(<span class="string">"hello"</span>);</div><div class="line">        e.onNext(<span class="string">"world"</span>);</div><div class="line">        <span class="comment">// 完成通知</span></div><div class="line">        e.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="2-创建Observer"><a href="#2-创建Observer" class="headerlink" title="2.创建Observer"></a>2.创建Observer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"MainActivity"</span>, <span class="string">"onSubscribe: "</span> + d.isDisposed());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"MainActivity"</span>, <span class="string">"onNext: "</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"MainActivity"</span>, <span class="string">"onError: "</span> + e.getLocalizedMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"MainActivity"</span>, <span class="string">"onComplete "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>ps:onComplete()和onError()是互斥的，一次只能调用其中一个。</p>
</blockquote>
<h3 id="3-订阅"><a href="#3-订阅" class="headerlink" title="3.订阅"></a>3.订阅</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(oberver);</div></pre></td></tr></table></figure>
<blockquote>
<p>这是RxJava2的基本使用方法，接下来就用一个实际案例来认识一下RxJava2。</p>
</blockquote>
<h2 id="创建新工程RxJava2Demo"><a href="#创建新工程RxJava2Demo" class="headerlink" title="创建新工程RxJava2Demo"></a>创建新工程RxJava2Demo</h2><h3 id="activity-main布局文件"><a href="#activity-main布局文件" class="headerlink" title="activity_main布局文件"></a>activity_main布局文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.izdo.rxjava2demo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:onClick</span>=<span class="string">"click"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"test"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjava2demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableEmitter;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableOnSubscribe;</div><div class="line"><span class="keyword">import</span> io.reactivex.Observer;</div><div class="line"><span class="keyword">import</span> io.reactivex.disposables.Disposable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        Observable&lt;String&gt; observable = getObservable();</div><div class="line">        Observer&lt;String&gt; observer = getObserver();</div><div class="line"></div><div class="line">        observable.subscribe(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">getObservable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">                e.onNext(<span class="string">"状态改变了"</span>);</div><div class="line">                e.onNext(<span class="string">"状态又改变了"</span>);</div><div class="line">                e.onComplete();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Observer&lt;String&gt; <span class="title">getObserver</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"onSubscribe"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"onNext"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"onError"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"onComplete"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog11/Blog11_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>可以看到，log的打印顺序为onSubscribe-&gt;onNext-&gt;onNext-&gt;onComplete,除了onSubscribe，后面的打印顺序与subscribe()方法中的调用顺序是一致的，由此可以推测出onSubscribe()方法是在每次接收数据之前就会调用的方法。<br>那么onSubscribe()方法有什么用呢？在代码中我们可以看到onSubscribe()方法接收一个Disposable参数，而Disposable这个对象有一些常用的方法：</p>
<ul>
<li>dispose() : 用于取消订阅关系。</li>
<li>isDisposed() : 用于查看是否有订阅关系。  </li>
</ul>
</blockquote>
<h3 id="修改getObserver-中的代码"><a href="#修改getObserver-中的代码" class="headerlink" title="修改getObserver()中的代码"></a>修改getObserver()中的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Observer&lt;String&gt; <span class="title">getObserver</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line"></div><div class="line">            Disposable disposable = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line">                disposable = d;</div><div class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"onSubscribe"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"onNext"</span>);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (s.equals(<span class="string">"取消订阅"</span>)) &#123;</div><div class="line">                    disposable.dispose();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">           ...</div><div class="line">        &#125;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>所以Disposable参数常用于上述代码所体现的取消订阅。</p>
</blockquote>
<h3 id="简洁写法"><a href="#简洁写法" class="headerlink" title="简洁写法"></a>简洁写法</h3><h4 id="修改click-方法中的代码"><a href="#修改click-方法中的代码" class="headerlink" title="修改click()方法中的代码"></a>修改click()方法中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    Observable&lt;String&gt; observable = getObservable();</div><div class="line">    <span class="comment">//Observer&lt;String&gt; observer = getObserver();</span></div><div class="line"></div><div class="line">    <span class="comment">//observable.subscribe(observer);</span></div><div class="line"></div><div class="line">    observable.subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="keyword">new</span> Action() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里可以看到将Observer和订阅的代码注释掉而改用匿名内部类的方式new出两个Consumer和一个Action，分别对应的是onNext()、onError()、onComplete()，这样写的话创建Observable的代码就简洁了很多。<br>那么还有其他简洁的写法吗？答案是有的。</p>
</blockquote>
<h4 id="修改getObservable-方法中的代码"><a href="#修改getObservable-方法中的代码" class="headerlink" title="修改getObservable()方法中的代码"></a>修改getObservable()方法中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">getObservable</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">       Observable observable = Observable.just(<span class="string">"状态改变了"</span>, <span class="string">"状态又改变了"</span>, <span class="string">"状态再次改变了"</span>);</div><div class="line">       <span class="keyword">return</span> observable;</div><div class="line"></div><div class="line">       <span class="comment">//        return Observable.create(new ObservableOnSubscribe&lt;String&gt;() &#123;</span></div><div class="line">       <span class="comment">//            @Override</span></div><div class="line">       <span class="comment">//            public void subscribe(ObservableEmitter&lt;String&gt; e) throws Exception &#123;</span></div><div class="line">       <span class="comment">//</span></div><div class="line">       <span class="comment">//                e.onNext("状态改变了");</span></div><div class="line">       <span class="comment">//                e.onNext("状态又改变了");</span></div><div class="line">       <span class="comment">//                e.onComplete();</span></div><div class="line">       <span class="comment">//            &#125;</span></div><div class="line">       <span class="comment">//        &#125;);</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>Observable.just(“状态改变了”, “状态又改变了”, “状态再次改变了”)</strong><br>这里的just里的三个参数相当于observable调用了三次onNext()方法。</p>
</blockquote>
<h4 id="修改click-方法中的代码-1"><a href="#修改click-方法中的代码-1" class="headerlink" title="修改click()方法中的代码"></a>修改click()方法中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">       Observable&lt;String&gt; observable = getObservable();</div><div class="line">       <span class="comment">//Observer&lt;String&gt; observer = getObserver();</span></div><div class="line"></div><div class="line">       <span class="comment">//observable.subscribe(observer);</span></div><div class="line"></div><div class="line">       observable.subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">               Log.d(<span class="string">"MainActivity"</span>, <span class="string">"accept:="</span> + s);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里只保留一个accept()方法，并在accept()方法里打出log。</p>
</blockquote>
<h4 id="部署项目-1"><a href="#部署项目-1" class="headerlink" title="部署项目"></a>部署项目</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog11/Blog11_2.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>可以看到，log日志成功打印出来了，这也是一种简化代码的方式。</p>
</blockquote>
<h4 id="修改getObservable-方法"><a href="#修改getObservable-方法" class="headerlink" title="修改getObservable()方法"></a>修改getObservable()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">getObservable</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="comment">// Observable observable = Observable.just("状态改变了", "状态又改变了", "状态再次改变了");</span></div><div class="line">   </div><div class="line">    Observable observable = Observable.fromArray(<span class="string">"状态改变了"</span>, <span class="string">"状态又改变了"</span>, <span class="string">"状态再次改变了"</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> observable;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这种方式也能够实现同样的效果,而fromArray()中实际是一个数组,just()方法中其实也是通过调用而fromArray()方法来实现的。</p>
</blockquote>
<h4 id="再次修改getObservable-方法"><a href="#再次修改getObservable-方法" class="headerlink" title="再次修改getObservable()方法"></a>再次修改getObservable()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">getObservable</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// Observable observable = Observable.just("状态改变了", "状态又改变了", "状态再次改变了");</span></div><div class="line">    <span class="comment">// Observable observable = Observable.fromArray("状态改变了", "状态又改变了", "状态再次改变了");</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> Observable.fromCallable(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"状态改变了"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这种方式同样也能够实现，只不过相对于其他两种方式，fromCallable()方式有参数的限制。</p>
</blockquote>
<h2 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h2><blockquote>
<p>我们都知道在Android中需要操作网络等耗时的操作时都需要开启一个子线程来执行，而子线程中是不能更新UI的，所以我们一般都会使用Handler或者AsyncTask<br>异步任务来完成，而我们一开始就说了，RxJava2是一个<strong>异步框架</strong>，所以我们接下来就使用RxJava2来实现线程控制。</p>
</blockquote>
<h3 id="新建SchedulerTestActivity"><a href="#新建SchedulerTestActivity" class="headerlink" title="新建SchedulerTestActivity"></a>新建SchedulerTestActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjava2demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableEmitter;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableOnSubscribe;</div><div class="line"><span class="keyword">import</span> io.reactivex.Observer;</div><div class="line"><span class="keyword">import</span> io.reactivex.disposables.Disposable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerTestActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_scheduler_test);</div><div class="line"></div><div class="line">        mTextView = (TextView) findViewById(R.id.text);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">        Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Info&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Info&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="comment">// 请求network</span></div><div class="line">                Info info = <span class="keyword">new</span> Info(<span class="string">"3"</span>,<span class="string">"admin"</span>);</div><div class="line"></div><div class="line">                e.onNext(info);</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Observer&lt;Info&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Info info)</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"SchedulerTestActivity"</span>, <span class="string">""</span>+info);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里主要逻辑在click()方法中，主要还是使用了RxJava2的基本用法，创建一个Observable，并发出请求再打印出log日志。</p>
</blockquote>
<h3 id="activity-scheduler-test布局文件"><a href="#activity-scheduler-test布局文件" class="headerlink" title="activity_scheduler_test布局文件"></a>activity_scheduler_test布局文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_scheduler_test"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.izdo.rxjava2demo.SchedulerTestActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:onClick</span>=<span class="string">"click"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Test"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>布局文件比较简单，只有一个Button和一个TextView</p>
</blockquote>
<h3 id="新建Api接口类和Info类"><a href="#新建Api接口类和Info类" class="headerlink" title="新建Api接口类和Info类"></a>新建Api接口类和Info类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjava2demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> retrofit2.Call;</div><div class="line"><span class="keyword">import</span> retrofit2.http.GET;</div><div class="line"><span class="keyword">import</span> retrofit2.http.Path;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/15.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"myserver"</span>)</div><div class="line">    <span class="function">Call&lt;Info&gt; <span class="title">getUserInfo</span><span class="params">(@Query(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"myserver/&#123;id&#125;"</span>)</div><div class="line">    <span class="function">Call&lt;Info&gt; <span class="title">getUserInfoWithPath</span><span class="params">(@Path(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjava2demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.gson.Gson;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/15.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * id : 1</div><div class="line">     * name : 香菜</div><div class="line">     * img : https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1035293498,3690663067&amp;fm=23&amp;gp=0.jpg</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String img;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">(String id, String name, String img)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.img = img;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">(String id, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getImg</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> img;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImg</span><span class="params">(String img)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.img = img;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Gson().toJson(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这两个类是从<a href="https://izdo.github.io/2017/05/20/Retrofit%E6%A1%86%E6%9E%B6/">Retrofit</a>那篇博客中拷贝过来的，Api(因为后边会用到所以一并复制过来了)只保留亮个方法，Info类添加一个toString()方法。<br>PS：因为后边需要用到Retrofit所以记得加上Retrofit的依赖。</p>
</blockquote>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog11/Blog11_3.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>接下来就使用Retrofit来发出网络请求了(服务器方面已事先准备好)。</p>
</blockquote>
<h3 id="修改SchedulerTestActivity中的代码"><a href="#修改SchedulerTestActivity中的代码" class="headerlink" title="修改SchedulerTestActivity中的代码"></a>修改SchedulerTestActivity中的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.rxjava2demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.reactivex.Observable;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableEmitter;</div><div class="line"><span class="keyword">import</span> io.reactivex.ObservableOnSubscribe;</div><div class="line"><span class="keyword">import</span> io.reactivex.Observer;</div><div class="line"><span class="keyword">import</span> io.reactivex.disposables.Disposable;</div><div class="line"><span class="keyword">import</span> io.reactivex.schedulers.Schedulers;</div><div class="line"><span class="keyword">import</span> retrofit2.Retrofit;</div><div class="line"><span class="keyword">import</span> retrofit2.converter.gson.GsonConverterFactory;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerTestActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Api api;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_scheduler_test);</div><div class="line"></div><div class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                .baseUrl(<span class="string">"http://192.168.1.53:8080/"</span>)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .build();</div><div class="line"></div><div class="line"></div><div class="line">        api = retrofit.create(Api.class);</div><div class="line"></div><div class="line">        mTextView = (TextView) findViewById(R.id.text);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">        Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Info&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 在主线程中执行</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Info&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">                Info info = api.getUserInfo(<span class="number">1</span>).execute().body();</div><div class="line"></div><div class="line">                <span class="comment">// 请求network</span></div><div class="line">                <span class="comment">// Info info = new Info("3", "admin");</span></div><div class="line"></div><div class="line">                e.onNext(info);</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribeOn(Schedulers.io()) <span class="comment">// 切换到子线程</span></div><div class="line">                .subscribe(<span class="keyword">new</span> Observer&lt;Info&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Info info)</span> </span>&#123;</div><div class="line">                        Log.d(<span class="string">"SchedulerTestActivity"</span>, <span class="string">""</span> + info);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>由于subscribe()方法是在主线程中执行的，而我们要发起网络请求的话需要在子线程中进行，如果就这样运行的话会抛出<strong>NetworkOnMainThreadException</strong>,这时就需要用到subscribeOn()来切换到子线程，而此方法可以传入的参数有多个，这里暂且传入 Schedulers.io()，参数的类型后边会有所介绍。</p>
</blockquote>
<h3 id="部署到模拟器"><a href="#部署到模拟器" class="headerlink" title="部署到模拟器"></a>部署到模拟器</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog11/Blog11_4.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>可以看到，传入的id成功地返回给我们，并且服务器还返回了一个name。<br>接下来我们就将这个name显示到TextView上。</p>
</blockquote>
<h3 id="修改click-方法中的代码-2"><a href="#修改click-方法中的代码-2" class="headerlink" title="修改click()方法中的代码"></a>修改click()方法中的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">       Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Info&gt;() &#123;</div><div class="line"></div><div class="line">           ...</div><div class="line">           &#125;</div><div class="line">       &#125;).subscribeOn(Schedulers.io()) <span class="comment">// 切换到子线程</span></div><div class="line">               .subscribe(<span class="keyword">new</span> Observer&lt;Info&gt;() &#123;</div><div class="line">                   <span class="meta">@Override</span></div><div class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line"></div><div class="line">                   &#125;</div><div class="line"></div><div class="line">                   <span class="meta">@Override</span></div><div class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Info info)</span> </span>&#123;</div><div class="line">                       Log.d(<span class="string">"SchedulerTestActivity"</span>, <span class="string">""</span> + info);</div><div class="line">                       mTextView.setText(info.getName());</div><div class="line">                   &#125;</div><div class="line"></div><div class="line">                 ...</div><div class="line">               &#125;);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里仅仅是在onNext()方法中将获取的name设置到TextView上。</p>
</blockquote>
<h3 id="部署到模拟器-1"><a href="#部署到模拟器-1" class="headerlink" title="部署到模拟器"></a>部署到模拟器</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog11/Blog11_5.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>通过Log日志得知，虽然成功获取到数据，但是却不能设置到TextView上，而是出现了<strong>Only the original thread that created a view hierarchy can touch its view</strong>，这个错误是非常常见的，是我们在UI线程(主线程)之外的地方更新UI而导致的，所以在切换到子线程中发起网络请求之后，还需要将线程切换回主线程，而observeOn()方法就可以做到将线程切换回主线程。</p>
</blockquote>
<h3 id="修改click-方法中的代码-3"><a href="#修改click-方法中的代码-3" class="headerlink" title="修改click()方法中的代码"></a>修改click()方法中的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Info&gt;() &#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io()) <span class="comment">// 切换到子线程</span></div><div class="line">        .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 切换回主线程</span></div><div class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Info&gt;() &#123;</div><div class="line">        </div><div class="line">           ...</div><div class="line">           </div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="部署到模拟器-2"><a href="#部署到模拟器-2" class="headerlink" title="部署到模拟器"></a>部署到模拟器</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog11/Blog11_6.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="线程切换的参数类型"><a href="#线程切换的参数类型" class="headerlink" title="线程切换的参数类型"></a>线程切换的参数类型</h3><h4 id="Schedulers-immediate"><a href="#Schedulers-immediate" class="headerlink" title="Schedulers.immediate()"></a>Schedulers.immediate()</h4><blockquote>
<p>直接在当前线程运行，相当于不指定线程。是默认的Scheduler。</p>
</blockquote>
<h4 id="Schedulers-newThread"><a href="#Schedulers-newThread" class="headerlink" title="Schedulers.newThread()"></a>Schedulers.newThread()</h4><blockquote>
<p>总是启用新线程，并在新线程执行操作。</p>
</blockquote>
<h4 id="Schedulers-io"><a href="#Schedulers-io" class="headerlink" title="Schedulers.io()"></a>Schedulers.io()</h4><blockquote>
<p>I/O操作(读写文件、读写数据库、网络信息交互等)所使用的Scheduler。行为模式和newThread()差不多，区别在于io()的内部实现是用一个无数量上线的线程池，可以重用空闲的线程，因此多数情况下io()比newThread()更有效率。不要把计算工作放在io()中，可以避免创建不必要的线程。</p>
</blockquote>
<h4 id="Schedulers-computation"><a href="#Schedulers-computation" class="headerlink" title="Schedulers.computation()"></a>Schedulers.computation()</h4><blockquote>
<p>计算所使用的Scheduler。这个计算指的是CPU密集型计算，即不会被I/O等操作限制性能的操作，例如图形的计算。这个Scheduler使用固定的线程池，大小为CPU核数。不要把I/O操作放在computation()中，否则I/O操作的等待时间会浪费CPU。</p>
</blockquote>
<h4 id="AndroidSchedulers-mainThread"><a href="#AndroidSchedulers-mainThread" class="headerlink" title="AndroidSchedulers.mainThread()"></a>AndroidSchedulers.mainThread()</h4><blockquote>
<p>由它指定的操作将在Android主线程运行。  </p>
<p>observeOn()指定Observer线程。<br>observeOn作用于该操作符之后操作符直到出现新的observeOn操作符。<br>subscribeOn()指定Observable线程。<br>subscribeOn作用于该操作符之前的Observable的创建操符作以及doOnSubscribe操作符，换句话说就是doOnSubscribe以及Observable的创建操作符总是被其之后最近的subscribeOn控制。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RxJava2-上&quot;&gt;&lt;a href=&quot;#RxJava2-上&quot; class=&quot;headerlink&quot; title=&quot;RxJava2(上)&quot;&gt;&lt;/a&gt;RxJava2(上)&lt;/h1&gt;&lt;h2 id=&quot;RxJava2是什么&quot;&gt;&lt;a href=&quot;#RxJava2是什么&quot; c
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="https://izdo.github.io/2017/05/21/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://izdo.github.io/2017/05/21/观察者模式/</id>
    <published>2017-05-21T05:36:51.561Z</published>
    <updated>2017-05-29T14:09:55.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><h2 id="什么是观察者模式"><a href="#什么是观察者模式" class="headerlink" title="什么是观察者模式"></a>什么是观察者模式</h2><blockquote>
<p>观察者模式是对象的行为模式（有时又被称为发布（publish ）-订阅（Subscribe）模式、模型-视图（View）模式、源-收听者(Listener)模式或从属者模式）,是软件设计模式的一种。在此种模式中，一个目标物件管理所有相依于它的观察者物件，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实现事件处理系统。<br>观察者模式（Observer）完美的将观察者和被观察的对象分离开。举个例子，用户界面可以作为一个观察者，业务数据是被观察者，用户界面观察业务数据的变化，发现数据变化后，就显示在界面上。面向对象设计的一个原则是：系统中的每个类将重点放在某一个功能上，而不是其他方面。一个对象只做一件事情，并且将他做好。观察者模式在模块之间划定了清晰的界限，提高了应用程序的可维护性和重用性。<br>观察者设计模式定义了对象间的一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。</p>
</blockquote>
<h2 id="观察者模式中的角色"><a href="#观察者模式中的角色" class="headerlink" title="观察者模式中的角色"></a>观察者模式中的角色</h2><blockquote>
<p> 抽象主题（Subject）：它把所有观察者对象的引用保存到一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。<br>具体主题（ConcreteSubject）：将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发出通知。<br>抽象观察者（Observer）：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。<br>具体观察者（ConcreteObserver）：实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题状态协调。  </p>
</blockquote>
<h2 id="观察者模式图例"><a href="#观察者模式图例" class="headerlink" title="观察者模式图例"></a>观察者模式图例</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog10/Blog10_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="模拟观察者模式"><a href="#模拟观察者模式" class="headerlink" title="模拟观察者模式"></a>模拟观察者模式</h2><blockquote>
<p>观察者模式的介绍会比较抽象，接下来还是用实例来演示一下什么是观察者模式。<br>PS：这里用的编译工具是Eclipse。</p>
<p>比如说：Subject是一个罪犯，而Observer是警察，而警察需要观察罪犯的一举一动，并且罪犯可能是一个穷凶极恶的罪犯，所以需要一个警察团队来监视的这个罪犯，所以警察可以放在一个整体中(例如集合)，当罪犯的状态发生改变时，警察会收到通知。</p>
</blockquote>
<h3 id="新建Java工程ObserverDemo"><a href="#新建Java工程ObserverDemo" class="headerlink" title="新建Java工程ObserverDemo"></a>新建Java工程ObserverDemo</h3><h4 id="新建Observer类-作为观察者"><a href="#新建Observer类-作为观察者" class="headerlink" title="新建Observer类 作为观察者"></a>新建Observer类 作为观察者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> iZdo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String state)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建Subject类-作为被观察者-被观察的主题"><a href="#新建Subject类-作为被观察者-被观察的主题" class="headerlink" title="新建Subject类 作为被观察者(被观察的主题)"></a>新建Subject类 作为被观察者(被观察的主题)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> iZdo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 保存警察的集合</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加一个监视罪犯的警察</div><div class="line">	 * <span class="doctag">@param</span> observer</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">		observers.add(observer);</div><div class="line">		System.out.println(<span class="string">"您的好友"</span>+observer.getName()+<span class="string">"已上线"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 移除一个监视的警察</div><div class="line">	 * <span class="doctag">@param</span> observer</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dettch</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">		observers.remove(observer);</div><div class="line">		System.out.println(<span class="string">"警察"</span>+observer.getName()+<span class="string">"已GG"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 通知所有警察更新罪犯的状态</div><div class="line">	 * <span class="doctag">@param</span> state</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (Observer observer : observers) &#123;</div><div class="line">			observer.update(state);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建PoliceObserver类-作为警察观察者"><a href="#新建PoliceObserver类-作为警察观察者" class="headerlink" title="新建PoliceObserver类 作为警察观察者"></a>新建PoliceObserver类 作为警察观察者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> iZdo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoliceObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PoliceObserver</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 罪犯状态更新时通知警察</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="keyword">this</span>.name+<span class="string">"接收到消息，基德最新状态："</span> + state);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建ThiefSubject-作为罪犯类"><a href="#新建ThiefSubject-作为罪犯类" class="headerlink" title="新建ThiefSubject 作为罪犯类"></a>新建ThiefSubject 作为罪犯类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> iZdo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThiefSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// 罪犯状态改变</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">		notifyObservers(state);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建Test类-作为测试类"><a href="#新建Test类-作为测试类" class="headerlink" title="新建Test类 作为测试类"></a>新建Test类 作为测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> iZdo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 创建警察</span></div><div class="line">		Observer observer1 = <span class="keyword">new</span> PoliceObserver(<span class="string">"黑猫警长"</span>);</div><div class="line">		Observer observer2 = <span class="keyword">new</span> PoliceObserver(<span class="string">"威威猫"</span>);</div><div class="line">		Observer observer3 = <span class="keyword">new</span> PoliceObserver(<span class="string">"柯南"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 创建罪犯</span></div><div class="line">		ThiefSubject subject = <span class="keyword">new</span> ThiefSubject();</div><div class="line"></div><div class="line">		<span class="comment">// 添加警察</span></div><div class="line">		subject.attach(observer1);</div><div class="line">		subject.attach(observer2);</div><div class="line">		subject.attach(observer3);</div><div class="line"></div><div class="line">		<span class="comment">// 罪犯状态改变</span></div><div class="line">		subject.onClick(<span class="string">"正在抢劫珠宝"</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 移除警察</span></div><div class="line">		subject.dettch(observer3);</div><div class="line"></div><div class="line">		<span class="comment">// 罪犯状态改变</span></div><div class="line">		subject.onClick(<span class="string">"飞走了"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="运行Java工程"><a href="#运行Java工程" class="headerlink" title="运行Java工程"></a>运行Java工程</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog10/Blog10_2.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>这个例子相信不会很难懂，主要想描述的是，一个罪犯(被观察者)可以被多个警察(观察者)监视，而每当一个警察(观察者)监视罪犯(被观察者)的时候，需要去将这个警察(观察者)添加到团队(集合)中，当某个警察(观察者)牺牲了，就需要将他(从集合中)移除，而当罪犯(被观察者)状态发生改变时，团队(集合)中所有警察(观察者)都能得到通知。<br>所以总结起来就是：观察者将自己注册到被观察者的容器中时，被观察者不应该过问观察者的具体类型，而是应该使用观察者的接口。这样的优点是：假定程序中还有别的观察者，那么只要这个观察者也是相同的接口实现即可。一个被观察者可以对应多个观察者，当被观察者发生变化的时候，他可以将消息一一通知给所有的观察者。基于接口，而不是具体的实现——这一点为程序提供了更大的灵活性。<br>当然这只是一个模拟观察者模式的例子，而Java同样提供了观察者Observer类供我们使用，这里就不多做介绍了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h1&gt;&lt;h2 id=&quot;什么是观察者模式&quot;&gt;&lt;a href=&quot;#什么是观察者模式&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="设计模式" scheme="https://izdo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit框架</title>
    <link href="https://izdo.github.io/2017/05/20/Retrofit%E6%A1%86%E6%9E%B6/"/>
    <id>https://izdo.github.io/2017/05/20/Retrofit框架/</id>
    <published>2017-05-20T07:44:35.923Z</published>
    <updated>2017-05-20T07:44:18.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Retrofit框架"><a href="#Retrofit框架" class="headerlink" title="Retrofit框架"></a>Retrofit框架</h1><h2 id="Retrofit框架介绍"><a href="#Retrofit框架介绍" class="headerlink" title="Retrofit框架介绍"></a>Retrofit框架介绍</h2><blockquote>
<p>Retrofit框架是一个针对Android和Java类型安全的http客户端，它可以将HTTP API转化成Java接口。   </p>
<p>以下摘自[简书]部分内容(<a href="http://www.jianshu.com/p/1ef0ba0bccc6)：" target="_blank" rel="external">http://www.jianshu.com/p/1ef0ba0bccc6)：</a></p>
<ul>
<li>通俗理解Retrofit</li>
<li>我们来通俗的理解Retrofit，它是一个可以用于Android和java的网络库，使用它可以简化我们网络操作的工作，提高效率和正确率。</li>
<li>我们需要牢牢的记住：所有的第三方库能实现的功能，我们使用原生的API只要花时间和精力也能实现，但是可能会出现很多的bug而且会花费较多的时间和精力，而且性能也不一定很好，第三方的库会帮我们封装底层的一些代码，避免我们做重复多余易出错的事情，让我们专注于业务逻辑，所以学习任何一个第三方库都将是简单的，我们不应心生畏惧。</li>
<li>那么，同样的道理，Retrofit是Square公司开源的一个高质量高效率的http库，它将我们自己开发的底层的代码和细节都封装了起来。在没有Retrofit，okHttp等库的时候，我们可能要自己去写put，get,post,delete请求。但有了这些库之后对于这些请求我们就只需要一行代码或者是一个注解。</li>
<li><p>所有的网络通信，其核心任务只有一个就是：Client端与Server端进行数据的交互和操作。所以Retrofit就将底层的代码都封装起来只是暴露出了我们业务中的数据模型和操作方法。<br>这样理解之后，我们学习Retrofit就简单明了很多了。应该从以下这几点开始学习：  </p>
<ul>
<li>如何传入我们业务需求的URL以及变量参数</li>
<li>如何将我们业务中从服务器获取的Jason数据封装为与Retrofit向对应的类或者接口</li>
<li>如何使用Retrofit进行get,post,delete,put等操作。</li>
<li>还有就是如何在我们项目中配置Retrofit</li>
</ul>
</li>
<li><p><a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit官网</a></p>
</li>
<li><a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit github官网</a></li>
</ul>
</blockquote>
<h2 id="Retrofit简单例子"><a href="#Retrofit简单例子" class="headerlink" title="Retrofit简单例子"></a>Retrofit简单例子</h2><h3 id="新建工程RetrofitDemo"><a href="#新建工程RetrofitDemo" class="headerlink" title="新建工程RetrofitDemo"></a>新建工程RetrofitDemo</h3><h4 id="activity-main布局文件"><a href="#activity-main布局文件" class="headerlink" title="activity_main布局文件"></a>activity_main布局文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.izdo.retrofitdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/get"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_alignParentStart</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:onClick</span>=<span class="string">"requestAPI"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"点我"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>布局比较简单，只有一个按钮。<br>要使用Retrofit需要在build.gradle中配置：&gt; * compile ‘com.squareup.retrofit2:retrofit:2.3.0’<br>接下来我们根据官网说明的用法来做一个例子使用Retrofit。</p>
</blockquote>
<h4 id="定义接口Api"><a href="#定义接口Api" class="headerlink" title="定义接口Api"></a>定义接口Api</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.retrofitdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> okhttp3.ResponseBody;</div><div class="line"><span class="keyword">import</span> retrofit2.Call;</div><div class="line"><span class="keyword">import</span> retrofit2.http.GET;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/15.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"myserver"</span>)</div><div class="line">    <span class="function">Call&lt;ResponseBody&gt; <span class="title">getUserInfo</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>我们仿照官方文档说明，定义接口Api，接下来同样仿照官方文档，调用这个接口。</p>
</blockquote>
<h4 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.retrofitdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> okhttp3.ResponseBody;</div><div class="line"><span class="keyword">import</span> retrofit2.Call;</div><div class="line"><span class="keyword">import</span> retrofit2.Callback;</div><div class="line"><span class="keyword">import</span> retrofit2.Response;</div><div class="line"><span class="keyword">import</span> retrofit2.Retrofit;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Api api;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                .baseUrl(<span class="string">"http://192.168.1.53:8080/"</span>)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        api = retrofit.create(Api.class);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestAPI</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">        Call&lt;ResponseBody&gt; call = api.getUserInfo();</div><div class="line"></div><div class="line">        call.enqueue(<span class="keyword">new</span> Callback&lt;ResponseBody&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span> </span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    String result = response.body().string();</div><div class="line"></div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, result, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>首先需要在onCreate()方法中实例化Retrofit，然后调用retrofit的create()方法将其赋给Api接口实例(注：这里并非把Api实例化，而是通过一种动态代理的方式赋给api)，接着在按钮点击事件中处理请求，这部分与okhttp的用法类似。</p>
</blockquote>
<h4 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog9/Blog9_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>可以看到，服务器返回的JSON格式的数据已经通过Toast显示出来。</p>
</blockquote>
<h3 id="将返回的数据转化为JavaBean"><a href="#将返回的数据转化为JavaBean" class="headerlink" title="将返回的数据转化为JavaBean"></a>将返回的数据转化为JavaBean</h3><h4 id="扩展：GsonFormat插件"><a href="#扩展：GsonFormat插件" class="headerlink" title="扩展：GsonFormat插件"></a>扩展：GsonFormat插件</h4><blockquote>
<p>这是AndroidStudio中的一个能够快速将JSON格式的数据转化为JavaBean的插件，具体使用方法可以点击后方链接：<a href="http://blog.csdn.net/dakaring/article/details/46300963" target="_blank" rel="external">GsonFormat插件</a>  </p>
</blockquote>
<h4 id="通过使用GsonFormat实现JavaBean-Info"><a href="#通过使用GsonFormat实现JavaBean-Info" class="headerlink" title="通过使用GsonFormat实现JavaBean Info"></a>通过使用GsonFormat实现JavaBean Info</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.retrofitdemo;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/15.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * id : 1</div><div class="line">     * name : 香菜</div><div class="line">     * img : https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1035293498,3690663067&amp;fm=23&amp;gp=0.jpg</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String img;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getImg</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> img;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImg</span><span class="params">(String img)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.img = img;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="修改Api接口Call泛型类为Info"><a href="#修改Api接口Call泛型类为Info" class="headerlink" title="修改Api接口Call泛型类为Info"></a>修改Api接口Call泛型类为Info</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"myserver"</span>)</div><div class="line"><span class="function">Call&lt;Info&gt; <span class="title">getUserInfo</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h4 id="修改MAinActivity的RequestAPI-方法"><a href="#修改MAinActivity的RequestAPI-方法" class="headerlink" title="修改MAinActivity的RequestAPI()方法"></a>修改MAinActivity的RequestAPI()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestAPI</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">        api.getUserInfo().enqueue(<span class="keyword">new</span> Callback&lt;Info&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;Info&gt; call, Response&lt;Info&gt; response)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"username="</span> + response.body().getName(), Toast.LENGTH_SHORT).show();</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"id="</span> + response.body().getId(), Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;Info&gt; call, Throwable t)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>修改之后部署，这时候点击按钮会发现程序崩溃了。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog9/Blog9_2.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>通过查看官方说明我们发现：</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog9/Blog9_3.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>这段文字的意思大概是：默认情况下，Retrofit只能反序列化Http体到OkHttp的ResponseBody类型，它也只能接收ResponseBody类型，而转换器可以使它支持其他类型。<br>官方文档中也提供了六种类型的转换器供我们使用。<br>所以我们还需要配置一个转换器，这里我们就使用Gson转换器。</p>
</blockquote>
<h4 id="配置转换器"><a href="#配置转换器" class="headerlink" title="配置转换器"></a>配置转换器</h4><blockquote>
<p>在build.gradle中加入<strong>compile ‘com.squareup.retrofit2:converter-gson:2.3.0’</strong>。<br>然后将MainActivity的onCreate()方法中初始化Retrofit的代码<strong>Retrofit retrofit = new Retrofit.Builder().baseUrl(“<a href="http://192.168.1.53:8080/&quot;).build(" target="_blank" rel="external">http://192.168.1.53:8080/&quot;).build(</a>);</strong> 修改为<strong>Retrofit retrofit = new Retrofit.Builder().baseUrl(“<a href="http://192.168.1.53:8080/&quot;).addConverterFactory(GsonConverterFactory.create()).build(" target="_blank" rel="external">http://192.168.1.53:8080/&quot;).addConverterFactory(GsonConverterFactory.create()).build(</a>);</strong><br>再次部署项目。</p>
</blockquote>
<h4 id="效果图：-1"><a href="#效果图：-1" class="headerlink" title="效果图："></a>效果图：</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog9/Blog9_4.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>可以看到，这次成功地取到了name和id。</p>
</blockquote>
<h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><blockquote>
<p>在官方文档中，我们可以看到，官方提供的GET请求的方式不止一种，接下来就来介绍官方文档中提供的各种GET请求。</p>
</blockquote>
<h3 id="普通方式"><a href="#普通方式" class="headerlink" title="普通方式"></a>普通方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"users/list"</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>这种方式是最简单的GET请求的方式，而上文用到的就是这种，这里不详细讲解。</p>
</blockquote>
<h3 id="Query"><a href="#Query" class="headerlink" title="@Query"></a>@Query</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"users/list?sort=desc"</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>这种方式是直接在URL中拼接参数，但是这样的话只能在拼接的时候将参数写死了，那么要如何动态地拼接参数呢？官方提供了@Query用于动态拼接参数，接下来看实际的例子：</p>
</blockquote>
<h4 id="修改Api中的代码"><a href="#修改Api中的代码" class="headerlink" title="修改Api中的代码"></a>修改Api中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"myserver"</span>)</div><div class="line">    <span class="function">Call&lt;Info&gt; <span class="title">getUserInfo</span><span class="params">(@Query(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里通过@Query对id参数进行赋值，只要在调用时传入相应类型的数据即可，接下来修改调用时的代码：</p>
</blockquote>
<h4 id="修改MAinActivity中的代码"><a href="#修改MAinActivity中的代码" class="headerlink" title="修改MAinActivity中的代码"></a>修改MAinActivity中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestAPI</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">       api.getUserInfo(<span class="number">2</span>).enqueue(<span class="keyword">new</span> Callback&lt;Info&gt;() &#123;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;Info&gt; call, Response&lt;Info&gt; response)</span> </span>&#123;</div><div class="line">               <span class="comment">// Toast.makeText(MainActivity.this, "username=" + response.body().getName(), Toast.LENGTH_SHORT).show();</span></div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"id="</span> + response.body().getId(), Toast.LENGTH_SHORT).show();</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;Info&gt; call, Throwable t)</span> </span>&#123;</div><div class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, t.getMessage(), Toast.LENGTH_SHORT).show();</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里传入数字2作为参数，同时在Response()中通过Toast显示出id值。</p>
</blockquote>
<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog9/Blog9_5.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="Path"><a href="#Path" class="headerlink" title="@Path"></a>@Path</h3><h4 id="修改Api中的代码-1"><a href="#修改Api中的代码-1" class="headerlink" title="修改Api中的代码"></a>修改Api中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</div><div class="line"></div><div class="line">   ...</div><div class="line"></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"myserver/&#123;id&#125;"</span>)</div><div class="line">    <span class="function">Call&lt;Info&gt; <span class="title">getUserInfoWithPath</span><span class="params">(@Path(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里主要新增了一个getUserInfoWithPath()方法，在@GET中增加了一个{id}，表明想要传入的参数为id，而方法参数中的@Query也改为了@Path，注意{}中的参数和@Path()中的参数需要一致，否则会出现错误。</p>
</blockquote>
<h4 id="修改MAinActivity中的代码-1"><a href="#修改MAinActivity中的代码-1" class="headerlink" title="修改MAinActivity中的代码"></a>修改MAinActivity中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">api.getUserInfoWithPath(<span class="number">3</span>).enqueue(<span class="keyword">new</span> Callback&lt;Info&gt;() &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在调用时只需将getUserInfo()改为getUserInfoWithPath()即可。<br>效果图与使用@Query时是一致的，这里就不贴效果图了。</p>
</blockquote>
<h3 id="QueryMap"><a href="#QueryMap" class="headerlink" title="@QueryMap"></a>@QueryMap</h3><blockquote>
<p>这种方式的参数形式是一个Map集合，这里同样简单地介绍一下。</p>
</blockquote>
<h4 id="修改Api中的代码-2"><a href="#修改Api中的代码-2" class="headerlink" title="修改Api中的代码"></a>修改Api中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="meta">@GET</span>(<span class="string">"myserver/&#123;id&#125;"</span>)</div><div class="line">    <span class="function">Call&lt;Info&gt; <span class="title">getUserInfoWithMap</span><span class="params">(@QueryMap Map&lt;String,String&gt; params)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="修改MAinActivity中的代码-2"><a href="#修改MAinActivity中的代码-2" class="headerlink" title="修改MAinActivity中的代码"></a>修改MAinActivity中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">   map.put(<span class="string">"id"</span>,<span class="string">"3"</span>);</div><div class="line">   map.put(<span class="string">"name"</span>,<span class="string">"aaa"</span>);</div><div class="line"></div><div class="line">   api.getUserInfoWithMap(map).enqueue(<span class="keyword">new</span> Callback&lt;Info&gt;() &#123;</div><div class="line">    ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>通过上面的介绍，相信这里已经很好理解了，所以不多做解释，效果同样与之前没什么差异。<br>以上就是Retrofit的多种方式的GET请求。</p>
</blockquote>
<h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><blockquote>
<p>POST请求也不难理解，下面直接上代码。</p>
</blockquote>
<h3 id="Body"><a href="#Body" class="headerlink" title="@Body"></a>@Body</h3><h4 id="在Api中新增saveInfo-方法"><a href="#在Api中新增saveInfo-方法" class="headerlink" title="在Api中新增saveInfo()方法"></a>在Api中新增saveInfo()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"myserver"</span>)</div><div class="line">    <span class="function">Call&lt;BaseResult&gt; <span class="title">saveInfo</span><span class="params">(@Body Info info)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里需要一个BaseResult类</p>
<h4 id="新建BaseResult类"><a href="#新建BaseResult类" class="headerlink" title="新建BaseResult类"></a>新建BaseResult类</h4></blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.retrofitdemo;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/18.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseResult</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> succerss;</div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSuccerss</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> succerss;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccerss</span><span class="params">(<span class="keyword">int</span> succerss)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.succerss = succerss;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在Info中新增构造器"><a href="#在Info中新增构造器" class="headerlink" title="在Info中新增构造器"></a>在Info中新增构造器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * id : 1</div><div class="line">     * name : 香菜</div><div class="line">     * img : https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1035293498,3690663067&amp;fm=23&amp;gp=0.jpg</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String img;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">(String id, String name, String img)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.img = img;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">(String id, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="修改MainActivity的requertAPI-方法"><a href="#修改MainActivity的requertAPI-方法" class="headerlink" title="修改MainActivity的requertAPI()方法"></a>修改MainActivity的requertAPI()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestAPI</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">       api.saveInfo(<span class="keyword">new</span> Info(<span class="string">"1"</span>, <span class="string">"admin"</span>)).enqueue(<span class="keyword">new</span> Callback&lt;BaseResult&gt;() &#123;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;BaseResult&gt; call, Response&lt;BaseResult&gt; response)</span> </span>&#123;</div><div class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, response.body().getMessage(), Toast.LENGTH_SHORT).show();</div><div class="line">               <span class="comment">//Toast.makeText(MainActivity.this,  response.body()+"", Toast.LENGTH_SHORT).show();</span></div><div class="line">               <span class="comment">// Toast.makeText(MainActivity.this, "username=" + response.body().getName(), Toast.LENGTH_SHORT).show();</span></div><div class="line">               <span class="comment">// Toast.makeText(MainActivity.this, "id=" + response.body().getId(), Toast.LENGTH_SHORT).show();</span></div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;BaseResult&gt; call, Throwable t)</span> </span>&#123;</div><div class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, t.getMessage(), Toast.LENGTH_SHORT).show();</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>服务器端也进行相应的改动。<br>注意:这里需要解释一下，当请求发送成功时，服务器端会返回一串JSON格式的数据给客户端，JSON格式的内容为一个success(1)和一个message(“保存用户成功”),这里Toast打印出的是message所携带的内容。</p>
</blockquote>
<h4 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog9/Blog9_6.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="Field"><a href="#Field" class="headerlink" title="@Field"></a>@Field</h3><blockquote>
<p>这种方式区别与上种方式在于这种事通过Form表单形式提交的。</p>
</blockquote>
<h4 id="修改MainActivity的requertAPI-方法-1"><a href="#修改MainActivity的requertAPI-方法-1" class="headerlink" title="修改MainActivity的requertAPI()方法"></a>修改MainActivity的requertAPI()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="meta">@FormUrlEncoded</span></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"myserver"</span>)</div><div class="line">    <span class="function">Call&lt;BaseResult&gt; <span class="title">editInfo</span><span class="params">(@Field(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id, @<span class="title">Field</span><span class="params">(<span class="string">"username"</span>)</span>String username)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="修改MainActivity的requertAPI-方法-2"><a href="#修改MainActivity的requertAPI-方法-2" class="headerlink" title="修改MainActivity的requertAPI()方法"></a>修改MainActivity的requertAPI()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestAPI</span><span class="params">(View view)</span> </span>&#123;</div><div class="line"></div><div class="line">        api.editInfo(<span class="number">1</span>,<span class="string">"new_Info"</span>).enqueue(<span class="keyword">new</span> Callback&lt;BaseResult&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;BaseResult&gt; call, Response&lt;BaseResult&gt; response)</span> </span>&#123;</div><div class="line">                 Toast.makeText(MainActivity.<span class="keyword">this</span>, response.body().getMessage(), Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;BaseResult&gt; call, Throwable t)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, t.getMessage(), Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>同样对服务器端做出相应的改动。  </p>
</blockquote>
<h4 id="效果图-2"><a href="#效果图-2" class="headerlink" title="效果图"></a>效果图</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog9/Blog9_7.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>当然官方提供的方式还不止这几种，这里就不一一介绍了。  </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Retrofit框架&quot;&gt;&lt;a href=&quot;#Retrofit框架&quot; class=&quot;headerlink&quot; title=&quot;Retrofit框架&quot;&gt;&lt;/a&gt;Retrofit框架&lt;/h1&gt;&lt;h2 id=&quot;Retrofit框架介绍&quot;&gt;&lt;a href=&quot;#Retrofit框
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>OKHttp3框架(下)</title>
    <link href="https://izdo.github.io/2017/05/14/OKHttp3%E6%A1%86%E6%9E%B6(%E4%B8%8B)/"/>
    <id>https://izdo.github.io/2017/05/14/OKHttp3框架(下)/</id>
    <published>2017-05-14T13:36:09.436Z</published>
    <updated>2017-05-13T14:35:35.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OKHttp3框架-下"><a href="#OKHttp3框架-下" class="headerlink" title="OKHttp3框架(下)"></a>OKHttp3框架(下)</h1><h2 id="OKHttp简单封装"><a href="#OKHttp简单封装" class="headerlink" title="OKHttp简单封装"></a>OKHttp简单封装</h2><blockquote>
<p>为什么要封装OKHttp呢？封装的好处是当我们需要网络请求时，只需要去调用一个方法，就能实现一大串代码才能实现的功能，另外对维护也非常简单和方便。接下来进行简单的封装一个工具类。<br>这里进行封装的主要目的是让我们能使用自己封装好的工具类进行网络请求时，能够更快更便捷地对某个地址进行请求，减少代码量。</p>
</blockquote>
<h3 id="封装目标："><a href="#封装目标：" class="headerlink" title="封装目标："></a>封装目标：</h3><blockquote>
<ul>
<li>GET</li>
<li>POST-FORM</li>
<li>POST-JSON</li>
<li>自动转换JSON为JavaBean</li>
</ul>
</blockquote>
<h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><h5 id="新建SimpleHttpClient类"><a href="#新建SimpleHttpClient类" class="headerlink" title="新建SimpleHttpClient类"></a>新建SimpleHttpClient类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo.okhttp;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/12.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleHttpClient</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SimpleHttpClient</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">newBuilder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> SimpleHttpClient <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleHttpClient();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>首先将构造器私有化，然后创建一个静态内部类Builder，在Builder中顶一个build()方法用于return一个SimpleHttpClient(),然后再创建一个newBuilder()方法用于return一个Builder。<br>这样我们就能简单地初始化SimpleHttpClient了，接下来在LoginActivity中测试：</p>
</blockquote>
<h5 id="修改LoginActivity中的代码"><a href="#修改LoginActivity中的代码" class="headerlink" title="修改LoginActivity中的代码"></a>修改LoginActivity中的代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">       setContentView(R.layout.activity_login);</div><div class="line">       ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">       httpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line">       SimpleHttpClient client = <span class="keyword">new</span> SimpleHttpClient.Builder().build();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们主要加入了<strong>SimpleHttpClient client = new SimpleHttpClient.Builder().build();</strong>这样一句话，怎么样，是不是和我们new一个Request的时候有些相似？接下来再做出一些修改：</p>
</blockquote>
<h5 id="修改SimpleHttpClient中的代码"><a href="#修改SimpleHttpClient中的代码" class="headerlink" title="修改SimpleHttpClient中的代码"></a>修改SimpleHttpClient中的代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo.okhttp;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/12.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleHttpClient</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SimpleHttpClient</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">newBuilder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> String url;</div><div class="line">        <span class="keyword">private</span> String method;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</div><div class="line">            method = <span class="string">"GET"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> SimpleHttpClient <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleHttpClient();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">url</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.url = url;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">            method = <span class="string">"GET"</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Form 表单</div><div class="line">         *</div><div class="line">         * <span class="doctag">@return</span></div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">post</span><span class="params">()</span> </span>&#123;</div><div class="line">            method = <span class="string">"POST"</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * JSON 参数</div><div class="line">         *</div><div class="line">         * <span class="doctag">@return</span></div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">josn</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们在Builder类中新增了几个参数和方法，并将newBuilder()方法修改为static，相信很容易看懂。<br>接着我们再在LoginActivity中调用：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_login);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        httpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line">        SimpleHttpClient.newBuilder().url(<span class="string">"http://www.baidu.com"</span>).get().build();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>可以看到，现在发起GET方式的网络请求就只需要这样一句话<strong>SimpleHttpClient.newBuilder().url(“<a href="http://www.baidu.com&quot;).get().build(" target="_blank" rel="external">http://www.baidu.com&quot;).get().build(</a>);</strong>，当然这只是模拟，具体功能还没有实现。<br>在使用OKHttp的时候，我们需要调用enqueue()方法，并传入一个Callback参数，这里我们也模仿它写出这样一个方法。</p>
</blockquote>
<h5 id="在SimpleHttpClient加入enqueue-方法"><a href="#在SimpleHttpClient加入enqueue-方法" class="headerlink" title="在SimpleHttpClient加入enqueue()方法"></a>在SimpleHttpClient加入enqueue()方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(BaseCallback callback)</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们需要一个callback参数，所以我们自己定义一个参数。</p>
</blockquote>
<h5 id="新建BaseCallback接口类"><a href="#新建BaseCallback接口类" class="headerlink" title="新建BaseCallback接口类"></a>新建BaseCallback接口类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo.okhttp;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.telecom.Call;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/13.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseCallback</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(T T)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(<span class="keyword">int</span> code)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="新建User类作为BaseCallback的泛型类"><a href="#新建User类作为BaseCallback的泛型类" class="headerlink" title="新建User类作为BaseCallback的泛型类"></a>新建User类作为BaseCallback的泛型类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo.model;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/13.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> String head_url;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHead_url</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> head_url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHead_url</span><span class="params">(String head_url)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.head_url = head_url;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="修改LoginActivity-onCreate-方法中调用的代码"><a href="#修改LoginActivity-onCreate-方法中调用的代码" class="headerlink" title="修改LoginActivity onCreate()方法中调用的代码"></a>修改LoginActivity onCreate()方法中调用的代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">SimpleHttpClient.newBuilder().url(<span class="string">"http://www.baidu.com"</span>).get().build().enqueue(<span class="keyword">new</span> BaseCallback&lt;User&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(User T)</span> </span>&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(android.telecom.Call call, IOException e)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>这样发起GET网络请求的封装逻辑基本上已经完成了。</p>
</blockquote>
<h4 id="POST-FORM"><a href="#POST-FORM" class="headerlink" title="POST FORM"></a>POST FORM</h4><blockquote>
<p>POST请求和GET请求最大的区别在与POST请求需要传参：</p>
</blockquote>
<h5 id="新建RequestParam类"><a href="#新建RequestParam类" class="headerlink" title="新建RequestParam类"></a>新建RequestParam类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo.okhttp;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/13.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestParam</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String key;</div><div class="line">    <span class="keyword">private</span> Object obj;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestParam</span><span class="params">(String key, Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">        <span class="keyword">this</span>.obj = obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObj</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.obj = obj;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="修改SimpleHttpClient中的代码-1"><a href="#修改SimpleHttpClient中的代码-1" class="headerlink" title="修改SimpleHttpClient中的代码"></a>修改SimpleHttpClient中的代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo.okhttp;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/12.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleHttpClient</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SimpleHttpClient</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(BaseCallback callback)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">newBuilder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> String url;</div><div class="line">        <span class="keyword">private</span> String method;</div><div class="line"></div><div class="line">        <span class="comment">// 参数集合</span></div><div class="line">        <span class="keyword">private</span> List&lt;RequestParam&gt; mParams;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</div><div class="line">            method = <span class="string">"GET"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> SimpleHttpClient <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleHttpClient();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">url</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.url = url;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">            method = <span class="string">"GET"</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Form 表单</div><div class="line">         *</div><div class="line">         * <span class="doctag">@return</span></div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">post</span><span class="params">()</span> </span>&#123;</div><div class="line">            method = <span class="string">"POST"</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * JSON 参数</div><div class="line">         *</div><div class="line">         * <span class="doctag">@return</span></div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">josn</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 添加参数</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">addParam</span><span class="params">(String key, Object value)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (mParams == <span class="keyword">null</span>) &#123;</div><div class="line">                mParams = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mParams.add(<span class="keyword">new</span> RequestParam(key, value));</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="新建BaseResult类接收返回数据"><a href="#新建BaseResult类接收返回数据" class="headerlink" title="新建BaseResult类接收返回数据"></a>新建BaseResult类接收返回数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo.model;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/13.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseResult</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> success;</div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> success;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccess</span><span class="params">(<span class="keyword">int</span> success)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.success = success;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="修改LoginActivity-onCreate-方法中调用的代码-1"><a href="#修改LoginActivity-onCreate-方法中调用的代码-1" class="headerlink" title="修改LoginActivity onCreate()方法中调用的代码"></a>修改LoginActivity onCreate()方法中调用的代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">       setContentView(R.layout.activity_login);</div><div class="line">       ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">       httpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line">       <span class="comment">//        SimpleHttpClient.newBuilder().url("http://www.baidu.com").get().build().enqueue(new BaseCallback&lt;User&gt;() &#123;</span></div><div class="line">       <span class="comment">//            @Override</span></div><div class="line">       <span class="comment">//            public void onSuccess(User T) &#123;</span></div><div class="line">       <span class="comment">//</span></div><div class="line">       <span class="comment">//            &#125;</span></div><div class="line">       <span class="comment">//</span></div><div class="line">       <span class="comment">//            @Override</span></div><div class="line">       <span class="comment">//            public void onError(int code) &#123;</span></div><div class="line">       <span class="comment">//</span></div><div class="line">       <span class="comment">//            &#125;</span></div><div class="line">       <span class="comment">//</span></div><div class="line">       <span class="comment">//            @Override</span></div><div class="line">       <span class="comment">//            public void onFailure(android.telecom.Call call, IOException e) &#123;</span></div><div class="line">       <span class="comment">//</span></div><div class="line">       <span class="comment">//            &#125;</span></div><div class="line">       <span class="comment">//        &#125;);</span></div><div class="line"></div><div class="line">       String url = Config.API.BASE_URL;</div><div class="line"></div><div class="line">        SimpleHttpClient.newBuilder().url(url).post()</div><div class="line">               .addParam(<span class="string">"username"</span>, <span class="string">"admin"</span>)</div><div class="line">               .addParam(<span class="string">"password"</span>, <span class="string">"123456"</span>).build()</div><div class="line">               .enqueue(<span class="keyword">new</span> BaseCallback&lt;BaseResult&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(BaseResult baseResult)</span> </span>&#123;</div><div class="line">               <span class="keyword">if</span> (baseResult.getSuccess() == <span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(android.telecom.Call call, IOException e)</span> </span>&#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>调用也和官方定义的工具类相似，这样POST的FORM表单形式网络请求就定义好了。</p>
</blockquote>
<h4 id="POST-JSON"><a href="#POST-JSON" class="headerlink" title="POST JSON"></a>POST JSON</h4><blockquote>
<p>在前面我们已经写过了POST的FORM表单形式的网络请求，那么JSON形式的请求也就不难了。<br>只需要在SimpleHttpClient的Builder类中加入一个标识即可：<strong>private boolean isJsonParam;</strong>，并在json()方法中加入<strong>isJsonParam = true;</strong>，最后在LoginActivity中将post()改为json()即可。</p>
<ul>
<li>这样一来，我们封装的大体框架就已经写好了，接下来我们就要开始实现具体的请求逻辑了。</li>
</ul>
</blockquote>
<h4 id="新建OKHttpManager类"><a href="#新建OKHttpManager类" class="headerlink" title="新建OKHttpManager类"></a>新建OKHttpManager类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo.okhttp;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.gson.Gson;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="keyword">import</span> okhttp3.Call;</div><div class="line"><span class="keyword">import</span> okhttp3.Callback;</div><div class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</div><div class="line"><span class="keyword">import</span> okhttp3.Response;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/13.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OKHttpManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OKHttpManager mInstance;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OkHttpClient mOkHttpClient;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mHandler;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Gson mGson;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">OKHttpManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        initOKHttp();</div><div class="line"></div><div class="line">        mHandler = <span class="keyword">new</span> Handler();</div><div class="line">        mGson = <span class="keyword">new</span> Gson();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> OKHttpManager <span class="title">getmInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>)</div><div class="line">            mInstance = <span class="keyword">new</span> OKHttpManager();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 初始化OKHttp</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initOKHttp</span><span class="params">()</span> </span>&#123;</div><div class="line">        mOkHttpClient = <span class="keyword">new</span> OkHttpClient().newBuilder()</div><div class="line">                .readTimeout(<span class="number">30000</span>, TimeUnit.SECONDS)</div><div class="line">                .connectTimeout(<span class="number">30000</span>, TimeUnit.SECONDS).build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">(SimpleHttpClient client, <span class="keyword">final</span> BaseCallback callback)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (callback == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"callback is null"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mOkHttpClient.newCall(client.buildRequest()).enqueue((<span class="keyword">new</span> Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                sendOnFailureMessage(callback, call, e);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">if</span> (response.isSuccessful()) &#123;</div><div class="line">                    String result = response.body().string();</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (callback.mType == <span class="keyword">null</span> || callback.mType == String.class) &#123;</div><div class="line">                        sendonSuccessMessage(callback, result);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        sendonSuccessMessage(callback, mGson.fromJson(result, callback.mType));</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (response.body() != <span class="keyword">null</span>) &#123;</div><div class="line">                        response.body().close();</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    sendOnErrorMessage(callback, response.code());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendOnFailureMessage</span><span class="params">(<span class="keyword">final</span> BaseCallback callback, <span class="keyword">final</span> Call call, <span class="keyword">final</span> IOException e)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                callback.onFailure(call, e);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendOnErrorMessage</span><span class="params">(<span class="keyword">final</span> BaseCallback callback, <span class="keyword">final</span> <span class="keyword">int</span> code)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                callback.onError(code);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendonSuccessMessage</span><span class="params">(<span class="keyword">final</span> BaseCallback callback, <span class="keyword">final</span> Object object)</span> </span>&#123;</div><div class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                callback.onSuccess(object);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="修改BaseCallback接口为抽象类"><a href="#修改BaseCallback接口为抽象类" class="headerlink" title="修改BaseCallback接口为抽象类"></a>修改BaseCallback接口为抽象类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo.okhttp;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.gson.internal.$Gson$Types;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Type;</div><div class="line"></div><div class="line"><span class="keyword">import</span> okhttp3.Call;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/13.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseCallback</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Type mType;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> Type <span class="title">getSuperclassTypeParamter</span><span class="params">(Class&lt;?&gt; subclass)</span> </span>&#123;</div><div class="line">        Type superclass = subclass.getGenericSuperclass();</div><div class="line">        <span class="keyword">if</span> (superclass <span class="keyword">instanceof</span> Class) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        ParameterizedType parameterized = (ParameterizedType) superclass;</div><div class="line">        <span class="keyword">return</span> $Gson$Types.canonicalize(parameterized.getActualTypeArguments()[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseCallback</span><span class="params">()</span> </span>&#123;</div><div class="line">        mType = getSuperclassTypeParamter(<span class="keyword">this</span>.getClass());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(T T)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="修改SimpleHttpClient中的代码-2"><a href="#修改SimpleHttpClient中的代码-2" class="headerlink" title="修改SimpleHttpClient中的代码"></a>修改SimpleHttpClient中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo.okhttp;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.net.Uri;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.json.JSONException;</div><div class="line"><span class="keyword">import</span> org.json.JSONObject;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> okhttp3.FormBody;</div><div class="line"><span class="keyword">import</span> okhttp3.MediaType;</div><div class="line"><span class="keyword">import</span> okhttp3.Request;</div><div class="line"><span class="keyword">import</span> okhttp3.RequestBody;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/12.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleHttpClient</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Builder mBuilder;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SimpleHttpClient</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">        mBuilder = builder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Request <span class="title">buildRequest</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        Request request = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        Request.Builder builder = <span class="keyword">new</span> Request.Builder();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mBuilder.method == <span class="string">"GET"</span>) &#123;</div><div class="line">            builder.url(buildGetRequestParam());</div><div class="line">            builder.get();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mBuilder.method == <span class="string">"POST"</span>) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                builder.post(buildRequestBody());</div><div class="line">            &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            builder.url(mBuilder.url);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> builder.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">buildGetRequestParam</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mBuilder.mParams.size() &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.mBuilder.url;</div><div class="line"></div><div class="line">        Uri.Builder builder = Uri.parse(mBuilder.url).buildUpon();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (RequestParam p : mBuilder.mParams) &#123;</div><div class="line">            builder.appendQueryParameter(p.getKey(), p.getObj() == <span class="keyword">null</span> ? <span class="string">""</span> : p.getObj().toString());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String url = builder.build().toString();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> RequestBody <span class="title">buildRequestBody</span><span class="params">()</span> <span class="keyword">throws</span> JSONException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mBuilder.isJsonParam) &#123;</div><div class="line">            JSONObject jsonObj = <span class="keyword">new</span> JSONObject();</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (RequestParam p : mBuilder.mParams) &#123;</div><div class="line">                jsonObj.put(p.getKey(), p.getObj());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            String json = jsonObj.toString();</div><div class="line"></div><div class="line">            Log.d(<span class="string">"SimpleHttpClient"</span>, <span class="string">"request json ="</span> + json);</div><div class="line">            <span class="keyword">return</span> RequestBody.create(MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>), json);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        FormBody.Builder builder = <span class="keyword">new</span> FormBody.Builder();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (RequestParam p : mBuilder.mParams) &#123;</div><div class="line">            builder.add(p.getKey(), p.getObj() == <span class="keyword">null</span> ? <span class="string">""</span> : p.getObj().toString());</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> builder.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(BaseCallback callback)</span> </span>&#123;</div><div class="line">        OKHttpManager.getmInstance().request(<span class="keyword">this</span>, callback);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">newBuilder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> String url;</div><div class="line">        <span class="keyword">private</span> String method;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> isJsonParam;</div><div class="line"></div><div class="line">        <span class="comment">// 参数集合</span></div><div class="line">        <span class="keyword">private</span> List&lt;RequestParam&gt; mParams;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</div><div class="line">            method = <span class="string">"GET"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> SimpleHttpClient <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleHttpClient(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">url</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.url = url;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">            method = <span class="string">"GET"</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Form 表单</div><div class="line">         *</div><div class="line">         * <span class="doctag">@return</span></div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">post</span><span class="params">()</span> </span>&#123;</div><div class="line">            method = <span class="string">"POST"</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * JSON 参数</div><div class="line">         *</div><div class="line">         * <span class="doctag">@return</span></div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">json</span><span class="params">()</span> </span>&#123;</div><div class="line">            isJsonParam = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 添加参数</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">addParam</span><span class="params">(String key, Object value)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (mParams == <span class="keyword">null</span>) &#123;</div><div class="line">                mParams = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mParams.add(<span class="keyword">new</span> RequestParam(key, value));</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这样OKHttp的封装就完成了。<br>接下来在LoginActivity中调用这个封装完的工具类</p>
</blockquote>
<h4 id="修改LoginActivity的loginWithJSON-方法"><a href="#修改LoginActivity的loginWithJSON-方法" class="headerlink" title="修改LoginActivity的loginWithJSON()方法"></a>修改LoginActivity的loginWithJSON()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loginWithJSON</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">       String url = Config.API.BASE_URL;</div><div class="line"></div><div class="line">       SimpleHttpClient.newBuilder().addParam(<span class="string">"username"</span>, username)</div><div class="line">               .addParam(<span class="string">"password"</span>, password)</div><div class="line">               .json().url(url)</div><div class="line">               .build().enqueue(<span class="keyword">new</span> BaseCallback&lt;BaseResult&gt;() &#123;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(BaseResult baseResult)</span> </span>&#123;</div><div class="line"></div><div class="line">               Toast.makeText(LoginActivity.<span class="keyword">this</span>, baseResult.getMessage(), Toast.LENGTH_SHORT).show();</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">       <span class="comment">/*JSONObject jsonObject = new JSONObject();</span></div><div class="line"></div><div class="line">       try &#123;</div><div class="line">           jsonObject.put("username", username);</div><div class="line">           jsonObject.put("password", password);</div><div class="line">       &#125; catch (JSONException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       String jsonParams = jsonObject.toString();</div><div class="line"></div><div class="line">       RequestBody body = RequestBody.create(MediaType.parse("application/json;charset=utf-8"), jsonParams);</div><div class="line"></div><div class="line">       Request request = new Request.Builder()</div><div class="line">               .url(url)</div><div class="line">               .post(body)</div><div class="line">               .build();</div><div class="line"></div><div class="line">       httpClient.newCall(request).enqueue(new Callback() &#123;</div><div class="line">           @Override</div><div class="line">           public void onFailure(Call call, IOException e) &#123;</div><div class="line">               Log.d("LoginActivity", "请求服务器出错");</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onResponse(Call call, Response response) throws IOException &#123;</div><div class="line">               if (response.isSuccessful()) &#123;</div><div class="line">                   String json = response.body().string();</div><div class="line"></div><div class="line">                   try &#123;</div><div class="line">                       JSONObject jsonObject = new JSONObject(json);</div><div class="line"></div><div class="line">                       final String message = jsonObject.optString("message");</div><div class="line">                       final int success = jsonObject.optInt("success");</div><div class="line"></div><div class="line">                       runOnUiThread(new Runnable() &#123;</div><div class="line">                           @Override</div><div class="line">                           public void run() &#123;</div><div class="line">                               if (success == 1)</div><div class="line">                                   Toast.makeText(LoginActivity.this, "登录成功", Toast.LENGTH_SHORT).show();</div><div class="line">                               else</div><div class="line">                                   Toast.makeText(LoginActivity.this, message, Toast.LENGTH_SHORT).show();</div><div class="line">                           &#125;</div><div class="line">                       &#125;);</div><div class="line"></div><div class="line">                   &#125; catch (JSONException e) &#123;</div><div class="line">                       e.printStackTrace();</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;);*/</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>修改loginWithForm方法只需将json()改为post()即可。  </p>
</blockquote>
<h4 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog8/Blog8_1.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>可以明显地看出，原先我们需要一大串代码才能实现的功能现在只需要短短的几行就能够完成了，以后每当我们需要发起网络请求时只需要短短一句链式编程，构建出一个SimpleHttpClient就能实现我们需要的网络请求了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OKHttp3框架-下&quot;&gt;&lt;a href=&quot;#OKHttp3框架-下&quot; class=&quot;headerlink&quot; title=&quot;OKHttp3框架(下)&quot;&gt;&lt;/a&gt;OKHttp3框架(下)&lt;/h1&gt;&lt;h2 id=&quot;OKHttp简单封装&quot;&gt;&lt;a href=&quot;#OKHtt
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>OKHttp3框架(中)</title>
    <link href="https://izdo.github.io/2017/05/13/OKHttp3%E6%A1%86%E6%9E%B6(%E4%B8%AD)/"/>
    <id>https://izdo.github.io/2017/05/13/OKHttp3框架(中)/</id>
    <published>2017-05-13T14:47:02.811Z</published>
    <updated>2017-05-13T14:35:26.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OKHttp3框架-中"><a href="#OKHttp3框架-中" class="headerlink" title="OKHttp3框架(中)"></a>OKHttp3框架(中)</h1><h2 id="文件-简单方式"><a href="#文件-简单方式" class="headerlink" title="文件 简单方式"></a>文件 简单方式</h2><h4 id="新建FileDownloadActivity类-同时将默认启动的Activity改为FileDownloadActivity"><a href="#新建FileDownloadActivity类-同时将默认启动的Activity改为FileDownloadActivity" class="headerlink" title="新建FileDownloadActivity类(同时将默认启动的Activity改为FileDownloadActivity)"></a>新建FileDownloadActivity类(同时将默认启动的Activity改为FileDownloadActivity)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.Manifest;</div><div class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.os.Environment;</div><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"><span class="keyword">import</span> android.os.Message;</div><div class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.ActivityCompat;</div><div class="line"><span class="keyword">import</span> android.support.v4.content.ContextCompat;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.ProgressBar;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"></div><div class="line"><span class="keyword">import</span> butterknife.BindView;</div><div class="line"><span class="keyword">import</span> butterknife.ButterKnife;</div><div class="line"><span class="keyword">import</span> butterknife.OnClick;</div><div class="line"><span class="keyword">import</span> okhttp3.Call;</div><div class="line"><span class="keyword">import</span> okhttp3.Callback;</div><div class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</div><div class="line"><span class="keyword">import</span> okhttp3.Request;</div><div class="line"><span class="keyword">import</span> okhttp3.Response;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDownloadActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 文件地址</span></div><div class="line">    <span class="keyword">public</span> String url = <span class="string">"http://download.moji001.com/download/MojiWeather-V6.0304.02-release-c8888.apk"</span>;</div><div class="line">    <span class="comment">// 文件名</span></div><div class="line">    <span class="keyword">public</span> String fileName = <span class="string">"mojiweather.apk"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@BindView</span>(R.id.btn_download)</div><div class="line">    Button mBtnDownload;</div><div class="line">    <span class="meta">@BindView</span>(R.id.progressBar)</div><div class="line">    ProgressBar mProgressBar;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OkHttpClient httpClient;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_file_download);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        initOKhttp();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initOKhttp</span><span class="params">()</span> </span>&#123;</div><div class="line">        httpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_download)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked</span><span class="params">()</span> </span>&#123;</div><div class="line">        downloadAPK();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 文件下载</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">downloadAPK</span><span class="params">()</span> </span>&#123;</div><div class="line">        Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                .url(url)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        httpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"FileDownloadActivity"</span>, <span class="string">"请求文件出错"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                writeFile(response);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (msg.what == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">int</span> progress = msg.arg1;</div><div class="line">                mProgressBar.setProgress(progress);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 文件读取</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(Response response)</span> </span>&#123;</div><div class="line">        InputStream is = <span class="keyword">null</span>;</div><div class="line">        FileOutputStream fos = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 读取返回的数据流</span></div><div class="line">        is = response.body().byteStream();</div><div class="line"></div><div class="line">        <span class="comment">// 获取SD卡路径</span></div><div class="line">        String path = Environment.getExternalStorageDirectory().getAbsolutePath();</div><div class="line"></div><div class="line">        <span class="comment">// 创建新文件</span></div><div class="line">        File file = <span class="keyword">new</span> File(path, fileName);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line"></div><div class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line"></div><div class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line"></div><div class="line">             <span class="comment">// 请求文件的总大小</span></div><div class="line">            <span class="keyword">long</span> totalSize = response.body().contentLength();</div><div class="line"></div><div class="line">            <span class="comment">// 当前已下载的大小</span></div><div class="line">            <span class="keyword">long</span> sum = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 每次以1kb的大小写入文件</span></div><div class="line">            <span class="keyword">while</span> ((len = is.read(bytes)) != -<span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">                fos.write(bytes);</div><div class="line"></div><div class="line">                sum += len;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> progress = (<span class="keyword">int</span>) ((sum * <span class="number">1.0f</span> / totalSize) * <span class="number">100</span>);</div><div class="line"></div><div class="line">                Message msg = mHandler.obtainMessage(<span class="number">1</span>);</div><div class="line">                msg.arg1 = progress;</div><div class="line"></div><div class="line">                mHandler.sendMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">// 关闭流</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (is != <span class="keyword">null</span>)</div><div class="line">                    is.close();</div><div class="line">                <span class="keyword">if</span> (fos != <span class="keyword">null</span>)</div><div class="line">                    fos.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="activity-file-download-xml"><a href="#activity-file-download-xml" class="headerlink" title="activity_file_download.xml"></a>activity_file_download.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_file_download"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.izdo.okhttpdemo.FileDownloadActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_download"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"下载文件"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/progressBar"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"@style/Widget.AppCompat.ProgressBar.Horizontal"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>布局文件为一个按钮和一个进度条，不多做解释。<br>使用ButterKnife初始化控件和初始化httpClient等操作也不多做解释。<br>接下来主要讲一下请求逻辑，首先需要准备一个文件提供下载，这里我使用的是墨迹天气apk的下载地址，在按钮的点击事件中调用downloadAPK()方法。<br>而downloadAPK()操作与OKHttp GET请求的基本操作一致，在请求成功时调用writeFile()方法。</p>
</blockquote>
<h4 id="writeFile"><a href="#writeFile" class="headerlink" title="writeFile()"></a>writeFile()</h4><blockquote>
<p>这个方法主要用于在请求成功后向本地储存写入文件(这里存入SD卡)。<br>首先需要通过请求返回的response读取数据流，然后在获取SD卡路径后将流以每次1kb的大小写入文件filebi并存储在SD卡中，读写操作为Java的IO流操作，不多做解释。<br>接下来是进度条的更新操作:由于进度条的更新涉及到UI操作，所以需要一个Handler来完成。<br>首先在writeFile()方法外定义一个Handler用于接收Message，在handleMessage()方法中，判断当传递过来的Message的what值为1时就将当前进度设置为传递过来的Message中的参数arg1。<br>在writeFile()方法中定义一个请求文件的总大小totalSize和一个当前已下载的大小sum，在每次写入文件时，计算当前已下载的文件大小，并计算当前进度值，然后通过Handler传递Message，将what参数和arg1参数的值都传递给Handler。<br>关于int progress = (int) ((sum <em> 1.0f / totalSize) </em> 100)：由于sum和totalSize是long类型的数据，需要转化为int类型的进度值，所以这里将sum<em>1.0f，然后再将sum和totalSize相除的结果</em>100，就能得到当前的进度值了。  </p>
</blockquote>
<h4 id="获取权限"><a href="#获取权限" class="headerlink" title="获取权限"></a>获取权限</h4><blockquote>
<p>想要访问SD卡和联网等操作，当然少不了权限的获取了，在清单文件中加入以下代码:</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.MOUNT_UNMOUNT_FILESYSTEMS"</span>/&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>虽然我们已经加上了权限，但是这里需要讲一下，在Android6.0或6.0以上的手机对文件读写不仅要在清单文件配置，还需要动态地请求权限。<br>在类中加入以下两个方法：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXTERNAL_STORAGE_REQ_CODE = <span class="number">10</span>;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestPermission</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">// 判断当前Activity是否已经获得了该权限</span></div><div class="line">       <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)</div><div class="line">               != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line"></div><div class="line">           <span class="comment">// 如果App的权限申请曾经被用户拒绝过，就需要在这里跟用户做出解释</span></div><div class="line">           <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</div><div class="line">               Toast.makeText(<span class="keyword">this</span>, <span class="string">"please give me the permission"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="comment">// 进行权限请求</span></div><div class="line">               ActivityCompat.requestPermissions(<span class="keyword">this</span>,</div><div class="line">                       <span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,</div><div class="line">                       EXTERNAL_STORAGE_REQ_CODE);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">       <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">           <span class="keyword">case</span> EXTERNAL_STORAGE_REQ_CODE:</div><div class="line">               <span class="comment">// 如果请求被拒绝，那么通常grantResults数组为空</span></div><div class="line">               <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span></div><div class="line">                       &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                   <span class="comment">// 申请成功，进行相应操作</span></div><div class="line">                   Toast.makeText(FileDownloadActivity.<span class="keyword">this</span>, <span class="string">"已获取权限"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="comment">//申请失败，可以继续向用户解释。</span></div><div class="line">               &#125;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">default</span>:</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>由于这个demo主要是对OKHtpp的使用的介绍，所以对权限请求部分也不多做解释，相关注释已在代码中体现。(在initOKhttp()方法前调用requestPermission()方法)</p>
</blockquote>
<h4 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog7/Blog7_1.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>可以看到，进度条的更新实现了，下载也很快就完成了，而在文件管理器中也可以看到已下载的文件。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog7/Blog7_2.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="文件-拦截器方式"><a href="#文件-拦截器方式" class="headerlink" title="文件 拦截器方式"></a>文件 拦截器方式</h2><blockquote>
<p>简单方式的文件请求严格来说不属于OKHttp的方式，实际上任何一个网络请求都能实现文件下载的操作，接下来就介绍一下OKHttp的拦截器方式请求文件。<br>拦截器(Interceptors)是一种强大的机制，可以监视、重写和重试调用。<br>拦截器分为应用(APPLICATION)拦截器和网络(NETWORK)拦截器，每个拦截器链都有自己的优点。</p>
</blockquote>
<h4 id="新建ProgressResponseBody类继承ResponseBody"><a href="#新建ProgressResponseBody类继承ResponseBody" class="headerlink" title="新建ProgressResponseBody类继承ResponseBody"></a>新建ProgressResponseBody类继承ResponseBody</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo.okhttp;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> okhttp3.MediaType;</div><div class="line"><span class="keyword">import</span> okhttp3.ResponseBody;</div><div class="line"><span class="keyword">import</span> okio.Buffer;</div><div class="line"><span class="keyword">import</span> okio.BufferedSource;</div><div class="line"><span class="keyword">import</span> okio.ForwardingSource;</div><div class="line"><span class="keyword">import</span> okio.Okio;</div><div class="line"><span class="keyword">import</span> okio.Source;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/12.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgressResponseBody</span> <span class="keyword">extends</span> <span class="title">ResponseBody</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ResponseBody mResponseBody;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> BufferedSource mBufferedSource;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProgressResponseBody</span><span class="params">(ResponseBody responseBody)</span> </span>&#123;</div><div class="line">        mResponseBody = responseBody;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mResponseBody.contentType();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mResponseBody.contentLength();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BufferedSource <span class="title">source</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Okio.buffer(getSource(mResponseBody.source()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Source <span class="title">getSource</span><span class="params">(Source source)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForwardingSource(source()) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">(Buffer sink, <span class="keyword">long</span> byteCount)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.read(sink, byteCount);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>由于我们需要实现进度的更新，所以接下来需要作出一些修改：</p>
</blockquote>
<h4 id="新建ProgressListener接口类作为监听器"><a href="#新建ProgressListener接口类作为监听器" class="headerlink" title="新建ProgressListener接口类作为监听器"></a>新建ProgressListener接口类作为监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo.okhttp;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/12.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProgressListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">int</span> progress)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDone</span><span class="params">(<span class="keyword">long</span> totalSize)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="修改ProgressResponseBody类"><a href="#修改ProgressResponseBody类" class="headerlink" title="修改ProgressResponseBody类"></a>修改ProgressResponseBody类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo.okhttp;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> okhttp3.MediaType;</div><div class="line"><span class="keyword">import</span> okhttp3.ResponseBody;</div><div class="line"><span class="keyword">import</span> okio.Buffer;</div><div class="line"><span class="keyword">import</span> okio.BufferedSource;</div><div class="line"><span class="keyword">import</span> okio.ForwardingSource;</div><div class="line"><span class="keyword">import</span> okio.Okio;</div><div class="line"><span class="keyword">import</span> okio.Source;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/12.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgressResponseBody</span> <span class="keyword">extends</span> <span class="title">ResponseBody</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ResponseBody mResponseBody;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> BufferedSource mBufferedSource;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ProgressListener mProgressListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProgressResponseBody</span><span class="params">(ResponseBody responseBody, ProgressListener listener)</span> </span>&#123;</div><div class="line">        mResponseBody = responseBody;</div><div class="line">        mProgressListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mResponseBody.contentType();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mResponseBody.contentLength();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BufferedSource <span class="title">source</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 当BufferedSource为空时才将Source赋给mBufferedSource</span></div><div class="line">        <span class="keyword">if</span> (mBufferedSource == <span class="keyword">null</span>)</div><div class="line">            mBufferedSource = Okio.buffer(getSource((mResponseBody.source())));</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mBufferedSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Source <span class="title">getSource</span><span class="params">(Source source)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForwardingSource(source()) &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 文件总大小</span></div><div class="line">            <span class="keyword">long</span> totalSize = <span class="number">0l</span>;</div><div class="line">            <span class="comment">// 当前已下载大小</span></div><div class="line">            <span class="keyword">long</span> sum = <span class="number">0l</span>;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">(Buffer sink, <span class="keyword">long</span> byteCount)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (totalSize == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">// 当totalSize为空时，将总大小设置为文件总大小</span></div><div class="line">                    totalSize = contentLength();</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">long</span> len = <span class="keyword">super</span>.read(sink, byteCount);</div><div class="line"></div><div class="line">                <span class="comment">// 判断是否已读到结尾，如果不是，累加到sum中</span></div><div class="line">                sum += (len == -<span class="number">1</span> ? <span class="number">0</span> : len);</div><div class="line">                <span class="comment">// 计算当前进度</span></div><div class="line">                <span class="keyword">int</span> progress = (<span class="keyword">int</span>) ((sum * <span class="number">1.0f</span> / totalSize) * <span class="number">100</span>);</div><div class="line"></div><div class="line">                <span class="comment">// 如果读取到结尾，则完成下载，否则继续更新进度</span></div><div class="line">                <span class="keyword">if</span> (len == -<span class="number">1</span>)</div><div class="line">                    mProgressListener.onDone(totalSize);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    mProgressListener.onProgress(progress);</div><div class="line"></div><div class="line">                <span class="keyword">return</span> len;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里只是添加了自定义的监听器和进行更新等简单操作，不多阐述。<br>接下来在FileDownloadActivity类中调用拦截器。</p>
</blockquote>
<h4 id="修改FileDownloadActivity中的代码："><a href="#修改FileDownloadActivity中的代码：" class="headerlink" title="修改FileDownloadActivity中的代码："></a>修改FileDownloadActivity中的代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.Manifest;</div><div class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.os.Environment;</div><div class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</div><div class="line"><span class="keyword">import</span> android.support.v4.app.ActivityCompat;</div><div class="line"><span class="keyword">import</span> android.support.v4.content.ContextCompat;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.ProgressBar;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.izdo.okhttpdemo.okhttp.ProgressListener;</div><div class="line"><span class="keyword">import</span> com.izdo.okhttpdemo.okhttp.ProgressResponseBody;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"></div><div class="line"><span class="keyword">import</span> butterknife.BindView;</div><div class="line"><span class="keyword">import</span> butterknife.ButterKnife;</div><div class="line"><span class="keyword">import</span> butterknife.OnClick;</div><div class="line"><span class="keyword">import</span> okhttp3.Call;</div><div class="line"><span class="keyword">import</span> okhttp3.Callback;</div><div class="line"><span class="keyword">import</span> okhttp3.Interceptor;</div><div class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</div><div class="line"><span class="keyword">import</span> okhttp3.Request;</div><div class="line"><span class="keyword">import</span> okhttp3.Response;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDownloadActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 文件地址</span></div><div class="line">    <span class="keyword">public</span> String url = <span class="string">"http://download.moji001.com/download/MojiWeather-V6.0304.02-release-c8888.apk"</span>;</div><div class="line">    <span class="comment">// 文件名</span></div><div class="line">    <span class="keyword">public</span> String fileName = <span class="string">"mojiweather.apk"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@BindView</span>(R.id.btn_download)</div><div class="line">    Button mBtnDownload;</div><div class="line">    <span class="meta">@BindView</span>(R.id.progressBar)</div><div class="line">    ProgressBar mProgressBar;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OkHttpClient httpClient;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_file_download);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        requestPermission();</div><div class="line">        initOKhttp();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initOKhttp</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//        httpClient = new OkHttpClient();</span></div><div class="line"></div><div class="line">        <span class="comment">// 创建拦截器</span></div><div class="line">        httpClient = <span class="keyword">new</span> OkHttpClient.Builder().addNetworkInterceptor(<span class="keyword">new</span> Interceptor() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="comment">// 通过chain.proceed()方法获取Response</span></div><div class="line">                Response response = chain.proceed(chain.request());</div><div class="line"></div><div class="line">                <span class="keyword">return</span> response.newBuilder().body(<span class="keyword">new</span> ProgressResponseBody(response.body(), <span class="keyword">new</span> Prg())).build();</div><div class="line">            &#125;</div><div class="line">        &#125;).build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Prg</span> <span class="keyword">implements</span> <span class="title">ProgressListener</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> progress)</span> </span>&#123;</div><div class="line">            <span class="comment">//在UI线程更新UI</span></div><div class="line">            runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mProgressBar.setProgress(progress);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDone</span><span class="params">(<span class="keyword">long</span> totalSize)</span> </span>&#123;</div><div class="line">            runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    Toast.makeText(FileDownloadActivity.<span class="keyword">this</span>, <span class="string">"下载完成"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXTERNAL_STORAGE_REQ_CODE = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestPermission</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 判断当前Activity是否已经获得了该权限</span></div><div class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)</div><div class="line">                != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 如果App的权限申请曾经被用户拒绝过，就需要在这里跟用户做出解释</span></div><div class="line">            <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</div><div class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"please give me the permission"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 进行权限请求</span></div><div class="line">                ActivityCompat.requestPermissions(<span class="keyword">this</span>,</div><div class="line">                        <span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,</div><div class="line">                        EXTERNAL_STORAGE_REQ_CODE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">            <span class="keyword">case</span> EXTERNAL_STORAGE_REQ_CODE:</div><div class="line">                <span class="comment">// 如果请求被拒绝，那么通常grantResults数组为空</span></div><div class="line">                <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span></div><div class="line">                        &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                    <span class="comment">// 申请成功，进行相应操作</span></div><div class="line">                    Toast.makeText(FileDownloadActivity.<span class="keyword">this</span>, <span class="string">"已获取权限"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//申请失败，可以继续向用户解释。</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_download)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked</span><span class="params">()</span> </span>&#123;</div><div class="line">        downloadAPK();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 文件下载</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">downloadAPK</span><span class="params">()</span> </span>&#123;</div><div class="line">        Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                .url(url)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        httpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"FileDownloadActivity"</span>, <span class="string">"请求文件出错"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                writeFile(response);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//    Handler mHandler = new Handler() &#123;</span></div><div class="line">    <span class="comment">//        @Override</span></div><div class="line">    <span class="comment">//        public void handleMessage(Message msg) &#123;</span></div><div class="line">    <span class="comment">//            if (msg.what == 1) &#123;</span></div><div class="line">    <span class="comment">//                int progress = msg.arg1;</span></div><div class="line">    <span class="comment">//                mProgressBar.setProgress(progress);</span></div><div class="line">    <span class="comment">//            &#125;</span></div><div class="line">    <span class="comment">//        &#125;</span></div><div class="line">    <span class="comment">//    &#125;;</span></div><div class="line"></div><div class="line">    <span class="comment">// 文件读取</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(Response response)</span> </span>&#123;</div><div class="line">        InputStream is = <span class="keyword">null</span>;</div><div class="line">        FileOutputStream fos = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 读取返回的数据流</span></div><div class="line">        is = response.body().byteStream();</div><div class="line"></div><div class="line">        <span class="comment">// 获取SD卡路径</span></div><div class="line">        String path = Environment.getExternalStorageDirectory().getAbsolutePath();</div><div class="line"></div><div class="line">        <span class="comment">// 创建新文件</span></div><div class="line">        File file = <span class="keyword">new</span> File(path, fileName);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line"></div><div class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line"></div><div class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="comment">//            // 请求文件的总大小</span></div><div class="line">            <span class="comment">//            long totalSize = response.body().contentLength();</span></div><div class="line">            <span class="comment">//</span></div><div class="line">            <span class="comment">//            // 当前已下载的大小</span></div><div class="line">            <span class="comment">//            long sum = 0;</span></div><div class="line"></div><div class="line">            <span class="comment">// 每次以1kb的大小写入文件</span></div><div class="line">            <span class="keyword">while</span> ((len = is.read(bytes)) != -<span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">                fos.write(bytes);</div><div class="line"></div><div class="line">                <span class="comment">//                sum += len;</span></div><div class="line">                <span class="comment">//</span></div><div class="line">                <span class="comment">//                int progress = (int) ((sum * 1.0f / totalSize) * 100);</span></div><div class="line">                <span class="comment">//</span></div><div class="line">                <span class="comment">//                Message msg = mHandler.obtainMessage(1);</span></div><div class="line">                <span class="comment">//                msg.arg1 = progress;</span></div><div class="line">                <span class="comment">//</span></div><div class="line">                <span class="comment">//                mHandler.sendMessage(msg);</span></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">// 关闭流</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (is != <span class="keyword">null</span>)</div><div class="line">                    is.close();</div><div class="line">                <span class="keyword">if</span> (fos != <span class="keyword">null</span>)</div><div class="line">                    fos.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里的主要修改部分集中在initOKhttp()的拦截器创建中，逻辑比较简单，接下来还是部署到模拟器上查看是否能够下载文件。</p>
</blockquote>
<h4 id="效果图：-1"><a href="#效果图：-1" class="headerlink" title="效果图："></a>效果图：</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog7/Blog7_3.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="完善逻辑"><a href="#完善逻辑" class="headerlink" title="完善逻辑"></a>完善逻辑</h2><blockquote>
<p>严格上来讲，我们是不建议每次需要网络请求时都去初始化一个OKHttp的，而是只初始化一次。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OKHttp3框架-中&quot;&gt;&lt;a href=&quot;#OKHttp3框架-中&quot; class=&quot;headerlink&quot; title=&quot;OKHttp3框架(中)&quot;&gt;&lt;/a&gt;OKHttp3框架(中)&lt;/h1&gt;&lt;h2 id=&quot;文件-简单方式&quot;&gt;&lt;a href=&quot;#文件-简单方式&quot;
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>OKHttp3框架(上)</title>
    <link href="https://izdo.github.io/2017/05/10/OKHttp3%E6%A1%86%E6%9E%B6(%E4%B8%8A)/"/>
    <id>https://izdo.github.io/2017/05/10/OKHttp3框架(上)/</id>
    <published>2017-05-10T07:48:15.270Z</published>
    <updated>2017-05-10T13:23:38.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OKHttp3框架-上"><a href="#OKHttp3框架-上" class="headerlink" title="OKHttp3框架(上)"></a>OKHttp3框架(上)</h1><h2 id="OKHttp3的基本用法"><a href="#OKHttp3的基本用法" class="headerlink" title="OKHttp3的基本用法"></a>OKHttp3的基本用法</h2><h3 id="导入OKHttp3依赖包"><a href="#导入OKHttp3依赖包" class="headerlink" title="导入OKHttp3依赖包"></a>导入OKHttp3依赖包</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog6/Blog6_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog6/Blog6_2.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>成功添加依赖包后在External Libraries中会出现okhttp、okio两个包</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog6/Blog6_3.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>okhttp需要依赖okio包，所有的http请求都是基于流，okio是对流再次封装的工具类。</p>
</blockquote>
<h3 id="OKHttp3使用实例"><a href="#OKHttp3使用实例" class="headerlink" title="OKHttp3使用实例"></a>OKHttp3使用实例</h3><h4 id="创建新工程OKHttpDemo"><a href="#创建新工程OKHttpDemo" class="headerlink" title="创建新工程OKHttpDemo"></a>创建新工程OKHttpDemo</h4><h5 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getRequest</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        </div><div class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line">        String url = <span class="string">"http://guolin.tech/api/china/10"</span>;</div><div class="line"></div><div class="line">        Request request = <span class="keyword">new</span> Request.Builder().url(url).build();</div><div class="line"></div><div class="line">        client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"失败-----"</span> + e.getLocalizedMessage());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                String result = response.body().string();</div><div class="line">                Log.d(<span class="string">"MainActivity"</span>, result);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="main-activity-xml"><a href="#main-activity-xml" class="headerlink" title="main_activity.xml"></a>main_activity.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.izdo.okhttpdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:onClick</span>=<span class="string">"getRequest"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Get Request"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>首先创建一个OKHttpCliend实例和获取数据的链接url。</li>
<li>接着client调用newCall()需要创建一个request实例，然后调用enqueue()方法并传入一个回调Callback即可。</li>
<li>onFailure()和onResponse()分别对应请求失败和成功时的操作，这里我们失败时打印出错误信息，成功时打印出请求结果。</li>
</ul>
<p>由于网络请求涉及到网络操作，所以最后记得加上网络权限</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="结果如下"><a href="#结果如下" class="headerlink" title="结果如下:"></a>结果如下:</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog6/Blog6_4.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>说明我们请求成功。</p>
</blockquote>
<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><blockquote>
<ul>
<li>HTTP(超文本传输协议)是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。</li>
<li>HTPP协议中通信的两方称作Client和Server(或Host)，Client向Server端经过http协议发送一个Request，Server端收到Request后经过一系列的处理返回Client一个Response，图示如下：</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog6/Blog6_5.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog6/Blog6_6.png?raw=true6" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="无状态的协议"><a href="#无状态的协议" class="headerlink" title="无状态的协议"></a>无状态的协议</h3><blockquote>
<ul>
<li>http协议是无状态的： 同一个客户端的这次请求和上次请求是没有对应关系，对http服务器来说,它并不知道这两个请求来自同一个客户端。</li>
<li>解决方法：Cookie机制来维护状态</li>
</ul>
</blockquote>
<h3 id="Http消息结构"><a href="#Http消息结构" class="headerlink" title="Http消息结构"></a>Http消息结构</h3><h4 id="Request-消息结构：三部分"><a href="#Request-消息结构：三部分" class="headerlink" title="Request(消息结构：三部分)"></a>Request(消息结构：三部分)</h4><blockquote>
<ul>
<li>第一部分:Request line(请求行)，第二部分:http header，第三部分:body</li>
<li>请求行：包括http请求的种类，请求资源的路径，http协议版本</li>
<li>http header：http头部信息</li>
<li>body：发送给服务器的query信息<br>  当使用的是”GET”方法的时候，body是为空的(GET只能读取服务器上的信息，post能写入)</li>
</ul>
</blockquote>
<h4 id="Response-消息结构：三部分"><a href="#Response-消息结构：三部分" class="headerlink" title="Response (消息结构：三部分)"></a>Response (消息结构：三部分)</h4><blockquote>
<ul>
<li>第一部分:Request line，第二部分:Request header，第三部分:body</li>
<li>Request line：包括协议版本、状态码、message</li>
<li>http header：request头部信息</li>
<li>body：返回的请求资源主题</li>
</ul>
</blockquote>
<h3 id="HTTP协议请求方法"><a href="#HTTP协议请求方法" class="headerlink" title="HTTP协议请求方法"></a>HTTP协议请求方法</h3><blockquote>
<ul>
<li>GET 请求获取Request-URL所标识的资源</li>
<li>POST 在Request-URL所标识的资源后附加新的数据</li>
<li>HEAD 请求获取由Request-URL所标识的资源的响应消息报头</li>
<li>PUT 请求服务器存储一个资源，并用Request-URL作为其标识</li>
<li>DELETE 请求服务器删除Request-URL所标识的资源</li>
<li>TRACE 请求服务器回送收到的请求信息，主要用于测试或诊断</li>
<li>CONNECT 保留将来使用</li>
<li>OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求</li>
</ul>
<p>常用请求方法:GET和POST</p>
</blockquote>
<h4 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h4><blockquote>
<ul>
<li>GET一般用于获取/查询资源信息，而POST一般用于更新资源信息<br>1 GET提交的数据会放在URL之后，以？分割URL和传输数据，参数之间以&amp;相连，如：EditPosts.aspx?name=test1&amp;id=123456。POST方法是把提交的数据放在HTTP包的Body中。<br>2 GET提交的数据大小有限制，因为<strong>浏览器对URL的长度有限制</strong>，而POST方法提交的数据没有限制。<br>3 GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。<br>4 GET方式提交数据，会带来<strong>安全问题</strong>，比如一个登陆页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。</li>
</ul>
</blockquote>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><blockquote>
<ul>
<li>Response消息中的第一行叫做状态行，由HTTP协议版本号，状态码，状态消息三部分组成。</li>
<li>状态码用来告诉HTTP客户端，HTTP服务器是否产生了预期的Response。</li>
<li>HTTP/1.1中定义了5类状态码。</li>
<li>状态码由三位数字组成，第一个数字定义了相应的类别。<br>1xx：指示信息–表示请求已接受，继续处理<br>2xx：成功–表示请求已被成功接收、理解、接收<br>3xx：重定向–要完成请求必须进行更进一步的操作<br>4xx：客户端错误–请求有语法错误或请求无法实现<br>5xx：服务器端错误–服务器未能实现合法的请求</li>
<li>常用状态码<br>200–OK： 客户端请求成功<br>400–Bad Request： 客户端请求有语法错误，不能被服务器所理解<br>401–Unauthorized： 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>403–Forbidden： 服务器收到请求，但是拒绝提供服务<br>404–Not Found： 请求资源不存在，eg：输入了错误的URL<br>500–Internal Server Error ：服务器发生不可预期的错误<br>503–Server Unavailable： 服务器当前不能处理客户端的请求，一段时间后可能恢复正常</li>
</ul>
</blockquote>
<h2 id="GET请求-获取信息"><a href="#GET请求-获取信息" class="headerlink" title="GET请求 获取信息"></a>GET请求 获取信息</h2><h4 id="新建Java类UserInfoActivity"><a href="#新建Java类UserInfoActivity" class="headerlink" title="新建Java类UserInfoActivity"></a>新建Java类UserInfoActivity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.squareup.picasso.Picasso;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.json.JSONException;</div><div class="line"><span class="keyword">import</span> org.json.JSONObject;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> butterknife.BindView;</div><div class="line"><span class="keyword">import</span> butterknife.ButterKnife;</div><div class="line"><span class="keyword">import</span> butterknife.OnClick;</div><div class="line"><span class="keyword">import</span> okhttp3.Call;</div><div class="line"><span class="keyword">import</span> okhttp3.Callback;</div><div class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</div><div class="line"><span class="keyword">import</span> okhttp3.Request;</div><div class="line"><span class="keyword">import</span> okhttp3.Response;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@BindView</span>(R.id.btn_get)</div><div class="line">    Button mBtnGet;</div><div class="line">    <span class="meta">@BindView</span>(R.id.imgview)</div><div class="line">    ImageView mImgview;</div><div class="line">    <span class="meta">@BindView</span>(R.id.txt_name)</div><div class="line">    TextView mTxtUsername;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_user_info);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_get)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked</span><span class="params">()</span> </span>&#123;</div><div class="line">        getUserInfo();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getUserInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 创建OkHttpClient实例</span></div><div class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line">        <span class="comment">// 请求地址</span></div><div class="line">        String url = <span class="string">"http://192.168.1.53:8080/myserver/"</span>;</div><div class="line"></div><div class="line">        Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                .get()</div><div class="line">                .url(url)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"UserInfoActivity"</span>, <span class="string">"请求失败"</span> + e.getLocalizedMessage());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="comment">//if (response.code() == 200) &#123;</span></div><div class="line">                <span class="comment">// isSuccessful()代替code()</span></div><div class="line">                <span class="keyword">if</span> (response.isSuccessful()) &#123;</div><div class="line">                    String json = response.body().string();</div><div class="line">                    showInfo(json);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">(<span class="keyword">final</span> String json)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 操作UI需在UI线程进行</span></div><div class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    JSONObject jsonObject = <span class="keyword">new</span> JSONObject(json);</div><div class="line"></div><div class="line">                    String id = jsonObject.optString(<span class="string">"id"</span>);</div><div class="line">                    String name = jsonObject.optString(<span class="string">"name"</span>);</div><div class="line">                    String img = jsonObject.optString(<span class="string">"img"</span>);</div><div class="line">                    mTxtUsername.setText(name);</div><div class="line"></div><div class="line">                    <span class="comment">/**</span></div><div class="line">                     * Picasso 第三方开源框架</div><div class="line">                     * load() 加载图片地址</div><div class="line">                     * resize() 设置图片大小</div><div class="line">                     * centerCrop() 设置图片圆角</div><div class="line">                     * into() 显示到控件</div><div class="line">                     */</div><div class="line">                    Picasso.with(UserInfoActivity.<span class="keyword">this</span>).load(img).resize(<span class="number">100</span>, <span class="number">100</span>).centerCrop().into(mImgview);</div><div class="line">                    </div><div class="line">                &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="activity-user-info"><a href="#activity-user-info" class="headerlink" title="activity_user_info"></a>activity_user_info</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_user_info"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.izdo.okhttpdemo.UserInfoActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_get"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"获取信息"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/imgview"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/txt_name"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"OKHttpDemo"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>首先将所有控件初始化，这里需要用到一个<a href="http://blog.csdn.net/itjianghuxiaoxiong/article/details/50177549" target="_blank" rel="external">第三方框架ButterKnife</a>以及<a href="http://blog.csdn.net/miaozhenzhong/article/details/52766094" target="_blank" rel="external">Zelezny插件</a>，绑定并初始化由ButterKnife完成。<br>在按钮的点击事件中调用getUserInfo()方法。<br>请求地址为一个用JSP模拟的本地服务器地址，主要代码如下:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">response.getWriter()</div><div class="line">        .write(<span class="string">"&#123;'id':'1','name':'香菜','img':'https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1035293498,3690663067&amp;fm=23&amp;gp=0.jpg'&#125;"</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>请求由本地服务器模拟出来的JSON数据，用法基本与上文相同。当请求数据成功时调用showInfo()方法。<br>需要注意的是onResponse()方法是在异步线程中进行的而不是在主线程，所以要操作UI必须在UI线程中进行，所以在showInfo()中需要调用runOnUiThread()方法，在UI线程中解析JSON数据。<br>解析img时，由于获取到的是网络图片地址，所以这里需要用Picasso第三方开源框架加载图片，具体细节在代码中已体现。<br>PS：<strong>String id = jsonObject.optString(“id”);中使用optString()而不使用getString()的原因是getString()在当key中的值不存在的时候会出现空指针异常，而optString()则会返回一个空字符串或者返回你指定的默认值。</strong></p>
</blockquote>
<h4 id="修改默认启动的Activity"><a href="#修改默认启动的Activity" class="headerlink" title="修改默认启动的Activity"></a>修改默认启动的Activity</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".UserInfoActivity"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图:"></a>效果图:</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog6/Blog6_7.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="POST请求-Form表单形式"><a href="#POST请求-Form表单形式" class="headerlink" title="POST请求 Form表单形式"></a>POST请求 Form表单形式</h2><h4 id="新建Java类LoginActivity-同时将默认启动的Activity改为LoginActivity"><a href="#新建Java类LoginActivity-同时将默认启动的Activity改为LoginActivity" class="headerlink" title="新建Java类LoginActivity(同时将默认启动的Activity改为LoginActivity)"></a>新建Java类LoginActivity(同时将默认启动的Activity改为LoginActivity)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.json.JSONException;</div><div class="line"><span class="keyword">import</span> org.json.JSONObject;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> butterknife.BindView;</div><div class="line"><span class="keyword">import</span> butterknife.ButterKnife;</div><div class="line"><span class="keyword">import</span> butterknife.OnClick;</div><div class="line"><span class="keyword">import</span> okhttp3.Call;</div><div class="line"><span class="keyword">import</span> okhttp3.Callback;</div><div class="line"><span class="keyword">import</span> okhttp3.FormBody;</div><div class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</div><div class="line"><span class="keyword">import</span> okhttp3.Request;</div><div class="line"><span class="keyword">import</span> okhttp3.RequestBody;</div><div class="line"><span class="keyword">import</span> okhttp3.Response;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@BindView</span>(R.id.etxt_username)</div><div class="line">    EditText mEtxtUsername;</div><div class="line">    <span class="meta">@BindView</span>(R.id.etxt_password)</div><div class="line">    EditText mEtxtPassword;</div><div class="line">    <span class="meta">@BindView</span>(R.id.btn_login)</div><div class="line">    Button mBtnLogin;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OkHttpClient httpClient;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_login);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        httpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_login)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked</span><span class="params">()</span> </span>&#123;</div><div class="line">        String username = mEtxtUsername.getText().toString().trim();</div><div class="line">        String password = mEtxtPassword.getText().toString().trim();</div><div class="line"></div><div class="line">        loginWithForm(username, password);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loginWithForm</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        String url = Config.API.BASE_URL ;</div><div class="line"></div><div class="line">        <span class="comment">// POST方式提交需要一个RequestBody封装参数</span></div><div class="line">        RequestBody body = <span class="keyword">new</span> FormBody.Builder()</div><div class="line">                .add(<span class="string">"username"</span>, username)</div><div class="line">                .add(<span class="string">"password"</span>, password)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                .url(url)</div><div class="line">                .post(body)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        httpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"LoginActivity"</span>, <span class="string">"请求服务器出错"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">if</span> (response.isSuccessful()) &#123;</div><div class="line">                    String json = response.body().string();</div><div class="line"></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        JSONObject jsonObject = <span class="keyword">new</span> JSONObject(json);</div><div class="line"></div><div class="line">                        <span class="keyword">final</span> String message = jsonObject.optString(<span class="string">"message"</span>);</div><div class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> success = jsonObject.optInt(<span class="string">"success"</span>);</div><div class="line"></div><div class="line">                        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                                <span class="keyword">if</span> (success == <span class="number">1</span>)</div><div class="line">                                    Toast.makeText(LoginActivity.<span class="keyword">this</span>, <span class="string">"登录成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    Toast.makeText(LoginActivity.<span class="keyword">this</span>, message, Toast.LENGTH_SHORT).show();</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line"></div><div class="line">                    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="activity-login"><a href="#activity-login" class="headerlink" title="activity_login"></a>activity_login</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_login"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.izdo.okhttpdemo.LoginActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/etxt_username"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:hint</span>=<span class="string">"请输入用户名"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/etxt_password"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:hint</span>=<span class="string">"请输入密码"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_login"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"立即登录"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="本地服务器JSP"><a href="#本地服务器JSP" class="headerlink" title="本地服务器JSP"></a>本地服务器JSP</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;%</div><div class="line">	String path = request.getContextPath();</div><div class="line">	String basePath = request.getScheme() + <span class="string">"://"</span></div><div class="line">			+ request.getServerName() + <span class="string">":"</span> + request.getServerPort()</div><div class="line">			+ path + <span class="string">"/"</span>;</div><div class="line"></div><div class="line">	<span class="comment">/* response.getWriter()</span></div><div class="line">			.write("&#123;'id':'1','name':'香菜','img':'https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1035293498,3690663067&amp;fm=23&amp;gp=0.jpg'&#125;"); */</div><div class="line"></div><div class="line">	String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line">	String password = request.getParameter(<span class="string">"password"</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (username.equals(<span class="string">"admin"</span>) &amp;&amp; password.equals(<span class="string">"123456"</span>))</div><div class="line">		response.getWriter().write(<span class="string">"&#123;'success':'1','message':'登录成功'&#125;"</span>);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		response.getWriter().write(</div><div class="line">				<span class="string">"&#123;'success':'0','message':'用户名或密码错误'&#125;"</span>);</div><div class="line">%&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>首先xml布局为一个基本的登录页面，无需解释。<br>然后用ButterKnife绑定控件，详细操作见上文。<br>在按钮的点击事件中，将用户名和密码框的text传递给loginWithForm()方法，然后在loginWithForm()方法中进行请求。<br>由于本地服务器地址URL是固定的，所以将其封装为一个类Config，方便使用。</p>
</blockquote>
<h4 id="新建Config类"><a href="#新建Config类" class="headerlink" title="新建Config类"></a>新建Config类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.izdo.okhttpdemo;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/5/9.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">API</span></span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"http://192.168.1.53:8080/myserver/"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="loginWithForm-方法"><a href="#loginWithForm-方法" class="headerlink" title="loginWithForm()方法"></a>loginWithForm()方法</h4><blockquote>
<p>方法中大部分逻辑与OKHttp的基本用法大致相同，唯一不同的是，POST方式提交需要一个RequestBody实例来封装参数(实际上GET方式和POST方式需要一个body，只不过当使用的是GET方式时，body是为空的，这个上文有提及)，而由于RequestBody是一个抽象类，无法实例化，所以只能实例化继承了RequestBody的子类。  </p>
</blockquote>
<p><img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog6/Blog6_8.png?raw=true" alt=""></p>
<blockquote>
<p>而通过了解发现，继承了RequestBody的子类有FormBody和MultitarBody，所以这里使用FormBody来实例化RequestBody。<br>实例化RequestBody后在request创建时加上post(body)，表明请求方式为POST。<br>接下来通过输入username和password发送请求，并解析接收到的message和success数据进行解析。</p>
</blockquote>
<h4 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog6/Blog6_9.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="POST请求-JSON参数形式"><a href="#POST请求-JSON参数形式" class="headerlink" title="POST请求 JSON参数形式"></a>POST请求 JSON参数形式</h2><h4 id="修改LoginActivity中的代码"><a href="#修改LoginActivity中的代码" class="headerlink" title="修改LoginActivity中的代码"></a>修改LoginActivity中的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@OnClick</span>(R.id.btn_login)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked</span><span class="params">()</span> </span>&#123;</div><div class="line">        String username = mEtxtUsername.getText().toString().trim();</div><div class="line">        String password = mEtxtPassword.getText().toString().trim();</div><div class="line"></div><div class="line">        <span class="comment">//loginWithForm(username, password);</span></div><div class="line">        loginWithJSON(username, password);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loginWithJSON</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        String url = Config.API.BASE_URL;</div><div class="line"></div><div class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            jsonObject.put(<span class="string">"username"</span>, username);</div><div class="line">            jsonObject.put(<span class="string">"password"</span>, password);</div><div class="line">        &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">         String jsonParams = jsonObject.toString();</div><div class="line"></div><div class="line">        RequestBody body = RequestBody.create(MediaType.parse(<span class="string">"application/json;charset=utf-8"</span>), jsonParams);</div><div class="line"></div><div class="line">        Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                .url(url)</div><div class="line">                .post(body)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        httpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"LoginActivity"</span>, <span class="string">"请求服务器出错"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">if</span> (response.isSuccessful()) &#123;</div><div class="line">                    String json = response.body().string();</div><div class="line"></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        JSONObject jsonObject = <span class="keyword">new</span> JSONObject(json);</div><div class="line"></div><div class="line">                        <span class="keyword">final</span> String message = jsonObject.optString(<span class="string">"message"</span>);</div><div class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> success = jsonObject.optInt(<span class="string">"success"</span>);</div><div class="line"></div><div class="line">                        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                                <span class="keyword">if</span> (success == <span class="number">1</span>)</div><div class="line">                                    Toast.makeText(LoginActivity.<span class="keyword">this</span>, <span class="string">"登录成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    Toast.makeText(LoginActivity.<span class="keyword">this</span>, message, Toast.LENGTH_SHORT).show();</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line"></div><div class="line">                    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>新增了loginWithJSON()方法，逻辑与loginWithForm()大致相同，并在点击事件改为调用loginWithJSON()方法。<br>loginWithJSON()方法不同的是，发送请求时RequestBody需要调用RequestBody.create()封装JSON数据，并将封装好的jsonParams作为参数传入封装在body中。<br>由于效果与Form方式差不多，这里就不放效果图了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OKHttp3框架-上&quot;&gt;&lt;a href=&quot;#OKHttp3框架-上&quot; class=&quot;headerlink&quot; title=&quot;OKHttp3框架(上)&quot;&gt;&lt;/a&gt;OKHttp3框架(上)&lt;/h1&gt;&lt;h2 id=&quot;OKHttp3的基本用法&quot;&gt;&lt;a href=&quot;#OKH
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>围住神经猫游戏(二)</title>
    <link href="https://izdo.github.io/2017/04/16/%E5%9B%B4%E4%BD%8F%E7%A5%9E%E7%BB%8F%E7%8C%AB%E6%B8%B8%E6%88%8F(%E4%BA%8C)/"/>
    <id>https://izdo.github.io/2017/04/16/围住神经猫游戏(二)/</id>
    <published>2017-04-16T06:22:23.456Z</published>
    <updated>2017-04-06T12:43:58.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Android制作围住神经猫游戏-二"><a href="#使用Android制作围住神经猫游戏-二" class="headerlink" title="使用Android制作围住神经猫游戏(二)"></a>使用Android制作围住神经猫游戏(二)</h1><h2 id="获取点击圆点的坐标"><a href="#获取点击圆点的坐标" class="headerlink" title="获取点击圆点的坐标"></a>获取点击圆点的坐标</h2><blockquote>
<ul>
<li>要响应屏幕的点击事件，需要实现OnTouchListener接口并重写其onTouch()方法。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">PlayGround</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">       </div><div class="line">       ...</div><div class="line">       </div><div class="line">        setOnTouchListener(<span class="keyword">this</span>);</div><div class="line">        initGame();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>在PlayGround()中加入setOnTouchListener(this)，然后重写onTouch()方法。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View view, MotionEvent motionEvent)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(motionEvent.getAction()==MotionEvent.ACTION_UP)</div><div class="line">        <span class="comment">//获取当前点击的x,y的坐标值</span></div><div class="line">        Toast.makeText(getContext(), motionEvent.getX()+<span class="string">":"</span>+motionEvent.getY(), Toast.LENGTH_SHORT).show();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>通过if语句判断当前动作是否为ACTOIN_UP，然后通过Toast显示当前点击位置的坐标。</li>
</ul>
</blockquote>
<h3 id="部署到模拟器查看效果"><a href="#部署到模拟器查看效果" class="headerlink" title="部署到模拟器查看效果:"></a>部署到模拟器查看效果:</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog4/Blog4_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="实现点击之后圆点颜色改变效果"><a href="#实现点击之后圆点颜色改变效果" class="headerlink" title="实现点击之后圆点颜色改变效果"></a>实现点击之后圆点颜色改变效果</h2><h3 id="修改onTouch-中的代码"><a href="#修改onTouch-中的代码" class="headerlink" title="修改onTouch()中的代码:"></a>修改onTouch()中的代码:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View view, MotionEvent motionEvent)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (motionEvent.getAction() == MotionEvent.ACTION_UP) &#123;</div><div class="line">        <span class="comment">//获取当前点击的x,y的坐标值</span></div><div class="line">        <span class="comment">//Toast.makeText(getContext(), motionEvent.getX()+":"+motionEvent.getY(), Toast.LENGTH_SHORT).show();</span></div><div class="line">        <span class="keyword">int</span> x, y;</div><div class="line">        <span class="comment">// 获取当前点击的行数</span></div><div class="line">        y = (<span class="keyword">int</span>) (motionEvent.getY() / WIDTH);</div><div class="line">        <span class="keyword">if</span> (y % <span class="number">2</span> == <span class="number">0</span>) &#123;  <span class="comment">// 奇数行</span></div><div class="line">            x = (<span class="keyword">int</span>) (motionEvent.getX() / WIDTH);</div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 偶数行</span></div><div class="line">            x = (<span class="keyword">int</span>) ((motionEvent.getX() - WIDTH / <span class="number">2</span>) / WIDTH);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 判断点击位置是否越界</span></div><div class="line">        <span class="keyword">if</span> (x + <span class="number">1</span> &gt; COL || y + <span class="number">1</span> &gt; ROW)</div><div class="line">            initGame();</div><div class="line">        <span class="keyword">else</span></div><div class="line">            getDot(x, y).setStatus(Dot.STATUS_ON);</div><div class="line">        redraw();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>首先获取当前点击的行数，用当前点击的y坐标除以WIDTH即可获得。然后判断当前所点击位置是处于奇数行还是偶数行，因为由于偶数行有偏移所以这两种情况下的列数计算方式是不同的。计算没有偏移的行的列值与获取行数相同，而计算偏移的列值则需要当前点击位置的x坐标减去半个WIDTH后再除以WIDTH获得。</li>
<li>其次，为了避免我们点击到非圆点所在的位置，也就是游戏界面以外的空白区域造成越界，需要进行判断，如果所点位置越界，可以让其reutrn false，但是为了后边测试方便，这里设置成重新初始化游戏，如果所点位置不越界，就将其状态设置为已点击。</li>
<li>最后调用redraw()方法重绘界面。</li>
</ul>
</blockquote>
<h3 id="部署并观看效果："><a href="#部署并观看效果：" class="headerlink" title="部署并观看效果："></a>部署并观看效果：</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog4/Blog4_2.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>可以看到，效果跟我们所说的那样。</li>
</ul>
</blockquote>
<h2 id="游戏逻辑——功能函数的实现"><a href="#游戏逻辑——功能函数的实现" class="headerlink" title="游戏逻辑——功能函数的实现"></a>游戏逻辑——功能函数的实现</h2><h3 id="修改PlayGround中的代码"><a href="#修改PlayGround中的代码" class="headerlink" title="修改PlayGround中的代码:"></a>修改PlayGround中的代码:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayGround</span> <span class="keyword">extends</span> <span class="title">SurfaceView</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnTouchListener</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">// 判断当前点是否处于边界</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAtEdge</span><span class="params">(Dot d)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (d.getX() * d.getY() == <span class="number">0</span> || d.getX() + <span class="number">1</span> == COL || d.getY() + <span class="number">1</span> == ROW)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取当前点周围六个点</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Dot <span class="title">getNeighbour</span><span class="params">(Dot one, <span class="keyword">int</span> dir)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (dir) &#123;</div><div class="line">            <span class="comment">// 左</span></div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="keyword">return</span> getDot(one.getX() - <span class="number">1</span>, one.getY());</div><div class="line">            <span class="comment">// 左上</span></div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                <span class="keyword">if</span> (one.getY() % <span class="number">2</span> == <span class="number">0</span>) &#123; <span class="comment">// 偶数行</span></div><div class="line">                    <span class="keyword">return</span> getDot(one.getX() - <span class="number">1</span>, one.getY() - <span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 奇数行</span></div><div class="line">                    <span class="keyword">return</span> getDot(one.getX(), one.getY() - <span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 右上</span></div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                <span class="keyword">if</span> (one.getY() % <span class="number">2</span> == <span class="number">0</span>) &#123; <span class="comment">// 偶数行</span></div><div class="line">                    <span class="keyword">return</span> getDot(one.getX(), one.getY() - <span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 奇数行</span></div><div class="line">                    <span class="keyword">return</span> getDot(one.getX() + <span class="number">1</span>, one.getY() - <span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 右</span></div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">                <span class="keyword">return</span> getDot(one.getX() + <span class="number">1</span>, one.getY());</div><div class="line">            <span class="comment">// 右下</span></div><div class="line">            <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">                <span class="keyword">if</span> (one.getY() % <span class="number">2</span> == <span class="number">0</span>) &#123; <span class="comment">// 偶数行</span></div><div class="line">                    <span class="keyword">return</span> getDot(one.getX(), one.getY() + <span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 奇数行</span></div><div class="line">                    <span class="keyword">return</span> getDot(one.getX() + <span class="number">1</span>, one.getY() + <span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 左下</span></div><div class="line">            <span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">                <span class="keyword">if</span> (one.getY() % <span class="number">2</span> == <span class="number">0</span>) &#123; <span class="comment">// 偶数行</span></div><div class="line">                    <span class="keyword">return</span> getDot(one.getX() - <span class="number">1</span>, one.getY() + <span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 奇数行</span></div><div class="line">                    <span class="keyword">return</span> getDot(one.getX(), one.getY() + <span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获得距离</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getDistance</span><span class="params">(Dot one, <span class="keyword">int</span> dir)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> distance = <span class="number">0</span>;</div><div class="line">        Dot ori = one, next;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="comment">// 获取周围的点</span></div><div class="line">            next = getNeighbour(ori, dir);</div><div class="line">            <span class="comment">// 遇到障碍</span></div><div class="line">            <span class="keyword">if</span> (next.getStatus() == Dot.STATUS_ON)</div><div class="line">                <span class="keyword">return</span> distance * -<span class="number">1</span>;</div><div class="line">            <span class="comment">// 无障碍</span></div><div class="line">            <span class="keyword">if</span> (isAtEdge(next)) &#123;</div><div class="line">                distance++;</div><div class="line">                <span class="keyword">return</span> distance;</div><div class="line">            &#125;</div><div class="line">            distance++;</div><div class="line">            ori = next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 移动猫</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MoveTo</span><span class="params">(Dot one)</span> </span>&#123;</div><div class="line">        one.setStatus(Dot.STATUS_IN);</div><div class="line">        getDot(cat.getX(), cat.getY()).setStatus(Dot.STATUS_OFF);</div><div class="line">        cat.setXY(one.getX(), one.getY());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>这里我们主要加入了四个方法: isAtEdge(),getNeighbour(),getDistance(),MoveTo(),接下来我会一一解释这几个方法的作用。<h4 id="isAtEdge"><a href="#isAtEdge" class="headerlink" title="isAtEdge()"></a>isAtEdge()</h4></li>
<li>这个方法用来判断当前点是否处于边界，d.getX() * d.getY() == 0表示的是x和y中只要其中一个为0，相乘的结果也肯定为0，所以包含了上和左边界的判断，而d.getX() + 1 == COL || d.getY() + 1 == ROW分别是右边界和下边界的判断。<h4 id="getNeighbour"><a href="#getNeighbour" class="headerlink" title="getNeighbour()"></a>getNeighbour()</h4></li>
<li>这个方法用来获取当前点周围的六个点，首先我们需要对周围的点进行分析:</li>
<li>当前点的左右两边的坐标分别是(x-1,y)和(x+1,y)，这是毋庸置疑的，但是在左上，右上，右下，左下这四个点的位置是会因为当前点所在的行是奇数行还是偶数行而不同的。</li>
<li>在此我们规定当前点的左，左上，右上，右，右下，左下方向分别由数字1-6表示(后面都用数字来代表方向)，因此getNeighbour()方法需要两个参数，一个是当前点，另一个是方向值。</li>
<li>接着用一个switch语句进行判断当前需要获取的方向的点，1,4方向是固定的，而2,3,5,6方向需要分奇偶行。</li>
<li>在此之前，我已经将具体的情况通过图片绘制出来，先观察一下下面两幅图:</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog4/Blog4_3.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog4/Blog4_4.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>相信上面两幅图已经很好地诠释了周围的点的坐标值，接下来用one.getY() % 2 == 0判断当前点位于奇数行还是偶数行，然后将相应的点获取并return即可，这里不再多做解释。<h4 id="getDistance"><a href="#getDistance" class="headerlink" title="getDistance()"></a>getDistance()</h4></li>
<li>这个方法用于获取当前点指定方向到边界的距离，首先定义一个距离值distance和两个Dot类型的变量ori、next，ori用来存储当前点(由于当前点在此方法中会不断变化，所以需要用一个新的Dot类型来存储，否则在后面的while循环中会进入死循环)，next用来存储当前点的下一个点。</li>
<li>然后通过一个while循环不断的获取到下一个点，并将distance自增。</li>
<li>而在获取下一个点之前需要进行判断，当下一个点为障碍点时，将返回一个负数的distance，而如果直到边界都一路畅通，没有障碍的话就返回一个正数的distance，通过正负数，当前点在此方向上是否有障碍一目了然，这里可以进行一个测试。<h5 id="修改onTouch-中的方法"><a href="#修改onTouch-中的方法" class="headerlink" title="修改onTouch()中的方法:"></a>修改onTouch()中的方法:</h5></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View view, MotionEvent motionEvent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (motionEvent.getAction() == MotionEvent.ACTION_UP) &#123;</div><div class="line">            </div><div class="line">            ...</div><div class="line">            </div><div class="line">            <span class="comment">// 判断点击位置是否越界</span></div><div class="line">            <span class="keyword">if</span> (x + <span class="number">1</span> &gt; COL || y + <span class="number">1</span> &gt; ROW)</div><div class="line">                <span class="comment">//return true;</span></div><div class="line">                <span class="comment">//initGame();</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i++) &#123;</div><div class="line">                    Log.d(<span class="string">"-----------"</span>, <span class="string">"第"</span> + i + <span class="string">"个方向的距离为："</span> + getDistance(cat, i));</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">           ...</div><div class="line">           </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>将initGame()方法注释掉，然后用一个for循环打印出当前猫所在点六个方向上的距离值。<h5 id="部署项目并观看效果"><a href="#部署项目并观看效果" class="headerlink" title="部署项目并观看效果:"></a>部署项目并观看效果:</h5><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog4/Blog4_5.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog4/Blog4_6.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>可以看到，当前猫所在点的六个方向上的距离值与打印出来的结果一一对应。</li>
<li>这里只是做一个测试，测试之后记得将越界时的逻辑还原成initGame()。</li>
</ul>
</blockquote>
<h4 id="MoveTo"><a href="#MoveTo" class="headerlink" title="MoveTo()"></a>MoveTo()</h4><blockquote>
<ul>
<li>这个方法用于将猫移动至指定点。</li>
<li><p>首选将当前传入的点的status设置为STATUS_IN,即猫在这个点上，然后将当前猫所在点的status设置为STATUS_OFF，最后再将猫设置到新的点上。</p>
</li>
<li><p>这样，游戏逻辑的实现就完成了一半了。</p>
</li>
</ul>
</blockquote>
<h2 id="游戏逻辑——基本移动策略"><a href="#游戏逻辑——基本移动策略" class="headerlink" title="游戏逻辑——基本移动策略"></a>游戏逻辑——基本移动策略</h2><h3 id="修改PlayGround中的代码-1"><a href="#修改PlayGround中的代码-1" class="headerlink" title="修改PlayGround中的代码"></a>修改PlayGround中的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayGround</span> <span class="keyword">extends</span> <span class="title">SurfaceView</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnTouchListener</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="comment">// 让猫走动</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 判断猫是否在场景边界</span></div><div class="line">        <span class="keyword">if</span> (isAtEdge(cat)) &#123;</div><div class="line">            lose();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 判断猫是否被路障包围</span></div><div class="line">        Vector&lt;Dot&gt; avaliable = <span class="keyword">new</span> Vector&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i++) &#123;</div><div class="line">            Dot n = getNeighbour(cat, i);</div><div class="line">            <span class="keyword">if</span> (n.getStatus() == Dot.STATUS_OFF) &#123;</div><div class="line">                avaliable.add(n);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (avaliable.size() == <span class="number">0</span>)</div><div class="line">            win();</div><div class="line">        <span class="keyword">else</span></div><div class="line">            MoveTo(avaliable.get(<span class="number">0</span>));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 游戏失败</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lose</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(getContext(), <span class="string">"Lose"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 游戏成功</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">win</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(getContext(), <span class="string">"You Win！"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View view, MotionEvent motionEvent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (motionEvent.getAction() == MotionEvent.ACTION_UP) &#123;</div><div class="line">            <span class="comment">//获取当前点击的x,y的坐标值</span></div><div class="line">            <span class="comment">//Toast.makeText(getContext(), motionEvent.getX()+":"+motionEvent.getY(), Toast.LENGTH_SHORT).show();</span></div><div class="line">            <span class="keyword">int</span> x, y;</div><div class="line">            <span class="comment">// 获取当前点击的行数</span></div><div class="line">            y = (<span class="keyword">int</span>) (motionEvent.getY() / WIDTH);</div><div class="line">            <span class="keyword">if</span> (y % <span class="number">2</span> == <span class="number">0</span>) &#123;  <span class="comment">// 奇数行</span></div><div class="line">                x = (<span class="keyword">int</span>) (motionEvent.getX() / WIDTH);</div><div class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 偶数行</span></div><div class="line">                x = (<span class="keyword">int</span>) ((motionEvent.getX() - WIDTH / <span class="number">2</span>) / WIDTH);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 判断点击位置是否越界</span></div><div class="line">            <span class="keyword">if</span> (x + <span class="number">1</span> &gt; COL || y + <span class="number">1</span> &gt; ROW)</div><div class="line">                <span class="comment">//return true;</span></div><div class="line">                initGame();</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (getDot(x, y).getStatus() == Dot.STATUS_OFF) &#123;</div><div class="line">                getDot(x, y).setStatus(Dot.STATUS_ON);</div><div class="line">                move();</div><div class="line">            &#125;</div><div class="line">            redraw();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>在PlayGround中添加move()方法，lose()方法以及win()方法。</li>
<li>lose()和win()比较简单，只是负责显示相应的Toast。</li>
<li>而在onTouch()方法中，将else修改成 else if (getDot(x, y).getStatus() == Dot.STATUS_OFF)是为了防止猫所在的点被点击之后变成STATUS_ON状态，这样修改之后就算点击猫所在的点状态也不会发生改变了，接着再调用move()方法。<h4 id="move"><a href="#move" class="headerlink" title="move()"></a>move()</h4></li>
<li>这个方法用于实现让猫走动的逻辑。</li>
<li>首先我们要考虑两个情况:1.当前猫是否处于场景边界 2.当前猫是否已经被路障包围</li>
<li>因此我们需要作出判断，当猫处于边界的话，就调用lose()方法并return结束游戏;而判断猫是否被包围则复杂一点，首先我们创建一个Vector集合用于存储猫周围的点，表示猫被多少个路障围住，然后用一个for循环判断猫周围六个点的状态，若点的状态为STATUS_OFF，则表示还未被设置成路障，将其放入Vector集合中，判断完所有的点后，若集合中没有任何元素，则表明猫周围没有可走的点，游戏胜利，否则调用MoveTo()让猫移动。</li>
</ul>
</blockquote>
<h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序:"></a>运行程序:</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog4/Blog4_7.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog4/Blog4_8.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>可以看到，猫已经可以走动了，但是我们在MoveTo()的时候，传入的是avaliable.get(0)，这样固定猫的走法的话，玩家在多次游戏之后很容易就能找到猫移动的规律，所以接下来还要对猫移动的算法逻辑进行优化。</li>
</ul>
</blockquote>
<h2 id="优化游戏逻辑"><a href="#优化游戏逻辑" class="headerlink" title="优化游戏逻辑"></a>优化游戏逻辑</h2><h3 id="修改move-中的代码"><a href="#修改move-中的代码" class="headerlink" title="修改move()中的代码:"></a>修改move()中的代码:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 让猫走动</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 判断猫是否在场景边界</span></div><div class="line">    <span class="keyword">if</span> (isAtEdge(cat)) &#123;</div><div class="line">        lose();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 判断猫是否被路障包围</span></div><div class="line">    Vector&lt;Dot&gt; avaliable = <span class="keyword">new</span> Vector&lt;&gt;();</div><div class="line">    Vector&lt;Dot&gt; positive = <span class="keyword">new</span> Vector&lt;&gt;();</div><div class="line">    HashMap&lt;Dot, Integer&gt; al = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i++) &#123;</div><div class="line">        Dot n = getNeighbour(cat, i);</div><div class="line">        <span class="keyword">if</span> (n.getStatus() == Dot.STATUS_OFF) &#123;</div><div class="line">            avaliable.add(n);</div><div class="line">            al.put(n, i);</div><div class="line">            <span class="keyword">if</span> (getDistance(n, i) &gt; <span class="number">0</span>) &#123;</div><div class="line">                positive.add(n);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (avaliable.size() == <span class="number">0</span>)</div><div class="line">        win();</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (avaliable.size() == <span class="number">1</span>)</div><div class="line">        MoveTo(avaliable.get(<span class="number">0</span>));</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        Dot best = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (positive.size() != <span class="number">0</span>) &#123; <span class="comment">// 存在可以直接到达边界的走向</span></div><div class="line">            <span class="keyword">int</span> min = <span class="number">9999</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; positive.size(); i++) &#123;</div><div class="line">                <span class="keyword">int</span> a = getDistance(positive.get(i), al.get(positive.get(i)));</div><div class="line">                <span class="keyword">if</span> (a &lt; min) &#123;</div><div class="line">                    min = a;</div><div class="line">                    best = positive.get(i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 所有方向都存在路障</span></div><div class="line">            <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; avaliable.size(); i++) &#123;</div><div class="line">                <span class="keyword">int</span> k = getDistance(avaliable.get(i), al.get(avaliable.get(i)));</div><div class="line">                <span class="keyword">if</span> (k &lt;= max) &#123;</div><div class="line">                    max = k;</div><div class="line">                    best = avaliable.get(i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        MoveTo(best);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>首先将条件语句进行了修改，当可走点只有一个的时候，就只能选择那个方向，而当可选的点有两个以上的时候，就<strong>从没有路障的所有方向中选出离边界最近的路</strong>，具体实现逻辑是这样的:</li>
<li>定义一个Vector集合来存储当前点的六个方向中没有路障(即可以直接到达边界)的方向。然后在进行判断周围的点是否为STATUS_OFF之后再进行一次判断，用getDistance()获得的是正数或者负数来判断是否有直接到达边界的方向，若有，则添加进positive集合。</li>
<li>现在实现当可选的点有两个以上时的具体逻辑，首先定义一个Dot类型的best，用来存储最符合当前情况的下一个位置的点，然后进行判断，判断的情况有两种：1.positive里有元素，即当前点存在可以直接到达边界的方向;2.positive里没有元素，即所有方向都存在路障。针对这两种情况进行逻辑的修改。<h4 id="当前点存在可以直接到达边界的方向"><a href="#当前点存在可以直接到达边界的方向" class="headerlink" title="当前点存在可以直接到达边界的方向"></a>当前点存在可以直接到达边界的方向</h4></li>
<li>在这种情况下，我们就需要找出这些可以直达边界的方向中最短的那个，以达到可以最快到达边界的目的。</li>
<li>首先创建一个int类型的min，用于存放最短路径，初始值尽可能地大，所以设置为9999。</li>
<li>接着通过一个for循环从可以直达边界的所有点的集合(即positive)中找出最短的路径，但是现在却出现了一个问题，我们需要从positive中取出点，一个一个进行判断，但我们并不知道这些点具体是哪个方向的，而且存入positive时我们也没有做相应的记录，所以这时候就需要用到一个HashMap来存储这个点对于源点来说是哪个方向的。</li>
<li>创建HashMap集合al，并在判断点的状态是否为STATUS_OFF之后将这个点以及方向放入al中，即al.put(n, i)。这样我们就可以不管加入positive的点的顺序，轻而易举地知道这些点的方向了。</li>
<li>继续之前的逻辑，定义一个int类型的a用来存储positive中的点的distance长度，而方向直接到al集合中取即可:al.get(avaliable.get(i))。最后进行判断，如果这个点的distance值a比min小，则将min的值修改为a，并且best也修改为这个点。</li>
</ul>
</blockquote>
<h4 id="所有方向都存在路障"><a href="#所有方向都存在路障" class="headerlink" title="所有方向都存在路障"></a>所有方向都存在路障</h4><blockquote>
<ul>
<li>通过上面的分析，这种情况下的逻辑就比较容易理解了，基本差不多。</li>
<li>区别就是，当所有方向都存在路障的话，需要找出所有点距离路障的长度中，最大的那个长度值，因为只有往离路障越远的距离的方向走，猫逃出路障的几率才会更大。</li>
<li>这里定义一个int类型的max，用于存放最长路径，而且初始值要尽可能地小，这里就设置为0，而后面的操作基本都差不多。<br>*　需要注意的是，判断条件为k&lt;=max，这是由于我们前文中将存在路障的路径的长度值设置为负数，而负数越大，其绝对值越小，所以判断条件才会是k&lt;=max。</li>
<li>最后无论是哪种情况，都需要将猫移动到best。</li>
</ul>
</blockquote>
<h3 id="部署游戏："><a href="#部署游戏：" class="headerlink" title="部署游戏："></a>部署游戏：</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog4/Blog4_9.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li><p>可以明显看出，猫的移动没有之前那样容易找出规律了。</p>
</li>
<li><p>这样游戏基本就完成了，虽然UI并没有真正的围住神经猫游戏美观，但是游戏的具体逻辑算是比较完整了，这仅仅是一个demo，就不追求完美了。</p>
</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Android制作围住神经猫游戏-二&quot;&gt;&lt;a href=&quot;#使用Android制作围住神经猫游戏-二&quot; class=&quot;headerlink&quot; title=&quot;使用Android制作围住神经猫游戏(二)&quot;&gt;&lt;/a&gt;使用Android制作围住神经猫游戏(二)&lt;/h1
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="demo" scheme="https://izdo.github.io/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>围住神经猫游戏(一)</title>
    <link href="https://izdo.github.io/2017/04/16/%E5%9B%B4%E4%BD%8F%E7%A5%9E%E7%BB%8F%E7%8C%AB%E6%B8%B8%E6%88%8F(%E4%B8%80)/"/>
    <id>https://izdo.github.io/2017/04/16/围住神经猫游戏(一)/</id>
    <published>2017-04-16T06:18:08.833Z</published>
    <updated>2017-04-16T06:18:00.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Android制作围住神经猫游戏-一"><a href="#使用Android制作围住神经猫游戏-一" class="headerlink" title="使用Android制作围住神经猫游戏(一)"></a>使用Android制作围住神经猫游戏(一)</h1><h2 id="新建工程CatchCrazyCat"><a href="#新建工程CatchCrazyCat" class="headerlink" title="新建工程CatchCrazyCat"></a>新建工程CatchCrazyCat</h2><h2 id="新建Java类PlayGround作为游戏背景"><a href="#新建Java类PlayGround作为游戏背景" class="headerlink" title="新建Java类PlayGround作为游戏背景"></a>新建Java类PlayGround作为游戏背景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.catchcrazycat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Color;</div><div class="line"><span class="keyword">import</span> android.view.SurfaceHolder;</div><div class="line"><span class="keyword">import</span> android.view.SurfaceView;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/3/28.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayGround</span> <span class="keyword">extends</span> <span class="title">SurfaceView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayGround</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">redraw</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 获得Canvas画布实例</span></div><div class="line">        Canvas c = getHolder().lockCanvas();</div><div class="line">        <span class="comment">// 使用Canvas绘制背景</span></div><div class="line">        c.drawColor(Color.LTGRAY);</div><div class="line">        <span class="comment">// 设置背景</span></div><div class="line">        getHolder().unlockCanvasAndPost(c);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 为SurfaceHolder添加回调</span></div><div class="line">    SurfaceHolder.Callback callback = <span class="keyword">new</span> SurfaceHolder.Callback() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceCreated</span><span class="params">(SurfaceHolder surfaceHolder)</span> </span>&#123;</div><div class="line">            <span class="comment">// 在surface初始化时调用redraw()方法</span></div><div class="line">            redraw();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceChanged</span><span class="params">(SurfaceHolder surfaceHolder, <span class="keyword">int</span> i, <span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceDestroyed</span><span class="params">(SurfaceHolder surfaceHolder)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>PlayGround类需要继承自SurfaceView<h3 id="SurfaceView介绍"><a href="#SurfaceView介绍" class="headerlink" title="SurfaceView介绍"></a>SurfaceView介绍</h3></li>
<li>SurfaceView是继承自View用于显示图像的组件的。SurfaceView最大的特点就是它的双缓冲技术，所谓的双缓冲技术就是在它内部有两个线程，比如线程AB，当线程A更新界面时，B进行后台计算操作，当两个线程都完成各自的任务时，它们就会互相交换，A进行后台运算，B进行界面更新，两个线程无限循环交替更新和计算。由于SurfaceView的这种特性可以避免画图任务繁重而造成主线程阻塞，从而提高了程序的反应速度，因此在游戏开发中多用到SurfaceView，例如游戏中的背景、人物、动画等。</li>
<li>上面代码中我们首先在redraw()方法中通过getHolder获取SurfaceHolder，接着调用其lockCanvas()方法获取Canvas实例，然后调用drawColor()绘制背景，再调用unlockCanvasAndPost()方法将绘制的背景设置到SurfaceView界面上。</li>
<li>如果在onCreate()方法执行时，SurfaceHolder还没有完全创建好，这时候就会出现异常，这就需要给SurfaceHolder添加回调了。创建一个新的回调Callback，Callback是一个接口，所以需要重写其三个方法:surfaceCreated()、surfaceChanged()、surfaceDestroyed()，这三个方法分别是在surfaceView的holder被创建、被销毁以及surfaceView的大小发生变化时调用。</li>
<li>这里我们只需要在holder创建时调用redraw()方法即可。</li>
<li>最后再构造函数中添加Callback。</li>
</ul>
</blockquote>
<h3 id="Canvas介绍"><a href="#Canvas介绍" class="headerlink" title="Canvas介绍"></a>Canvas介绍</h3><blockquote>
<ul>
<li>通常情况下，要在Android中绘图，需要创建一个集成自View的视图，并且在该类中重写其onDraw(Canvas canvas)方法，然后在Activity中添加该视图，这里需要传入一个Canvas协助绘图。Canvas类代表画布，通过该类提供的方法，可以绘制各种图形。</li>
</ul>
</blockquote>
<h2 id="修改MainActivity"><a href="#修改MainActivity" class="headerlink" title="修改MainActivity"></a>修改MainActivity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.catchcrazycat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="comment">//setContentView(R.layout.activity_main);</span></div><div class="line">        setContentView(<span class="keyword">new</span> PlayGround(<span class="keyword">this</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>这里我们将原先加载的布局换成我们定义的PlayGround并传入上下文。</li>
</ul>
</blockquote>
<h3 id="部署到Genymotion观看效果"><a href="#部署到Genymotion观看效果" class="headerlink" title="部署到Genymotion观看效果:"></a>部署到Genymotion观看效果:</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog3/Blog3_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="创建Java类Dot"><a href="#创建Java类Dot" class="headerlink" title="创建Java类Dot"></a>创建Java类Dot</h2><blockquote>
<ul>
<li>这个类用于记录所有点的xy坐标以及它的状态。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.catchcrazycat;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/3/28.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dot</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">int</span> status;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_ON = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_OFF = <span class="number">2</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_IN = <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = y;</div><div class="line">        status = STATUS_OFF;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.y = y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.status = status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setXY</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = y;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>首先创建int类型的x，y用于存储点的横纵坐标，然后创建一个status用于记录当前点的状态。</li>
<li>然后定义三个常量分别用于表示点的三种状态:点未被点(OFF)，点已被点(ON),猫在点中。</li>
<li>定义一个带参构造器，并将status的状态设置为STATUS_OFF。</li>
<li>除了给x，y，status提供对应的get、set方法之外，还需要提供一个setxy()方法用于设置xy。</li>
</ul>
</blockquote>
<h2 id="修改PlayGround中的代码"><a href="#修改PlayGround中的代码" class="headerlink" title="修改PlayGround中的代码"></a>修改PlayGround中的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.catchcrazycat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Color;</div><div class="line"><span class="keyword">import</span> android.view.SurfaceHolder;</div><div class="line"><span class="keyword">import</span> android.view.SurfaceView;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/3/28.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayGround</span> <span class="keyword">extends</span> <span class="title">SurfaceView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ROW = <span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COL = <span class="number">10</span>;</div><div class="line">    <span class="comment">// 随机添加的路障数量</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BLOCKS = <span class="number">15</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Dot matrix[][];</div><div class="line">    <span class="keyword">private</span> Dot cat;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayGround</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        getHolder().addCallback(callback);</div><div class="line">        matrix = <span class="keyword">new</span> Dot[ROW][COL];</div><div class="line">        <span class="comment">// 将二维数组所有数据初始化为Dot类型</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COL; j++) &#123;</div><div class="line">                matrix[i][j] = <span class="keyword">new</span> Dot(j, i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        initGame();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取指定坐标的对应点</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Dot <span class="title">getDot</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> matrix[y][x];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">// 初始化所有点</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initGame</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COL; j++) &#123;</div><div class="line">                matrix[i][j].setStatus(Dot.STATUS_OFF);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        cat = <span class="keyword">new</span> Dot(<span class="number">4</span>, <span class="number">5</span>);</div><div class="line">        getDot(<span class="number">4</span>, <span class="number">5</span>).setStatus(Dot.STATUS_IN);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; BLOCKS; ) &#123;</div><div class="line">            <span class="keyword">int</span> x = (<span class="keyword">int</span>) ((Math.random() * <span class="number">1000</span>) % COL);</div><div class="line">            <span class="keyword">int</span> y = (<span class="keyword">int</span>) ((Math.random() * <span class="number">1000</span>) % ROW);</div><div class="line">            <span class="keyword">if</span> (getDot(x, y).getStatus() == Dot.STATUS_OFF) &#123;</div><div class="line">                getDot(x, y).setStatus(Dot.STATUS_ON);</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>我们先来看看围住神经猫游戏的主界面:</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog3/Blog3_2.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>可以看到，游戏主界面的背景是一个多行多列的方阵(行之间有偏移，但后面可以解决),所以我们可以用二维数组来储存。</li>
<li>创建数据类型为Dot的二维数组matrix[][]，在构造方法PlayGround()中用两层for循环将二维数组所有数据初始化。</li>
<li>在初始化点时，可以看到: matrix[i][j] = new Dot(j, i); matrix的第i行第j列的点对应的是Dot(j,i)，这是由于Dot的两个参数x，y分别代表的是横坐标和纵坐标，而横坐标所对应的是列数COL，纵坐标所对应的是行数ROW，是反过来的，不理解的话可以看一下下面的图:</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog3/Blog3_3.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>而由于这样i，j和j，i转换会混乱我们的思维，因此我们可以将这种转换封装成getDot()方法，方便我们转换的同时又不会混乱我们。</li>
<li>而最后的initGame()用于初始化所有点的状态，同样是用两层for循环，将所有点初始化为OFF状态，并且将一开始创建的Dot类型的cat猫初始化在(4,5)的位置，并且将其状态设置为IN。</li>
<li>最后我们需要定义一个常量BLOCKS表示随机添加的路障数量，并且在initGame()方法中用for循环随机设置路障位置。</li>
</ul>
</blockquote>
<h2 id="绘制场景"><a href="#绘制场景" class="headerlink" title="绘制场景"></a>绘制场景</h2><blockquote>
<ul>
<li>直接上代码:</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayGround</span> <span class="keyword">extends</span> <span class="title">SurfaceView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> WIDTH = <span class="number">40</span>;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">redraw</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 获得Canvas画布实例</span></div><div class="line">        Canvas c = getHolder().lockCanvas();</div><div class="line">        <span class="comment">// 使用Canvas绘制背景</span></div><div class="line">        c.drawColor(Color.LTGRAY);</div><div class="line"></div><div class="line">        <span class="comment">// 创建画笔</span></div><div class="line">        Paint paint = <span class="keyword">new</span> Paint();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COL; j++) &#123;</div><div class="line">                Dot one = getDot(j, i);</div><div class="line"></div><div class="line">                <span class="comment">// 根据点的状态设置画笔的颜色</span></div><div class="line">                <span class="keyword">switch</span> (one.getStatus()) &#123;</div><div class="line">                    <span class="keyword">case</span> Dot.STATUS_OFF:</div><div class="line">                        paint.setColor(<span class="number">0xFFEEEEEE</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> Dot.STATUS_ON:</div><div class="line">                        paint.setColor(<span class="number">0xFFFFAA00</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> Dot.STATUS_IN:</div><div class="line">                        paint.setColor(<span class="number">0xFFFF0000</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 绘制圆点</span></div><div class="line">                c.drawOval(<span class="keyword">new</span> RectF(one.getX() * WIDTH , one.getY() * WIDTH,</div><div class="line">                        (one.getX() + <span class="number">1</span>) * WIDTH , (one.getY() + <span class="number">1</span>) * WIDTH), paint);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 设置背景</span></div><div class="line">        getHolder().unlockCanvasAndPost(c);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>首先定义一个Paint，Paint类代表画笔，用来描述图形的颜色和风格，如线宽、颜色、透明度和填充效果等信息。</li>
<li>同样用两层for循环进行绘制，用一个switch语句判断当前点的状态并根据其状态将画笔设置成不同的颜色，然后调用drawOval方法绘制圆点。</li>
</ul>
</blockquote>
<h3 id="部署到Genymotion观看效果-1"><a href="#部署到Genymotion观看效果-1" class="headerlink" title="部署到Genymotion观看效果:"></a>部署到Genymotion观看效果:</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog3/Blog3_4.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>这样一个10*10的矩阵就绘制出来了，但这明显不是我们想要的效果，缺少了偏移，但比较好实现，修改redraw()中的代码:</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">redraw</span><span class="params">()</span> </span>&#123;</div><div class="line">       ...</div><div class="line"></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++) &#123;</div><div class="line">           <span class="keyword">int</span> offset = <span class="number">0</span>;</div><div class="line">           <span class="comment">// 偶数行偏移</span></div><div class="line">           <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</div><div class="line">               offset = WIDTH / <span class="number">2</span>;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COL; j++) &#123;</div><div class="line">               </div><div class="line">               ...</div><div class="line">               </div><div class="line">               <span class="comment">// 绘制圆点</span></div><div class="line">               c.drawOval(<span class="keyword">new</span> RectF(one.getX() * WIDTH + offset, one.getY() * WIDTH,</div><div class="line">                       (one.getX() + <span class="number">1</span>) * WIDTH + offset, (one.getY() + <span class="number">1</span>) * WIDTH), paint);</div><div class="line">           &#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>添加一个偏移量offset，用if语句判断当偶数行时就将offset设置为WIDTH的一般，并且在绘制圆点时做出相应的修改，这样就完成了偏移。</li>
</ul>
</blockquote>
<h3 id="部署到Genymotion观看效果-2"><a href="#部署到Genymotion观看效果-2" class="headerlink" title="部署到Genymotion观看效果:"></a>部署到Genymotion观看效果:</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog3/Blog3_5.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>这样错位偏移的效果也完成了，但是我们发现，绘制的圆点似乎不是很圆，边上会有类似锯齿一样的东西，这是由于我们用画笔画出来的图形是位图，是由一格一格像素组成的，所以会有锯齿，这是只要给画笔Paint设置抗锯齿就行了。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">paint.setFlags(Paint.ANTI_ALIAS_FLAG);</div></pre></td></tr></table></figure>
<h3 id="观看效果"><a href="#观看效果" class="headerlink" title="观看效果:"></a>观看效果:</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog3/Blog3_6.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>现在锯齿已经消失了，但是还有一个问题，我们可以看到，在模拟器上绘制的是一个10*10的矩阵，而由于模拟器分辨率比较高，所以在放满10个圆点之后还有一部分空白。</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog3/Blog3_7.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li><p>这也许不会影响什么，但如果在分辨率较小的手机上运行，就会出现超出边界之类的问题了，所以我们需要适配一下屏幕。</p>
</li>
<li><p>要适配屏幕，就需要在Callback中的surfaceChanged()方法中定义了，这个方法我们可能还不知道是用来做什么的，但是我们通过查看AndroidAPI文档可以知道，surfaceChanged()的最后两个参数分别代表的是surfaceView的宽和高。</p>
</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog3/Blog3_8.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="修改surfaceChanged-方法"><a href="#修改surfaceChanged-方法" class="headerlink" title="修改surfaceChanged()方法"></a>修改surfaceChanged()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceChanged</span><span class="params">(SurfaceHolder surfaceHolder, <span class="keyword">int</span> i, <span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span> </span>&#123;</div><div class="line">       WIDTH = i1 / (COL + <span class="number">1</span>);</div><div class="line">       redraw();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>将WIDTH动态地设置成与surfaceView的宽相关的值，这样就可以适配其他分比率的屏幕了。</li>
<li>ps:为什么要除以(COL+1)而不是COL呢?这是因为我们绘制的场景要有偏移的效果，如果我们只除以COL的话，就只能恰好满足十列的宽度，也就是第一行的宽度，但由于第二行是向右偏倚了一个半径的宽度，所以如果只除以COL的话第二行最后一个圆点的一半会在屏幕之外，这样的用户体验是非常不好的，所以需要多加一个宽度来将偶数行也适配进去。</li>
</ul>
</blockquote>
<h3 id="观看效果-1"><a href="#观看效果-1" class="headerlink" title="观看效果:"></a>观看效果:</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog3/Blog3_9.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>可以看到，屏幕适配也成功了。</li>
<li>这样一来，场景绘制的工作也完成了。</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Android制作围住神经猫游戏-一&quot;&gt;&lt;a href=&quot;#使用Android制作围住神经猫游戏-一&quot; class=&quot;headerlink&quot; title=&quot;使用Android制作围住神经猫游戏(一)&quot;&gt;&lt;/a&gt;使用Android制作围住神经猫游戏(一)&lt;/h1
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="demo" scheme="https://izdo.github.io/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>Lambda表达式</title>
    <link href="https://izdo.github.io/2017/04/08/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://izdo.github.io/2017/04/08/Lambda表达式/</id>
    <published>2017-04-08T06:07:17.011Z</published>
    <updated>2017-04-08T06:10:25.954Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li><p>最近小编偶然接触到了一个叫做Lambda表达式的函数，于是就去了解了一下，觉得还挺有趣的，今天我们就一起来学习一下这个表达式。<br>那么Lambda表达式是什么呢？首先让我们先看看百度对Lambda表达式的定义：<br>“Lambda 表达式”(lambda expression)是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示闭包（注意和数学传统意义上的不同）。（以上摘自百度百科）    是不是有点看不懂？没关系，定义的东西是这样的，接下来我们来看一下一个Java的例子：</p>
</li>
<li><p>首先我们定义一个接口，接口中只有一个待实现的方法sayHello()。</p>
</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>接下来我们定义一个类实现这个接口，这里我们不使用implements Example来实现接口，而是采用匿名内部类的方式来实现Example接口。</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_2.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li><p>这是很常见的类实现接口的一段代码，但是久而久之我们就会发现这段代码存在一个问题：这段代码有好几行，而实际上却只有System.out.println(“Hello”); 这一行在工作，也就是说最终我们是通过这一行代码输出”Hello”，而其他不必要的代码却比在工作的代码多得多。<br>匿名类型最大的问题就在于其冗余的语法，而很多时候我们为了方便又不得不使用匿名类型，那有什么办法可以解决这个问题吗？<br>这就要用到我们前面提到的Lambda表达式了，Lambda表达式是Java8加入的新特性，而实际上Lambda表达式也是一种匿名方法，但是它既没有方法名，也没有访问修饰符和返回值类型，使得代码会更加简洁、易读。</p>
</li>
<li><p>使用Lambda表达式后可以这样写：</p>
</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_3.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li><p>怎么样？是不是简洁了许多？不管是代码行数上还是缩进结构上来看，Lambda表达式的写法明显比传统的写法更加精简。</p>
</li>
<li><p>再来看一个例子，我们在Java多线程编程中，按以往的传统我们要开启一个子线程需要这样写：</p>
</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_4.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>而使用Lambda表达式后可以这样写：</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_5.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>那么为什么我们可以这样写呢？这是因为Thread类的构造函数接收的参数是一个Runnable接口，并且这个接口中只有一个待实现的方法：</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_6.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li><p>通过查看源码我们发现Runnable接口中确实只有一个待实现的run()方法，也就是说，<strong>凡是这种只有一个待实现方法的接口，我们都可以使用Lambda表达式进行简写</strong>。</p>
</li>
<li><p>看到这里，也许很多人会说，使用Lambda表达式之后代码也没有减少多少啊。然而这仅仅是我们的一个例子，在实际开发中，代码量往往都是上千行的，而在这上千行代码中，我们是用Lambda表达式使其更简洁，减少代码量，增加可读性，确实是一件好事。<br>你以为这就完了吗？接下来再来看看Java的“类型推断“，果断再看一个例子：</p>
</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_7.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li><p>这里我们仍然使用之前的例子，只不过将sayHello()方法改成带两个参数的append(String a,int b)方法，这和之前的例子是基本一致的。</p>
</li>
<li><p>在我们使用Lambda表达式将其简化之后的代码是这样的：</p>
</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_8.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>这个我们没什么好说的，我要说的是Java8可以根据上下文自动推断出Lambda表达式中的参数类型，根据这个特性，我们又可以将代码这样写：</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_9.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li><p>去掉参数后我们又能进一步偷懒了呢！这样使得代码简洁之后再简洁。</p>
</li>
<li><p>假设现在有一个方法是接收Example参数的：</p>
</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_10.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>那么我们在调用test()方法的时候就可以这样写：</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_11.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li><p>最终打印的结果是：Lambda表达式666</p>
</li>
<li><p>接下来我们说说Android。<br>由于Java8加入了许多新特性，但是由于很多新特性都只支持Android7.0以上的系统，我们显然不可能为了使用这些新特性而放弃兼容众多低版本的Android手机，毕竟现在使用Android7.0的手机还不是很多，大多数人都是使用着7.0以下的系统，7.0的普及还需要一段时间，这就使得其他新特性没有用武之地了，然而Lambda表达式却最低兼容到Android2.3系统，基本上可以覆盖所有的Android手机了。</p>
</li>
<li><p>而Android中除了前文说到的开启子线程可以运用Lambda表达式之外，像设置点击事件这类的功能也是非常适合使用Lambda表达式的。</p>
</li>
<li><p>比如，按照以往的写法，我们要给一个按钮设置点击事件需要这样写：</p>
</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_12.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>使用Lambda表达式之后，就可以简化成这样了：</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_13.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>看到这里，是不是觉得已经结束了？然而并没有，Lambda表达式不仅仅在Java中适用，其他一些语言同样支持Lambda表达式。<br>作为一个良心的小编，我特地找了学过Python的不愿意透露性别的男同学简单地了解了一下：<br>Lambda的主体是一个表达式，而不是一个代码块。仅仅能在Lambda表达式中封装有限的逻辑进去。<br>Lambda表达式是起到一个函数速写的作用，允许在代码内嵌入一个函数的定义。<br>不过Lamdba表达式一般不单独使用，而是结合其他的函数一起使用的。<br>比如说这个例子：</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_14.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>使用Lambda表达式后省去了函数的定义，很明显减少了很多代码量。</li>
</ul>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog5/Blog5_15.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>而在其他语言中，Lambda表达式是ISO C++11标准引入的，C#同样也能使用Lambda表达式，这里就不再阐述，有兴趣的同学可以去了解一下。</li>
<li>至此，Lambda表达式的用法我们都已经知道了，可能有些人会不习惯Lambda表达式的写法，但Java8中新加入这个表达式，并不是说强制你用这种写法，你如果不喜欢这种写法的话，完全可以依照以前的写法，不管怎么说，Java8引入Lambda表达式只是提供了一种简化代码的方式，使用与否在于你个人。</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最近小编偶然接触到了一个叫做Lambda表达式的函数，于是就去了解了一下，觉得还挺有趣的，今天我们就一起来学习一下这个表达式。&lt;br&gt;那么Lambda表达式是什么呢？首先让我们先看看百度对Lambda表达式的定义：&lt;br&gt;“Lam
    
    </summary>
    
      <category term="Java" scheme="https://izdo.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://izdo.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>如何做一个简单的通讯录</title>
    <link href="https://izdo.github.io/2017/03/26/%E5%88%B6%E4%BD%9C%E9%80%9A%E8%AE%AF%E5%BD%95/"/>
    <id>https://izdo.github.io/2017/03/26/制作通讯录/</id>
    <published>2017-03-26T14:05:59.635Z</published>
    <updated>2017-04-06T12:42:17.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何做一个简单的通讯录"><a href="#如何做一个简单的通讯录" class="headerlink" title="如何做一个简单的通讯录"></a>如何做一个简单的通讯录</h1><h2 id="获取手机通讯录信息"><a href="#获取手机通讯录信息" class="headerlink" title="获取手机通讯录信息"></a>获取手机通讯录信息</h2><h3 id="创建新工程GetMyPhoneContacts"><a href="#创建新工程GetMyPhoneContacts" class="headerlink" title="创建新工程GetMyPhoneContacts"></a>创建新工程GetMyPhoneContacts</h3><h3 id="为了模拟通讯录的效果，现在genymotion模拟器中添加几个联系人"><a href="#为了模拟通讯录的效果，现在genymotion模拟器中添加几个联系人" class="headerlink" title="为了模拟通讯录的效果，现在genymotion模拟器中添加几个联系人"></a>为了模拟通讯录的效果，现在genymotion模拟器中添加几个联系人</h3><ul>
<li><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图:"></a>效果图:</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog2/Blog2_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<h3 id="创建Java类-GetNumber"><a href="#创建Java类-GetNumber" class="headerlink" title="创建Java类 GetNumber"></a>创建Java类 GetNumber</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.getmyphonecontacts;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.database.Cursor;</div><div class="line"><span class="keyword">import</span> android.provider.ContactsContract.CommonDataKinds.Phone;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/3/26.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetNumber</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getNumber</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="comment">// 查询系统通讯录</span></div><div class="line">        Cursor cursor = context.getContentResolver().query(Phone.CONTENT_URI, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 定义两个字符串用于获取姓名和电话号码</span></div><div class="line">        String phoneName;</div><div class="line">        String phoneNumber;</div><div class="line"></div><div class="line">        <span class="comment">// 循环遍历</span></div><div class="line">        <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">            phoneName = cursor.getString(cursor.getColumnIndex(Phone.DISPLAY_NAME));</div><div class="line">            phoneNumber = cursor.getString(cursor.getColumnIndex(Phone.NUMBER));</div><div class="line">             Log.d(<span class="string">"MainActivity"</span>, <span class="string">"phoneName= "</span> + phoneName + <span class="string">",phoneNumber= "</span> + phoneNumber);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>类中只有一个getNumber方法，这个方法用于获取手机通讯录的联系人</li>
<li>这个方法需要一个上下文Context对象作为参数，首先调用上下文的getContentResolver()方法获取一个内容解析者ContentResolver对象并且调用其query()方法查询系统联系人</li>
<li>query()方法第一个参数为一个Uri，这里传入Phone.CONTENT_URI即可，后面的四个参数为查询条件，目前我们不需要筛选联系人，因此全部传入null即可。</li>
<li>query()返回的是一个游标Cursor，用while循环不断遍历Cursor，从Cursor中取出联系人的姓名和号码。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.getmyphonecontacts;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        GetNumber.getNumber(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>在MAinActivity中调用GetNumber的getNumber()方法。</li>
</ul>
</blockquote>
<h4 id="打印日志如下"><a href="#打印日志如下" class="headerlink" title="打印日志如下:"></a>打印日志如下:</h4><blockquote>
<p>D/MainActivity: <strong>phoneName= zhangsan,phoneNumber= 110</strong></p>
<p>D/MainActivity: <strong>phoneName= lisi,phoneNumber= 119</strong></p>
<p>D/MainActivity: <strong>phoneName= lin,phoneNumber= 666</strong></p>
<ul>
<li>可以看到，打印的结果和通讯录中的联系人吻合。</li>
</ul>
</blockquote>
<h1 id="封装数据"><a href="#封装数据" class="headerlink" title="封装数据"></a>封装数据</h1><blockquote>
<ul>
<li>现在要做的是将得到的数据封装起来<h2 id="新建Java类ContactInfo"><a href="#新建Java类ContactInfo" class="headerlink" title="新建Java类ContactInfo"></a>新建Java类ContactInfo</h2></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.getmyphonecontacts;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/3/27.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContactInfo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String number;</div><div class="line"></div><div class="line">    <span class="comment">// 构造器</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContactInfo</span><span class="params">(String name, String number)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.number = number;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 对应的getter、setter方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> number;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(String number)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.number = number;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>简单的JavaBean类，不多做解释 </li>
<li>ps:number使用String类型而不适用int类型是因为号码会有地区之分，所以会出现”+86”的情况，所以不能只用int类型来存储。</li>
</ul>
</blockquote>
<h2 id="修改GetNumber中的代码"><a href="#修改GetNumber中的代码" class="headerlink" title="修改GetNumber中的代码:"></a>修改GetNumber中的代码:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetNumber</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;ContactInfo&gt; contactInfoList = <span class="keyword">new</span> ArrayList&lt;ContactInfo&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getNumber</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line"></div><div class="line">        ...</div><div class="line"></div><div class="line">        <span class="comment">// 循环遍历</span></div><div class="line">        <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">            phoneName = cursor.getString(cursor.getColumnIndex(Phone.DISPLAY_NAME));</div><div class="line">            phoneNumber = cursor.getString(cursor.getColumnIndex(Phone.NUMBER));</div><div class="line">            ContactInfo contactInfo = <span class="keyword">new</span> ContactInfo(phoneName, phoneNumber);</div><div class="line">            contactInfoList.add(contactInfo);</div><div class="line">            Log.d(<span class="string">"MainActivity"</span>, <span class="string">"phoneName= "</span> + phoneName + <span class="string">",phoneNumber= "</span> + phoneNumber);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p>GetNumber中新创建了一个数据类型为ContactInfo的List集合，在getNumber()方法的while循环中，每一次循环都将新创建一个ContactInfo对象，并将获取的联系人姓名和号码存入ContactInfo对象中，再将其加入到List集合里，这样就将所有的联系人都存入到了List集合，实现了数据的封装。</p>
</li>
<li><p>ps:显示中的通讯录实际上不止姓名和号码两项，还有地址，电子邮箱等信息，这里为了方便救只使用姓名和号码这两项。</p>
</li>
</ul>
</blockquote>
<h1 id="UI适配"><a href="#UI适配" class="headerlink" title="UI适配"></a>UI适配</h1><h2 id="修改activity-main-xml文件"><a href="#修改activity-main-xml文件" class="headerlink" title="修改activity_main.xml文件"></a>修改activity_main.xml文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.getmyphonecontacts.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/lv"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>这里使用ListView用于联系人数据的显示。</li>
</ul>
</blockquote>
<h2 id="自定义适配器"><a href="#自定义适配器" class="headerlink" title="自定义适配器"></a>自定义适配器</h2><h3 id="新建MyAdapter继承自BaseAdapter"><a href="#新建MyAdapter继承自BaseAdapter" class="headerlink" title="新建MyAdapter继承自BaseAdapter"></a>新建MyAdapter继承自BaseAdapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.getmyphonecontacts;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"><span class="keyword">import</span> android.widget.BaseAdapter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iZdo on 2017/3/27.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;ContactInfo&gt; mContactInfoList;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(List&lt;ContactInfo&gt; contactInfoList, Context context)</span> </span>&#123;</div><div class="line">        mContactInfoList = contactInfoList;</div><div class="line">        mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mContactInfoList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mContactInfoList.get(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> i, View view, ViewGroup viewGroup)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>此处需要创建一个数据类型为ContactInfo的List集合和一个上下文对象COntext。</li>
<li>再创建一个构造器，其参数为一个List集合和一个上下文对象。</li>
<li>继承BaseAdapter需要重写四个方法:getCount()、getItem()、getItemId()、getView():<ul>
<li>public int getCount():用于得到Item的总数，这里返回我们创建的List集合的长度即可。</li>
<li>public Object getItem(int i):用于根据i得到某个Item的对象，这里需要返回List集合对应位置i的对象。</li>
<li>public long getItemId(int i):用于根据i得到某个Item的id，由于位置i代表的就是其相应Item的id，这里返回i即可。</li>
<li>public View getView(int i, View view, ViewGroup viewGroup):用于得到相应的i对应的Item视图，i当前的位置以及converView复用的View对象，在写这个方法之前，我们需要再新建一个Item布局来展示具体数据。</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="新建布局文件contact-xml"><a href="#新建布局文件contact-xml" class="headerlink" title="新建布局文件contact.xml"></a>新建布局文件contact.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/iv"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_alignBottom</span>=<span class="string">"@id/iv"</span></div><div class="line">            <span class="attr">android:layout_alignTop</span>=<span class="string">"@id/iv"</span></div><div class="line">            <span class="attr">android:layout_toRightOf</span>=<span class="string">"@id/iv"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/name"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"111"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"15sp"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/number"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"222"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"10sp"</span>/&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><h3 id="效果图如下"><a href="#效果图如下" class="headerlink" title="效果图如下:"></a>效果图如下:</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog2/Blog2_2.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>简单的布局，左边是一个ImageView，右边是两个TextView，具体实现如代码所示，此处不再阐述。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="修改MyAdapter的代码"><a href="#修改MyAdapter的代码" class="headerlink" title="修改MyAdapter的代码"></a>修改MyAdapter的代码</h2><h3 id="将getView-方法的内容补充完整"><a href="#将getView-方法的内容补充完整" class="headerlink" title="将getView()方法的内容补充完整"></a>将getView()方法的内容补充完整</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> i, View view, ViewGroup viewGroup)</span> </span>&#123;</div><div class="line">    LayoutInflater inflater = LayoutInflater.from(mContext);</div><div class="line">    LinearLayout layout = (LinearLayout) inflater.inflate(R.layout.contact, <span class="keyword">null</span>);</div><div class="line">    TextView nametv = (TextView) layout.findViewById(R.id.name);</div><div class="line">    TextView numbertv = (TextView) layout.findViewById(R.id.number);</div><div class="line">    nametv.setText(mContactInfoList.get(i).getName());</div><div class="line">    numbertv.setText(mContactInfoList.get(i).getNumber());</div><div class="line">    <span class="keyword">return</span> layout;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>首先创建一个打气筒将刚才创建的Item布局文件转化为一个View，然后初始化两个TextView控件并为其填充相应位置的联系人信息，最后将layout返回。</li>
<li>ps:LayoutInflater.from()方法需要传入一个上下文对象Context，这里就需要用到此前创建的成员变量mContext，而mContext是通过构造器得到的，因此在构造器里设置Context为参数的好处就是当某个活动创建我们自定义的适配器MyAdapter的时候就会同时将其上下文传入，使得活动与适配器联系了起来。</li>
</ul>
</blockquote>
<h2 id="修改MainActivity中的代码"><a href="#修改MainActivity中的代码" class="headerlink" title="修改MainActivity中的代码"></a>修改MainActivity中的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.getmyphonecontacts;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.widget.ListView;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ListView lv;</div><div class="line">    <span class="keyword">private</span> MyAdapter mAdapter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        GetNumber.getNumber(<span class="keyword">this</span>);</div><div class="line">        lv = (ListView) findViewById(R.id.lv);</div><div class="line">        mAdapter = <span class="keyword">new</span> MyAdapter(GetNumber.contactInfoList, <span class="keyword">this</span>);</div><div class="line">        lv.setAdapter(mAdapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>创建一个ListView</li>
<li>创建一个MyAdapter适配器</li>
</ol>
<ul>
<li>这里没什么好说的，需要注意的一点是MyAdapter的两个参数分别传入GetNumber中的List集合(静态成员变量，可通过类名直接调用)和this即可。</li>
</ul>
</blockquote>
<h2 id="部署到Genymotion模拟器上观看效果"><a href="#部署到Genymotion模拟器上观看效果" class="headerlink" title="部署到Genymotion模拟器上观看效果"></a>部署到Genymotion模拟器上观看效果</h2><h3 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下:"></a>效果如下:</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog2/Blog2_3.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<ul>
<li>可以看到，联系人的信息都显示在了每一行Item上了。</li>
<li>ps:ImageView上的图片事先并无准备，所以就用了系统自带的ic_launcher图片。</li>
</ul>
</blockquote>
<h2 id="复用历史缓存对象进行优化"><a href="#复用历史缓存对象进行优化" class="headerlink" title="复用历史缓存对象进行优化"></a>复用历史缓存对象进行优化</h2><blockquote>
<ul>
<li>ListView其实是一个比较难用的控件，因为它有很多细节可以优化，运行效率就是其中很重要的一点，我们上面写的ListView运行效率是很低的，因为在getView()方法中，每次都将布局重新加载了一遍，当ListView快速滚动的时候，会明显出现卡顿的现象(由于我们的数据量比较少，无法体现出卡顿效果，当数据量比较大的时候能够明显看出)，这时候我们就需要优化ListView的，我们可以发现getView()方法里还有一个view(原先是convertView)是我们没用到的，这是一个缓存对象，就是用于优化ListView的。</li>
</ul>
</blockquote>
<h3 id="修改MyAdapter中的代码"><a href="#修改MyAdapter中的代码" class="headerlink" title="修改MyAdapter中的代码:"></a>修改MyAdapter中的代码:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">   ...</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> i, View view, ViewGroup viewGroup)</span> </span>&#123;</div><div class="line">        <span class="comment">//        LayoutInflater inflater = LayoutInflater.from(mContext);</span></div><div class="line">        <span class="comment">//        LinearLayout layout = (LinearLayout) inflater.inflate(R.layout.contact, null);</span></div><div class="line">        <span class="comment">//        TextView nametv = (TextView) layout.findViewById(R.id.name);</span></div><div class="line">        <span class="comment">//        TextView numbertv = (TextView) layout.findViewById(R.id.number);</span></div><div class="line">        <span class="comment">//        nametv.setText(mContactInfoList.get(i).getName());</span></div><div class="line">        <span class="comment">//        numbertv.setText(mContactInfoList.get(i).getNumber());</span></div><div class="line">        ViewHolder holder;</div><div class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">            view = LayoutInflater.from(mContext).inflate(R.layout.contact, <span class="keyword">null</span>);</div><div class="line">            holder = <span class="keyword">new</span> ViewHolder();</div><div class="line">            holder.nametv = (TextView) view.findViewById(R.id.name);</div><div class="line">            holder.numbertv = (TextView) view.findViewById(R.id.number);</div><div class="line">            holder.nametv.setText(mContactInfoList.get(i).getName());</div><div class="line">            holder.numbertv.setText(mContactInfoList.get(i).getNumber());</div><div class="line">            view.setTag(holder);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            holder = (ViewHolder) view.getTag();</div><div class="line">            holder.nametv.setText(mContactInfoList.get(i).getName());</div><div class="line">            holder.numbertv.setText(mContactInfoList.get(i).getNumber());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        TextView nametv;</div><div class="line">        TextView numbertv;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>首先创建了一个内部类ViewHolder，用于对控件的实例进行缓存。</li>
<li>在getView方法中，创建了一个ViewHolder对象，当缓存view为空时，就将联系人的信息封装在ViewHolder里，然后调用setTag()方法将ViewHolder储存在view中，而当缓存不为空时，就调用getTag()方法取出ViewHolder，这样就实现了缓存的复用。</li>
</ul>
</blockquote>
<h3 id="继续改进"><a href="#继续改进" class="headerlink" title="继续改进"></a>继续改进</h3><blockquote>
<ul>
<li>通过复用缓存对象我们对ListView进行了优化，而通过观察getView()方法，我们发现不管缓存view为空时，新建ViewHolder去缓存实例还是缓存view不为空时，取出缓存，我们都需要用这个ViewHolder对TextView进行设置文本内容，所以我们又可以进一步优化代码:</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> i, View view, ViewGroup viewGroup)</span> </span>&#123;</div><div class="line">       </div><div class="line">       ...</div><div class="line">       </div><div class="line">        ViewHolder holder;</div><div class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">            view = LayoutInflater.from(mContext).inflate(R.layout.contact, <span class="keyword">null</span>);</div><div class="line">            holder = <span class="keyword">new</span> ViewHolder();</div><div class="line">            holder.nametv = (TextView) view.findViewById(R.id.name);</div><div class="line">            holder.numbertv = (TextView) view.findViewById(R.id.number);</div><div class="line">            view.setTag(holder);</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">            holder = (ViewHolder) view.getTag();</div><div class="line">        holder.nametv.setText(mContactInfoList.get(i).getName());</div><div class="line">        holder.numbertv.setText(mContactInfoList.get(i).getNumber());</div><div class="line"></div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   ...</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>这里我们将holder.nametv.setText(mContactInfoList.get(i).getName())和     holder.numbertv.setText(mContactInfoList.get(i).getNumber())放到判断语句外边，减少了代码的重复(其实就是之前忘了放)。</li>
</ul>
</blockquote>
<p>这样就完成了从手机系统通讯录中取出数据放到我们自己的通讯录上的效果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何做一个简单的通讯录&quot;&gt;&lt;a href=&quot;#如何做一个简单的通讯录&quot; class=&quot;headerlink&quot; title=&quot;如何做一个简单的通讯录&quot;&gt;&lt;/a&gt;如何做一个简单的通讯录&lt;/h1&gt;&lt;h2 id=&quot;获取手机通讯录信息&quot;&gt;&lt;a href=&quot;#获取手机通讯录信
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="demo" scheme="https://izdo.github.io/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>如何做一个简单的倒计时</title>
    <link href="https://izdo.github.io/2017/03/25/%E5%88%B6%E4%BD%9C%E5%80%92%E8%AE%A1%E6%97%B6/"/>
    <id>https://izdo.github.io/2017/03/25/制作倒计时/</id>
    <published>2017-03-25T08:36:11.032Z</published>
    <updated>2017-04-06T12:43:41.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何做一个简单的倒计时"><a href="#如何做一个简单的倒计时" class="headerlink" title="如何做一个简单的倒计时"></a>如何做一个简单的倒计时</h1><h2 id="1-创建新工程CountTime"><a href="#1-创建新工程CountTime" class="headerlink" title="1. 创建新工程CountTime"></a>1. 创建新工程CountTime</h2><h2 id="2-布局文件activity-main-xml"><a href="#2-布局文件activity-main-xml" class="headerlink" title="2. 布局文件activity_main.xml:"></a>2. 布局文件activity_main.xml:</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.counttime.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/inputtime"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:ems</span>=<span class="string">"10"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/gettime"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"获取倒计时时间"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/time"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/starttime"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"开始计时"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/stoptime"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"停止计时"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>inputtime用于输入倒计时时间<br>gettime用于显示inputtime输入的时间<br>time用于显示倒计时时间<br>starttime、stoptime分别用于开始和停止倒计时</p>
</blockquote>
<ul>
<li><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图:"></a>效果图:</h3></li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog1/Blog1_1.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="3-MainActivity逻辑"><a href="#3-MainActivity逻辑" class="headerlink" title="3. MainActivity逻辑:"></a>3. MainActivity逻辑:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.counttime;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"><span class="keyword">import</span> android.os.Message;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Timer;</div><div class="line"><span class="keyword">import</span> java.util.TimerTask;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EditText inputet;</div><div class="line">    <span class="keyword">private</span> Button getTime, startTime, stopTime;</div><div class="line">    <span class="keyword">private</span> TextView time;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> Timer timer = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> TimerTask task = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="comment">//调用初始化控件方法</span></div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 初始化控件</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        inputet = (EditText) findViewById(R.id.inputtime);</div><div class="line">        getTime = (Button) findViewById(R.id.gettime);</div><div class="line">        startTime = (Button) findViewById(R.id.starttime);</div><div class="line">        stopTime = (Button) findViewById(R.id.stoptime);</div><div class="line">        time = (TextView) findViewById(R.id.time);</div><div class="line">        getTime.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        startTime.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        stopTime.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 设置点击事件</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">            <span class="comment">// 点击gettime按钮获取inputet上的时间值</span></div><div class="line">            <span class="keyword">case</span> R.id.gettime:</div><div class="line">                time.setText(inputet.getText().toString());</div><div class="line">                i = Integer.parseInt(inputet.getText().toString());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.starttime:</div><div class="line">                startTime();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.stoptime:</div><div class="line">                stopTime();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 使用Handler实现对主线程的更新UI操作</span></div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="comment">// 调用handleMessage处理消息</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            time.setText(msg.arg1 + <span class="string">""</span>);</div><div class="line">            startTime();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 创建计时器和计时任务</span></div><div class="line">        timer = <span class="keyword">new</span> Timer();</div><div class="line">        task = <span class="keyword">new</span> TimerTask() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                i--;</div><div class="line">                Message message = mHandler.obtainMessage();</div><div class="line">                message.arg1 = i;</div><div class="line">                mHandler.sendMessage(message);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        timer.schedule(task, <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 取消计时器</span></div><div class="line">        timer.cancel();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p>由于主线程不允许子线程更新UI，因此这里需要用到Handler实现子线程更新UI的操作。</p>
</li>
<li><p>首先创建一个Handler并调用handleMessage方法处理sendMessage传递过来的消息，需要注意的是，TextView的setText方法只能传入String类型的参数，因此不能单单传入msg.arg1，一种简单的处理方式就是在后面加上“”将其转换成字符串:time.setText(msg.arg1 + “”);。</p>
</li>
<li><p>Timer和TimerTask一般是配合使用的(由TimerTask实现任务内容，然后将任务放入计时器Timer),在TimerTask的run()方法里创建一个Message用于向Handler发送消息，这里传入的是i(此前已经将inputet中的数字赋给i)，并调用sendMessage方法将Message发送给Handler，最后调用schedule()方法将TimerTask放入计时器。</p>
</li>
<li><p>timer.schedule(task, 1);第一个参数表示要放入的TimerTask任务，第二个参数是一个毫秒值，表示多少时间之后启动任务，这里放入1000毫秒(1秒)。</p>
</li>
<li><p>最后调用cancel()方法取消任务。</p>
</li>
<li><p>ps:在startTime()中调用sendMessage()方法向Handler发送消息，而在Handler的handleMessage中又调用startTime()方法，这样就形成了sendMessage()-&gt;handleMessage()-&gt;sendMessage()-&gt;handleMessage()-&gt;…的循环。</p>
</li>
</ul>
</blockquote>
<h2 id="4-部署到Genymotion观看效果"><a href="#4-部署到Genymotion观看效果" class="headerlink" title="4. 部署到Genymotion观看效果:"></a>4. 部署到Genymotion观看效果:</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog1/Blog1_2.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="5-改进"><a href="#5-改进" class="headerlink" title="5. 改进"></a>5. 改进</h2><blockquote>
<p>这里存在这一个问题就是计时器读数到0后会变成负数，所以下面需要修改一些代码使计时器归0后停止计时。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                i--;</div><div class="line">                <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</div><div class="line">                    stopTime();</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li><p>这里在startTime()方法中的run()方法中加入一个if判断，当i小于0的时候就调用stopTime()方法并且return。(这里判断条件是小于0而不是等于0是逻辑顺序的问题)</p>
</li>
<li><p>为了更好地看到”刹车”效果，将任务间隔设置为1毫秒。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">timer.schedule(task, <span class="number">1</span>);</div></pre></td></tr></table></figure>
</li>
<li><h3 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下:"></a>效果如下:</h3></li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/iZdo/iZdo.github.io/blob/master/BlogImgs/Blog1/Blog1_3.gif?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>对于目前的程序，由于从inputet获取的值为int类型，但当我们输入小数或者字符和其他符号时，程序会崩溃，这里可以使用正则表达式限制输入。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何做一个简单的倒计时&quot;&gt;&lt;a href=&quot;#如何做一个简单的倒计时&quot; class=&quot;headerlink&quot; title=&quot;如何做一个简单的倒计时&quot;&gt;&lt;/a&gt;如何做一个简单的倒计时&lt;/h1&gt;&lt;h2 id=&quot;1-创建新工程CountTime&quot;&gt;&lt;a href=&quot;#1
    
    </summary>
    
      <category term="Android" scheme="https://izdo.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://izdo.github.io/tags/Android/"/>
    
      <category term="demo" scheme="https://izdo.github.io/tags/demo/"/>
    
  </entry>
  
</feed>
